
blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ab1c  0800ab1c  0000ab1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab74  0800ab74  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab74  0800ab74  0000ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab7c  0800ab7c  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab7c  0800ab7c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab80  0800ab80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ab84  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b1b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000133f  00000000  00000000  00017bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00018f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005b8  00000000  00000000  00019530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201e6  00000000  00000000  00019ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b84  00000000  00000000  00039cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c297d  00000000  00000000  00041852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001041cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bfc  00000000  00000000  00104220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000070 	.word	0x20000070
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800ab04 	.word	0x0800ab04

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000074 	.word	0x20000074
 80081cc:	0800ab04 	.word	0x0800ab04

080081d0 <strlen>:
 80081d0:	4603      	mov	r3, r0
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1fb      	bne.n	80081d2 <strlen+0x2>
 80081da:	1a18      	subs	r0, r3, r0
 80081dc:	3801      	subs	r0, #1
 80081de:	4770      	bx	lr

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b974 	b.w	8008580 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468e      	mov	lr, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d14d      	bne.n	800835a <__udivmoddi4+0xaa>
 80082be:	428a      	cmp	r2, r1
 80082c0:	4694      	mov	ip, r2
 80082c2:	d969      	bls.n	8008398 <__udivmoddi4+0xe8>
 80082c4:	fab2 f282 	clz	r2, r2
 80082c8:	b152      	cbz	r2, 80082e0 <__udivmoddi4+0x30>
 80082ca:	fa01 f302 	lsl.w	r3, r1, r2
 80082ce:	f1c2 0120 	rsb	r1, r2, #32
 80082d2:	fa20 f101 	lsr.w	r1, r0, r1
 80082d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082da:	ea41 0e03 	orr.w	lr, r1, r3
 80082de:	4094      	lsls	r4, r2
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	0c21      	lsrs	r1, r4, #16
 80082e6:	fbbe f6f8 	udiv	r6, lr, r8
 80082ea:	fa1f f78c 	uxth.w	r7, ip
 80082ee:	fb08 e316 	mls	r3, r8, r6, lr
 80082f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f6:	fb06 f107 	mul.w	r1, r6, r7
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d90a      	bls.n	8008314 <__udivmoddi4+0x64>
 80082fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008302:	f106 30ff 	add.w	r0, r6, #4294967295
 8008306:	f080 811f 	bcs.w	8008548 <__udivmoddi4+0x298>
 800830a:	4299      	cmp	r1, r3
 800830c:	f240 811c 	bls.w	8008548 <__udivmoddi4+0x298>
 8008310:	3e02      	subs	r6, #2
 8008312:	4463      	add	r3, ip
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	b2a4      	uxth	r4, r4
 8008318:	fbb3 f0f8 	udiv	r0, r3, r8
 800831c:	fb08 3310 	mls	r3, r8, r0, r3
 8008320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008324:	fb00 f707 	mul.w	r7, r0, r7
 8008328:	42a7      	cmp	r7, r4
 800832a:	d90a      	bls.n	8008342 <__udivmoddi4+0x92>
 800832c:	eb1c 0404 	adds.w	r4, ip, r4
 8008330:	f100 33ff 	add.w	r3, r0, #4294967295
 8008334:	f080 810a 	bcs.w	800854c <__udivmoddi4+0x29c>
 8008338:	42a7      	cmp	r7, r4
 800833a:	f240 8107 	bls.w	800854c <__udivmoddi4+0x29c>
 800833e:	4464      	add	r4, ip
 8008340:	3802      	subs	r0, #2
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	1be4      	subs	r4, r4, r7
 8008348:	2600      	movs	r6, #0
 800834a:	b11d      	cbz	r5, 8008354 <__udivmoddi4+0xa4>
 800834c:	40d4      	lsrs	r4, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e9c5 4300 	strd	r4, r3, [r5]
 8008354:	4631      	mov	r1, r6
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	428b      	cmp	r3, r1
 800835c:	d909      	bls.n	8008372 <__udivmoddi4+0xc2>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 80ef 	beq.w	8008542 <__udivmoddi4+0x292>
 8008364:	2600      	movs	r6, #0
 8008366:	e9c5 0100 	strd	r0, r1, [r5]
 800836a:	4630      	mov	r0, r6
 800836c:	4631      	mov	r1, r6
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	fab3 f683 	clz	r6, r3
 8008376:	2e00      	cmp	r6, #0
 8008378:	d14a      	bne.n	8008410 <__udivmoddi4+0x160>
 800837a:	428b      	cmp	r3, r1
 800837c:	d302      	bcc.n	8008384 <__udivmoddi4+0xd4>
 800837e:	4282      	cmp	r2, r0
 8008380:	f200 80f9 	bhi.w	8008576 <__udivmoddi4+0x2c6>
 8008384:	1a84      	subs	r4, r0, r2
 8008386:	eb61 0303 	sbc.w	r3, r1, r3
 800838a:	2001      	movs	r0, #1
 800838c:	469e      	mov	lr, r3
 800838e:	2d00      	cmp	r5, #0
 8008390:	d0e0      	beq.n	8008354 <__udivmoddi4+0xa4>
 8008392:	e9c5 4e00 	strd	r4, lr, [r5]
 8008396:	e7dd      	b.n	8008354 <__udivmoddi4+0xa4>
 8008398:	b902      	cbnz	r2, 800839c <__udivmoddi4+0xec>
 800839a:	deff      	udf	#255	; 0xff
 800839c:	fab2 f282 	clz	r2, r2
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f040 8092 	bne.w	80084ca <__udivmoddi4+0x21a>
 80083a6:	eba1 010c 	sub.w	r1, r1, ip
 80083aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	2601      	movs	r6, #1
 80083b4:	0c20      	lsrs	r0, r4, #16
 80083b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ba:	fb07 1113 	mls	r1, r7, r3, r1
 80083be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083c2:	fb0e f003 	mul.w	r0, lr, r3
 80083c6:	4288      	cmp	r0, r1
 80083c8:	d908      	bls.n	80083dc <__udivmoddi4+0x12c>
 80083ca:	eb1c 0101 	adds.w	r1, ip, r1
 80083ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x12a>
 80083d4:	4288      	cmp	r0, r1
 80083d6:	f200 80cb 	bhi.w	8008570 <__udivmoddi4+0x2c0>
 80083da:	4643      	mov	r3, r8
 80083dc:	1a09      	subs	r1, r1, r0
 80083de:	b2a4      	uxth	r4, r4
 80083e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083e4:	fb07 1110 	mls	r1, r7, r0, r1
 80083e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083ec:	fb0e fe00 	mul.w	lr, lr, r0
 80083f0:	45a6      	cmp	lr, r4
 80083f2:	d908      	bls.n	8008406 <__udivmoddi4+0x156>
 80083f4:	eb1c 0404 	adds.w	r4, ip, r4
 80083f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80083fc:	d202      	bcs.n	8008404 <__udivmoddi4+0x154>
 80083fe:	45a6      	cmp	lr, r4
 8008400:	f200 80bb 	bhi.w	800857a <__udivmoddi4+0x2ca>
 8008404:	4608      	mov	r0, r1
 8008406:	eba4 040e 	sub.w	r4, r4, lr
 800840a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800840e:	e79c      	b.n	800834a <__udivmoddi4+0x9a>
 8008410:	f1c6 0720 	rsb	r7, r6, #32
 8008414:	40b3      	lsls	r3, r6
 8008416:	fa22 fc07 	lsr.w	ip, r2, r7
 800841a:	ea4c 0c03 	orr.w	ip, ip, r3
 800841e:	fa20 f407 	lsr.w	r4, r0, r7
 8008422:	fa01 f306 	lsl.w	r3, r1, r6
 8008426:	431c      	orrs	r4, r3
 8008428:	40f9      	lsrs	r1, r7
 800842a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800842e:	fa00 f306 	lsl.w	r3, r0, r6
 8008432:	fbb1 f8f9 	udiv	r8, r1, r9
 8008436:	0c20      	lsrs	r0, r4, #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fb09 1118 	mls	r1, r9, r8, r1
 8008440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008444:	fb08 f00e 	mul.w	r0, r8, lr
 8008448:	4288      	cmp	r0, r1
 800844a:	fa02 f206 	lsl.w	r2, r2, r6
 800844e:	d90b      	bls.n	8008468 <__udivmoddi4+0x1b8>
 8008450:	eb1c 0101 	adds.w	r1, ip, r1
 8008454:	f108 3aff 	add.w	sl, r8, #4294967295
 8008458:	f080 8088 	bcs.w	800856c <__udivmoddi4+0x2bc>
 800845c:	4288      	cmp	r0, r1
 800845e:	f240 8085 	bls.w	800856c <__udivmoddi4+0x2bc>
 8008462:	f1a8 0802 	sub.w	r8, r8, #2
 8008466:	4461      	add	r1, ip
 8008468:	1a09      	subs	r1, r1, r0
 800846a:	b2a4      	uxth	r4, r4
 800846c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008470:	fb09 1110 	mls	r1, r9, r0, r1
 8008474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008478:	fb00 fe0e 	mul.w	lr, r0, lr
 800847c:	458e      	cmp	lr, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x1e2>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f100 34ff 	add.w	r4, r0, #4294967295
 8008488:	d26c      	bcs.n	8008564 <__udivmoddi4+0x2b4>
 800848a:	458e      	cmp	lr, r1
 800848c:	d96a      	bls.n	8008564 <__udivmoddi4+0x2b4>
 800848e:	3802      	subs	r0, #2
 8008490:	4461      	add	r1, ip
 8008492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008496:	fba0 9402 	umull	r9, r4, r0, r2
 800849a:	eba1 010e 	sub.w	r1, r1, lr
 800849e:	42a1      	cmp	r1, r4
 80084a0:	46c8      	mov	r8, r9
 80084a2:	46a6      	mov	lr, r4
 80084a4:	d356      	bcc.n	8008554 <__udivmoddi4+0x2a4>
 80084a6:	d053      	beq.n	8008550 <__udivmoddi4+0x2a0>
 80084a8:	b15d      	cbz	r5, 80084c2 <__udivmoddi4+0x212>
 80084aa:	ebb3 0208 	subs.w	r2, r3, r8
 80084ae:	eb61 010e 	sbc.w	r1, r1, lr
 80084b2:	fa01 f707 	lsl.w	r7, r1, r7
 80084b6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ba:	40f1      	lsrs	r1, r6
 80084bc:	431f      	orrs	r7, r3
 80084be:	e9c5 7100 	strd	r7, r1, [r5]
 80084c2:	2600      	movs	r6, #0
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	f1c2 0320 	rsb	r3, r2, #32
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084d4:	fa21 f303 	lsr.w	r3, r1, r3
 80084d8:	4091      	lsls	r1, r2
 80084da:	4301      	orrs	r1, r0
 80084dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084e0:	fa1f fe8c 	uxth.w	lr, ip
 80084e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084e8:	fb07 3610 	mls	r6, r7, r0, r3
 80084ec:	0c0b      	lsrs	r3, r1, #16
 80084ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80084f2:	fb00 f60e 	mul.w	r6, r0, lr
 80084f6:	429e      	cmp	r6, r3
 80084f8:	fa04 f402 	lsl.w	r4, r4, r2
 80084fc:	d908      	bls.n	8008510 <__udivmoddi4+0x260>
 80084fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	d22f      	bcs.n	8008568 <__udivmoddi4+0x2b8>
 8008508:	429e      	cmp	r6, r3
 800850a:	d92d      	bls.n	8008568 <__udivmoddi4+0x2b8>
 800850c:	3802      	subs	r0, #2
 800850e:	4463      	add	r3, ip
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	b289      	uxth	r1, r1
 8008514:	fbb3 f6f7 	udiv	r6, r3, r7
 8008518:	fb07 3316 	mls	r3, r7, r6, r3
 800851c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008520:	fb06 f30e 	mul.w	r3, r6, lr
 8008524:	428b      	cmp	r3, r1
 8008526:	d908      	bls.n	800853a <__udivmoddi4+0x28a>
 8008528:	eb1c 0101 	adds.w	r1, ip, r1
 800852c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008530:	d216      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008532:	428b      	cmp	r3, r1
 8008534:	d914      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008536:	3e02      	subs	r6, #2
 8008538:	4461      	add	r1, ip
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008540:	e738      	b.n	80083b4 <__udivmoddi4+0x104>
 8008542:	462e      	mov	r6, r5
 8008544:	4628      	mov	r0, r5
 8008546:	e705      	b.n	8008354 <__udivmoddi4+0xa4>
 8008548:	4606      	mov	r6, r0
 800854a:	e6e3      	b.n	8008314 <__udivmoddi4+0x64>
 800854c:	4618      	mov	r0, r3
 800854e:	e6f8      	b.n	8008342 <__udivmoddi4+0x92>
 8008550:	454b      	cmp	r3, r9
 8008552:	d2a9      	bcs.n	80084a8 <__udivmoddi4+0x1f8>
 8008554:	ebb9 0802 	subs.w	r8, r9, r2
 8008558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800855c:	3801      	subs	r0, #1
 800855e:	e7a3      	b.n	80084a8 <__udivmoddi4+0x1f8>
 8008560:	4646      	mov	r6, r8
 8008562:	e7ea      	b.n	800853a <__udivmoddi4+0x28a>
 8008564:	4620      	mov	r0, r4
 8008566:	e794      	b.n	8008492 <__udivmoddi4+0x1e2>
 8008568:	4640      	mov	r0, r8
 800856a:	e7d1      	b.n	8008510 <__udivmoddi4+0x260>
 800856c:	46d0      	mov	r8, sl
 800856e:	e77b      	b.n	8008468 <__udivmoddi4+0x1b8>
 8008570:	3b02      	subs	r3, #2
 8008572:	4461      	add	r1, ip
 8008574:	e732      	b.n	80083dc <__udivmoddi4+0x12c>
 8008576:	4630      	mov	r0, r6
 8008578:	e709      	b.n	800838e <__udivmoddi4+0xde>
 800857a:	4464      	add	r4, ip
 800857c:	3802      	subs	r0, #2
 800857e:	e742      	b.n	8008406 <__udivmoddi4+0x156>

08008580 <__aeabi_idiv0>:
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <printmsg>:
static void MX_USART3_UART_Init(void);


/*************************Print Message Functions**************************/
void printmsg(char *format,...)
{
 8008584:	b40f      	push	{r0, r1, r2, r3}
 8008586:	b580      	push	{r7, lr}
 8008588:	b096      	sub	sp, #88	; 0x58
 800858a:	af00      	add	r7, sp, #0
	char str[80];
	va_list args;
	va_start(args, format);
 800858c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008590:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fe5a 	bl	800a254 <vsiprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80085a0:	f107 0308 	add.w	r3, r7, #8
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fe13 	bl	80081d0 <strlen>
 80085aa:	4603      	mov	r3, r0
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	f107 0108 	add.w	r1, r7, #8
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <printmsg+0x48>)
 80085b8:	f001 fa8f 	bl	8009ada <HAL_UART_Transmit>
	va_end(args);
}
 80085bc:	bf00      	nop
 80085be:	3758      	adds	r7, #88	; 0x58
 80085c0:	46bd      	mov	sp, r7
 80085c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085c6:	b004      	add	sp, #16
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	2000008c 	.word	0x2000008c

080085d0 <main>:

int main(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0

  HAL_Init();
 80085d4:	f000 fa74 	bl	8008ac0 <HAL_Init>

  SystemClock_Config();
 80085d8:	f000 f814 	bl	8008604 <SystemClock_Config>

  MX_GPIO_Init();
 80085dc:	f000 f8ba 	bl	8008754 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80085e0:	f000 f88e 	bl	8008700 <MX_USART3_UART_Init>
  printmsg("JUMP APP1\r\n");
 80085e4:	4805      	ldr	r0, [pc, #20]	; (80085fc <main+0x2c>)
 80085e6:	f7ff ffcd 	bl	8008584 <printmsg>

  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80085ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085ee:	4804      	ldr	r0, [pc, #16]	; (8008600 <main+0x30>)
 80085f0:	f000 fdb3 	bl	800915a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80085f4:	2064      	movs	r0, #100	; 0x64
 80085f6:	f000 fad5 	bl	8008ba4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80085fa:	e7f6      	b.n	80085ea <main+0x1a>
 80085fc:	0800ab1c 	.word	0x0800ab1c
 8008600:	40020c00 	.word	0x40020c00

08008604 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b094      	sub	sp, #80	; 0x50
 8008608:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800860a:	f107 0320 	add.w	r3, r7, #32
 800860e:	2230      	movs	r2, #48	; 0x30
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fe00 	bl	800a218 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	605a      	str	r2, [r3, #4]
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_PWR_CLK_ENABLE();
 8008628:	2300      	movs	r3, #0
 800862a:	60bb      	str	r3, [r7, #8]
 800862c:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <SystemClock_Config+0xf0>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	4a30      	ldr	r2, [pc, #192]	; (80086f4 <SystemClock_Config+0xf0>)
 8008632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008636:	6413      	str	r3, [r2, #64]	; 0x40
 8008638:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <SystemClock_Config+0xf0>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008644:	2300      	movs	r3, #0
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	4b2b      	ldr	r3, [pc, #172]	; (80086f8 <SystemClock_Config+0xf4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2a      	ldr	r2, [pc, #168]	; (80086f8 <SystemClock_Config+0xf4>)
 800864e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	4b28      	ldr	r3, [pc, #160]	; (80086f8 <SystemClock_Config+0xf4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	687b      	ldr	r3, [r7, #4]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008660:	2302      	movs	r3, #2
 8008662:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008664:	2301      	movs	r3, #1
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008668:	2310      	movs	r3, #16
 800866a:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800866c:	2302      	movs	r3, #2
 800866e:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8008674:	2308      	movs	r3, #8
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 84;
 8008678:	2354      	movs	r3, #84	; 0x54
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800867c:	2302      	movs	r3, #2
 800867e:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008680:	2304      	movs	r3, #4
 8008682:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008684:	f107 0320 	add.w	r3, r7, #32
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fd81 	bl	8009190 <HAL_RCC_OscConfig>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 8008694:	f000 f8fe 	bl	8008894 <Error_Handler>
	  }

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008698:	230f      	movs	r3, #15
 800869a:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800869c:	2302      	movs	r3, #2
 800869e:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80086a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a8:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80086aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086ae:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 ffe2 	bl	8009680 <HAL_RCC_ClockConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <SystemClock_Config+0xc2>
	  {
	    Error_Handler();
 80086c2:	f000 f8e7 	bl	8008894 <Error_Handler>
	  }

	  /**Configure the Systick interrupt time
	  */
	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80086c6:	f001 f987 	bl	80099d8 <HAL_RCC_GetHCLKFreq>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4a0b      	ldr	r2, [pc, #44]	; (80086fc <SystemClock_Config+0xf8>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	099b      	lsrs	r3, r3, #6
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fb62 	bl	8008d9e <HAL_SYSTICK_Config>

	  /**Configure the Systick
	  */
	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80086da:	2004      	movs	r0, #4
 80086dc:	f000 fb6c 	bl	8008db8 <HAL_SYSTICK_CLKSourceConfig>

	 /* SysTick_IRQn interrupt configuration */
	 HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80086e0:	2200      	movs	r2, #0
 80086e2:	2100      	movs	r1, #0
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	f000 fb3d 	bl	8008d66 <HAL_NVIC_SetPriority>
}
 80086ec:	bf00      	nop
 80086ee:	3750      	adds	r7, #80	; 0x50
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	40023800 	.word	0x40023800
 80086f8:	40007000 	.word	0x40007000
 80086fc:	10624dd3 	.word	0x10624dd3

08008700 <MX_USART3_UART_Init>:

/**************************USART COMMUNICATION INIT*************************/


static void MX_USART3_UART_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
	  huart3.Instance = USART3;
 8008704:	4b11      	ldr	r3, [pc, #68]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008706:	4a12      	ldr	r2, [pc, #72]	; (8008750 <MX_USART3_UART_Init+0x50>)
 8008708:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 800870a:	4b10      	ldr	r3, [pc, #64]	; (800874c <MX_USART3_UART_Init+0x4c>)
 800870c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008710:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008712:	4b0e      	ldr	r3, [pc, #56]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <MX_USART3_UART_Init+0x4c>)
 800871a:	2200      	movs	r2, #0
 800871c:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008720:	2200      	movs	r2, #0
 8008722:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8008724:	4b09      	ldr	r3, [pc, #36]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008726:	220c      	movs	r2, #12
 8008728:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <MX_USART3_UART_Init+0x4c>)
 800872c:	2200      	movs	r2, #0
 800872e:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008732:	2200      	movs	r2, #0
 8008734:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008736:	4805      	ldr	r0, [pc, #20]	; (800874c <MX_USART3_UART_Init+0x4c>)
 8008738:	f001 f982 	bl	8009a40 <HAL_UART_Init>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <MX_USART3_UART_Init+0x46>
	  {
	    Error_Handler();
 8008742:	f000 f8a7 	bl	8008894 <Error_Handler>
	  }
}
 8008746:	bf00      	nop
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	2000008c 	.word	0x2000008c
 8008750:	40004800 	.word	0x40004800

08008754 <MX_GPIO_Init>:

/**************************GPIO INIT*************************/

static void MX_GPIO_Init(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	609a      	str	r2, [r3, #8]
 8008766:	60da      	str	r2, [r3, #12]
 8008768:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	4b46      	ldr	r3, [pc, #280]	; (8008888 <MX_GPIO_Init+0x134>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	4a45      	ldr	r2, [pc, #276]	; (8008888 <MX_GPIO_Init+0x134>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6313      	str	r3, [r2, #48]	; 0x30
 800877a:	4b43      	ldr	r3, [pc, #268]	; (8008888 <MX_GPIO_Init+0x134>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	4b3f      	ldr	r3, [pc, #252]	; (8008888 <MX_GPIO_Init+0x134>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	4a3e      	ldr	r2, [pc, #248]	; (8008888 <MX_GPIO_Init+0x134>)
 8008790:	f043 0308 	orr.w	r3, r3, #8
 8008794:	6313      	str	r3, [r2, #48]	; 0x30
 8008796:	4b3c      	ldr	r3, [pc, #240]	; (8008888 <MX_GPIO_Init+0x134>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	4b38      	ldr	r3, [pc, #224]	; (8008888 <MX_GPIO_Init+0x134>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	4a37      	ldr	r2, [pc, #220]	; (8008888 <MX_GPIO_Init+0x134>)
 80087ac:	f043 0304 	orr.w	r3, r3, #4
 80087b0:	6313      	str	r3, [r2, #48]	; 0x30
 80087b2:	4b35      	ldr	r3, [pc, #212]	; (8008888 <MX_GPIO_Init+0x134>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80087be:	2301      	movs	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80087c6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087cc:	f107 030c 	add.w	r3, r7, #12
 80087d0:	4619      	mov	r1, r3
 80087d2:	482e      	ldr	r0, [pc, #184]	; (800888c <MX_GPIO_Init+0x138>)
 80087d4:	f000 fb0c 	bl	8008df0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PD12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80087d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087dc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087de:	2301      	movs	r3, #1
 80087e0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087ea:	f107 030c 	add.w	r3, r7, #12
 80087ee:	4619      	mov	r1, r3
 80087f0:	4827      	ldr	r0, [pc, #156]	; (8008890 <MX_GPIO_Init+0x13c>)
 80087f2:	f000 fafd 	bl	8008df0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80087f6:	2200      	movs	r2, #0
 80087f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80087fc:	4824      	ldr	r0, [pc, #144]	; (8008890 <MX_GPIO_Init+0x13c>)
 80087fe:	f000 fc93 	bl	8009128 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008806:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008808:	2301      	movs	r3, #1
 800880a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008810:	2300      	movs	r3, #0
 8008812:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008814:	f107 030c 	add.w	r3, r7, #12
 8008818:	4619      	mov	r1, r3
 800881a:	481d      	ldr	r0, [pc, #116]	; (8008890 <MX_GPIO_Init+0x13c>)
 800881c:	f000 fae8 	bl	8008df0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008820:	2200      	movs	r2, #0
 8008822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008826:	481a      	ldr	r0, [pc, #104]	; (8008890 <MX_GPIO_Init+0x13c>)
 8008828:	f000 fc7e 	bl	8009128 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800882c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008830:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008832:	2301      	movs	r3, #1
 8008834:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800883e:	f107 030c 	add.w	r3, r7, #12
 8008842:	4619      	mov	r1, r3
 8008844:	4812      	ldr	r0, [pc, #72]	; (8008890 <MX_GPIO_Init+0x13c>)
 8008846:	f000 fad3 	bl	8008df0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800884a:	2200      	movs	r2, #0
 800884c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008850:	480f      	ldr	r0, [pc, #60]	; (8008890 <MX_GPIO_Init+0x13c>)
 8008852:	f000 fc69 	bl	8009128 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800885c:	2301      	movs	r3, #1
 800885e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008864:	2300      	movs	r3, #0
 8008866:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	4619      	mov	r1, r3
 800886e:	4808      	ldr	r0, [pc, #32]	; (8008890 <MX_GPIO_Init+0x13c>)
 8008870:	f000 fabe 	bl	8008df0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8008874:	2200      	movs	r2, #0
 8008876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800887a:	4805      	ldr	r0, [pc, #20]	; (8008890 <MX_GPIO_Init+0x13c>)
 800887c:	f000 fc54 	bl	8009128 <HAL_GPIO_WritePin>

}
 8008880:	bf00      	nop
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40023800 	.word	0x40023800
 800888c:	40020000 	.word	0x40020000
 8008890:	40020c00 	.word	0x40020c00

08008894 <Error_Handler>:



/**************************ERROR HANDLER*************************/
void Error_Handler(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008898:	b672      	cpsid	i
}
 800889a:	bf00      	nop
	  __disable_irq();
	  while (1)
 800889c:	e7fe      	b.n	800889c <Error_Handler+0x8>
	...

080088a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <HAL_MspInit+0x4c>)
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	4a0f      	ldr	r2, [pc, #60]	; (80088ec <HAL_MspInit+0x4c>)
 80088b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b4:	6453      	str	r3, [r2, #68]	; 0x44
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <HAL_MspInit+0x4c>)
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088c2:	2300      	movs	r3, #0
 80088c4:	603b      	str	r3, [r7, #0]
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_MspInit+0x4c>)
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	4a08      	ldr	r2, [pc, #32]	; (80088ec <HAL_MspInit+0x4c>)
 80088cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d0:	6413      	str	r3, [r2, #64]	; 0x40
 80088d2:	4b06      	ldr	r3, [pc, #24]	; (80088ec <HAL_MspInit+0x4c>)
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40023800 	.word	0x40023800

080088f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f8:	f107 0314 	add.w	r3, r7, #20
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <HAL_UART_MspInit+0x84>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d12c      	bne.n	800896c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	613b      	str	r3, [r7, #16]
 8008916:	4b18      	ldr	r3, [pc, #96]	; (8008978 <HAL_UART_MspInit+0x88>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	4a17      	ldr	r2, [pc, #92]	; (8008978 <HAL_UART_MspInit+0x88>)
 800891c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008920:	6413      	str	r3, [r2, #64]	; 0x40
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <HAL_UART_MspInit+0x88>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800892a:	613b      	str	r3, [r7, #16]
 800892c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	4b11      	ldr	r3, [pc, #68]	; (8008978 <HAL_UART_MspInit+0x88>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a10      	ldr	r2, [pc, #64]	; (8008978 <HAL_UART_MspInit+0x88>)
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <HAL_UART_MspInit+0x88>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800894a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800894e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008950:	2302      	movs	r3, #2
 8008952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008958:	2303      	movs	r3, #3
 800895a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800895c:	2307      	movs	r3, #7
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	4619      	mov	r1, r3
 8008966:	4805      	ldr	r0, [pc, #20]	; (800897c <HAL_UART_MspInit+0x8c>)
 8008968:	f000 fa42 	bl	8008df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800896c:	bf00      	nop
 800896e:	3728      	adds	r7, #40	; 0x28
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40004800 	.word	0x40004800
 8008978:	40023800 	.word	0x40023800
 800897c:	40020400 	.word	0x40020400

08008980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008984:	e7fe      	b.n	8008984 <NMI_Handler+0x4>

08008986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008986:	b480      	push	{r7}
 8008988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800898a:	e7fe      	b.n	800898a <HardFault_Handler+0x4>

0800898c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008990:	e7fe      	b.n	8008990 <MemManage_Handler+0x4>

08008992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008992:	b480      	push	{r7}
 8008994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008996:	e7fe      	b.n	8008996 <BusFault_Handler+0x4>

08008998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800899c:	e7fe      	b.n	800899c <UsageFault_Handler+0x4>

0800899e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800899e:	b480      	push	{r7}
 80089a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089a2:	bf00      	nop
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089ba:	b480      	push	{r7}
 80089bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089be:	bf00      	nop
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089cc:	f000 f8ca 	bl	8008b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089d0:	bf00      	nop
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80089dc:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <_sbrk+0x5c>)
 80089de:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <_sbrk+0x60>)
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80089e8:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <_sbrk+0x64>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80089f0:	4b11      	ldr	r3, [pc, #68]	; (8008a38 <_sbrk+0x64>)
 80089f2:	4a12      	ldr	r2, [pc, #72]	; (8008a3c <_sbrk+0x68>)
 80089f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <_sbrk+0x64>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d207      	bcs.n	8008a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a04:	f001 fbde 	bl	800a1c4 <__errno>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	220c      	movs	r2, #12
 8008a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a12:	e009      	b.n	8008a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a14:	4b08      	ldr	r3, [pc, #32]	; (8008a38 <_sbrk+0x64>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a1a:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <_sbrk+0x64>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4413      	add	r3, r2
 8008a22:	4a05      	ldr	r2, [pc, #20]	; (8008a38 <_sbrk+0x64>)
 8008a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20020000 	.word	0x20020000
 8008a34:	00000400 	.word	0x00000400
 8008a38:	200000d0 	.word	0x200000d0
 8008a3c:	200000e8 	.word	0x200000e8

08008a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <SystemInit+0x24>)
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	4a06      	ldr	r2, [pc, #24]	; (8008a64 <SystemInit+0x24>)
 8008a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <SystemInit+0x24>)
 8008a56:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <SystemInit+0x28>)
 8008a58:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a5a:	bf00      	nop
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	e000ed00 	.word	0xe000ed00
 8008a68:	08008000 	.word	0x08008000

08008a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008a70:	480d      	ldr	r0, [pc, #52]	; (8008aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008a72:	490e      	ldr	r1, [pc, #56]	; (8008aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008a74:	4a0e      	ldr	r2, [pc, #56]	; (8008ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a78:	e002      	b.n	8008a80 <LoopCopyDataInit>

08008a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a7e:	3304      	adds	r3, #4

08008a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a84:	d3f9      	bcc.n	8008a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a86:	4a0b      	ldr	r2, [pc, #44]	; (8008ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008a88:	4c0b      	ldr	r4, [pc, #44]	; (8008ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a8c:	e001      	b.n	8008a92 <LoopFillZerobss>

08008a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a90:	3204      	adds	r2, #4

08008a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a94:	d3fb      	bcc.n	8008a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008a96:	f7ff ffd3 	bl	8008a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a9a:	f001 fb99 	bl	800a1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a9e:	f7ff fd97 	bl	80085d0 <main>
  bx  lr    
 8008aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008aac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008ab0:	0800ab84 	.word	0x0800ab84
  ldr r2, =_sbss
 8008ab4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008ab8:	200000e8 	.word	0x200000e8

08008abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008abc:	e7fe      	b.n	8008abc <ADC_IRQHandler>
	...

08008ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <HAL_Init+0x40>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a0d      	ldr	r2, [pc, #52]	; (8008b00 <HAL_Init+0x40>)
 8008aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ad0:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <HAL_Init+0x40>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <HAL_Init+0x40>)
 8008ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008adc:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <HAL_Init+0x40>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a07      	ldr	r2, [pc, #28]	; (8008b00 <HAL_Init+0x40>)
 8008ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ae8:	2003      	movs	r0, #3
 8008aea:	f000 f931 	bl	8008d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008aee:	200f      	movs	r0, #15
 8008af0:	f000 f808 	bl	8008b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008af4:	f7ff fed4 	bl	80088a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	40023c00 	.word	0x40023c00

08008b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b0c:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <HAL_InitTick+0x54>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <HAL_InitTick+0x58>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f93b 	bl	8008d9e <HAL_SYSTICK_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e00e      	b.n	8008b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b0f      	cmp	r3, #15
 8008b36:	d80a      	bhi.n	8008b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b38:	2200      	movs	r2, #0
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	f000 f911 	bl	8008d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b44:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <HAL_InitTick+0x5c>)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000000 	.word	0x20000000
 8008b5c:	20000008 	.word	0x20000008
 8008b60:	20000004 	.word	0x20000004

08008b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <HAL_IncTick+0x20>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <HAL_IncTick+0x24>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4413      	add	r3, r2
 8008b74:	4a04      	ldr	r2, [pc, #16]	; (8008b88 <HAL_IncTick+0x24>)
 8008b76:	6013      	str	r3, [r2, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000008 	.word	0x20000008
 8008b88:	200000d4 	.word	0x200000d4

08008b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <HAL_GetTick+0x14>)
 8008b92:	681b      	ldr	r3, [r3, #0]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	200000d4 	.word	0x200000d4

08008ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008bac:	f7ff ffee 	bl	8008b8c <HAL_GetTick>
 8008bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d005      	beq.n	8008bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <HAL_Delay+0x44>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008bca:	bf00      	nop
 8008bcc:	f7ff ffde 	bl	8008b8c <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d8f7      	bhi.n	8008bcc <HAL_Delay+0x28>
  {
  }
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000008 	.word	0x20000008

08008bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <__NVIC_SetPriorityGrouping+0x44>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c08:	4013      	ands	r3, r2
 8008c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c1e:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <__NVIC_SetPriorityGrouping+0x44>)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	60d3      	str	r3, [r2, #12]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <__NVIC_GetPriorityGrouping+0x18>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	f003 0307 	and.w	r3, r3, #7
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	e000ed00 	.word	0xe000ed00

08008c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	db0a      	blt.n	8008c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	490c      	ldr	r1, [pc, #48]	; (8008c9c <__NVIC_SetPriority+0x4c>)
 8008c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c6e:	0112      	lsls	r2, r2, #4
 8008c70:	b2d2      	uxtb	r2, r2
 8008c72:	440b      	add	r3, r1
 8008c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c78:	e00a      	b.n	8008c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	4908      	ldr	r1, [pc, #32]	; (8008ca0 <__NVIC_SetPriority+0x50>)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	f003 030f 	and.w	r3, r3, #15
 8008c86:	3b04      	subs	r3, #4
 8008c88:	0112      	lsls	r2, r2, #4
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	761a      	strb	r2, [r3, #24]
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	e000e100 	.word	0xe000e100
 8008ca0:	e000ed00 	.word	0xe000ed00

08008ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b089      	sub	sp, #36	; 0x24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f1c3 0307 	rsb	r3, r3, #7
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	bf28      	it	cs
 8008cc2:	2304      	movcs	r3, #4
 8008cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	2b06      	cmp	r3, #6
 8008ccc:	d902      	bls.n	8008cd4 <NVIC_EncodePriority+0x30>
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3b03      	subs	r3, #3
 8008cd2:	e000      	b.n	8008cd6 <NVIC_EncodePriority+0x32>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43da      	mvns	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	401a      	ands	r2, r3
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cec:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf6:	43d9      	mvns	r1, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cfc:	4313      	orrs	r3, r2
         );
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3724      	adds	r7, #36	; 0x24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d1c:	d301      	bcc.n	8008d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e00f      	b.n	8008d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d22:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <SysTick_Config+0x40>)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d2a:	210f      	movs	r1, #15
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	f7ff ff8e 	bl	8008c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <SysTick_Config+0x40>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d3a:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <SysTick_Config+0x40>)
 8008d3c:	2207      	movs	r2, #7
 8008d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	e000e010 	.word	0xe000e010

08008d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ff47 	bl	8008bec <__NVIC_SetPriorityGrouping>
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008d78:	f7ff ff5c 	bl	8008c34 <__NVIC_GetPriorityGrouping>
 8008d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	6978      	ldr	r0, [r7, #20]
 8008d84:	f7ff ff8e 	bl	8008ca4 <NVIC_EncodePriority>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff ff5d 	bl	8008c50 <__NVIC_SetPriority>
}
 8008d96:	bf00      	nop
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff ffb0 	bl	8008d0c <SysTick_Config>
 8008dac:	4603      	mov	r3, r0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d106      	bne.n	8008dd4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a08      	ldr	r2, [pc, #32]	; (8008dec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008dcc:	f043 0304 	orr.w	r3, r3, #4
 8008dd0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8008dd2:	e005      	b.n	8008de0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a04      	ldr	r2, [pc, #16]	; (8008dec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008dda:	f023 0304 	bic.w	r3, r3, #4
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	e000e010 	.word	0xe000e010

08008df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b089      	sub	sp, #36	; 0x24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	e16b      	b.n	80090e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	f040 815a 	bne.w	80090de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d005      	beq.n	8008e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d130      	bne.n	8008ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e52:	43db      	mvns	r3, r3
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	4013      	ands	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008e78:	2201      	movs	r2, #1
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e80:	43db      	mvns	r3, r3
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	4013      	ands	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	f003 0201 	and.w	r2, r3, #1
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d017      	beq.n	8008ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	2203      	movs	r2, #3
 8008ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d123      	bne.n	8008f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	08da      	lsrs	r2, r3, #3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3208      	adds	r2, #8
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	220f      	movs	r2, #15
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	08da      	lsrs	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3208      	adds	r2, #8
 8008f2e:	69b9      	ldr	r1, [r7, #24]
 8008f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	2203      	movs	r2, #3
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	43db      	mvns	r3, r3
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0203 	and.w	r2, r3, #3
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80b4 	beq.w	80090de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	4b60      	ldr	r3, [pc, #384]	; (80090fc <HAL_GPIO_Init+0x30c>)
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	4a5f      	ldr	r2, [pc, #380]	; (80090fc <HAL_GPIO_Init+0x30c>)
 8008f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f84:	6453      	str	r3, [r2, #68]	; 0x44
 8008f86:	4b5d      	ldr	r3, [pc, #372]	; (80090fc <HAL_GPIO_Init+0x30c>)
 8008f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f92:	4a5b      	ldr	r2, [pc, #364]	; (8009100 <HAL_GPIO_Init+0x310>)
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	3302      	adds	r3, #2
 8008f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	220f      	movs	r2, #15
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a52      	ldr	r2, [pc, #328]	; (8009104 <HAL_GPIO_Init+0x314>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d02b      	beq.n	8009016 <HAL_GPIO_Init+0x226>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a51      	ldr	r2, [pc, #324]	; (8009108 <HAL_GPIO_Init+0x318>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d025      	beq.n	8009012 <HAL_GPIO_Init+0x222>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a50      	ldr	r2, [pc, #320]	; (800910c <HAL_GPIO_Init+0x31c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d01f      	beq.n	800900e <HAL_GPIO_Init+0x21e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a4f      	ldr	r2, [pc, #316]	; (8009110 <HAL_GPIO_Init+0x320>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d019      	beq.n	800900a <HAL_GPIO_Init+0x21a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a4e      	ldr	r2, [pc, #312]	; (8009114 <HAL_GPIO_Init+0x324>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <HAL_GPIO_Init+0x216>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a4d      	ldr	r2, [pc, #308]	; (8009118 <HAL_GPIO_Init+0x328>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00d      	beq.n	8009002 <HAL_GPIO_Init+0x212>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a4c      	ldr	r2, [pc, #304]	; (800911c <HAL_GPIO_Init+0x32c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d007      	beq.n	8008ffe <HAL_GPIO_Init+0x20e>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a4b      	ldr	r2, [pc, #300]	; (8009120 <HAL_GPIO_Init+0x330>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d101      	bne.n	8008ffa <HAL_GPIO_Init+0x20a>
 8008ff6:	2307      	movs	r3, #7
 8008ff8:	e00e      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8008ffa:	2308      	movs	r3, #8
 8008ffc:	e00c      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8008ffe:	2306      	movs	r3, #6
 8009000:	e00a      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8009002:	2305      	movs	r3, #5
 8009004:	e008      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8009006:	2304      	movs	r3, #4
 8009008:	e006      	b.n	8009018 <HAL_GPIO_Init+0x228>
 800900a:	2303      	movs	r3, #3
 800900c:	e004      	b.n	8009018 <HAL_GPIO_Init+0x228>
 800900e:	2302      	movs	r3, #2
 8009010:	e002      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <HAL_GPIO_Init+0x228>
 8009016:	2300      	movs	r3, #0
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	f002 0203 	and.w	r2, r2, #3
 800901e:	0092      	lsls	r2, r2, #2
 8009020:	4093      	lsls	r3, r2
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	4313      	orrs	r3, r2
 8009026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009028:	4935      	ldr	r1, [pc, #212]	; (8009100 <HAL_GPIO_Init+0x310>)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	089b      	lsrs	r3, r3, #2
 800902e:	3302      	adds	r3, #2
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009036:	4b3b      	ldr	r3, [pc, #236]	; (8009124 <HAL_GPIO_Init+0x334>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	43db      	mvns	r3, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4013      	ands	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4313      	orrs	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800905a:	4a32      	ldr	r2, [pc, #200]	; (8009124 <HAL_GPIO_Init+0x334>)
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009060:	4b30      	ldr	r3, [pc, #192]	; (8009124 <HAL_GPIO_Init+0x334>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	43db      	mvns	r3, r3
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	4013      	ands	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009084:	4a27      	ldr	r2, [pc, #156]	; (8009124 <HAL_GPIO_Init+0x334>)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800908a:	4b26      	ldr	r3, [pc, #152]	; (8009124 <HAL_GPIO_Init+0x334>)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	43db      	mvns	r3, r3
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	4013      	ands	r3, r2
 8009098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80090ae:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <HAL_GPIO_Init+0x334>)
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090b4:	4b1b      	ldr	r3, [pc, #108]	; (8009124 <HAL_GPIO_Init+0x334>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	43db      	mvns	r3, r3
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	4013      	ands	r3, r2
 80090c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80090d8:	4a12      	ldr	r2, [pc, #72]	; (8009124 <HAL_GPIO_Init+0x334>)
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	3301      	adds	r3, #1
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	f67f ae90 	bls.w	8008e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	3724      	adds	r7, #36	; 0x24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40023800 	.word	0x40023800
 8009100:	40013800 	.word	0x40013800
 8009104:	40020000 	.word	0x40020000
 8009108:	40020400 	.word	0x40020400
 800910c:	40020800 	.word	0x40020800
 8009110:	40020c00 	.word	0x40020c00
 8009114:	40021000 	.word	0x40021000
 8009118:	40021400 	.word	0x40021400
 800911c:	40021800 	.word	0x40021800
 8009120:	40021c00 	.word	0x40021c00
 8009124:	40013c00 	.word	0x40013c00

08009128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	807b      	strh	r3, [r7, #2]
 8009134:	4613      	mov	r3, r2
 8009136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009138:	787b      	ldrb	r3, [r7, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800913e:	887a      	ldrh	r2, [r7, #2]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009144:	e003      	b.n	800914e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009146:	887b      	ldrh	r3, [r7, #2]
 8009148:	041a      	lsls	r2, r3, #16
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	619a      	str	r2, [r3, #24]
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800916c:	887a      	ldrh	r2, [r7, #2]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4013      	ands	r3, r2
 8009172:	041a      	lsls	r2, r3, #16
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	43d9      	mvns	r1, r3
 8009178:	887b      	ldrh	r3, [r7, #2]
 800917a:	400b      	ands	r3, r1
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	619a      	str	r2, [r3, #24]
}
 8009182:	bf00      	nop
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e267      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d075      	beq.n	800929a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ae:	4b88      	ldr	r3, [pc, #544]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 030c 	and.w	r3, r3, #12
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d00c      	beq.n	80091d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091ba:	4b85      	ldr	r3, [pc, #532]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	d112      	bne.n	80091ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c6:	4b82      	ldr	r3, [pc, #520]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091d2:	d10b      	bne.n	80091ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091d4:	4b7e      	ldr	r3, [pc, #504]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d05b      	beq.n	8009298 <HAL_RCC_OscConfig+0x108>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d157      	bne.n	8009298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e242      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f4:	d106      	bne.n	8009204 <HAL_RCC_OscConfig+0x74>
 80091f6:	4b76      	ldr	r3, [pc, #472]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a75      	ldr	r2, [pc, #468]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80091fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	e01d      	b.n	8009240 <HAL_RCC_OscConfig+0xb0>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800920c:	d10c      	bne.n	8009228 <HAL_RCC_OscConfig+0x98>
 800920e:	4b70      	ldr	r3, [pc, #448]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a6f      	ldr	r2, [pc, #444]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a6c      	ldr	r2, [pc, #432]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	e00b      	b.n	8009240 <HAL_RCC_OscConfig+0xb0>
 8009228:	4b69      	ldr	r3, [pc, #420]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a68      	ldr	r2, [pc, #416]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800922e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	4b66      	ldr	r3, [pc, #408]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a65      	ldr	r2, [pc, #404]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800923a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800923e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d013      	beq.n	8009270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009248:	f7ff fca0 	bl	8008b8c <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009250:	f7ff fc9c 	bl	8008b8c <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b64      	cmp	r3, #100	; 0x64
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e207      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009262:	4b5b      	ldr	r3, [pc, #364]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0f0      	beq.n	8009250 <HAL_RCC_OscConfig+0xc0>
 800926e:	e014      	b.n	800929a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009270:	f7ff fc8c 	bl	8008b8c <HAL_GetTick>
 8009274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009276:	e008      	b.n	800928a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009278:	f7ff fc88 	bl	8008b8c <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	2b64      	cmp	r3, #100	; 0x64
 8009284:	d901      	bls.n	800928a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e1f3      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800928a:	4b51      	ldr	r3, [pc, #324]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1f0      	bne.n	8009278 <HAL_RCC_OscConfig+0xe8>
 8009296:	e000      	b.n	800929a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d063      	beq.n	800936e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092a6:	4b4a      	ldr	r3, [pc, #296]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 030c 	and.w	r3, r3, #12
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092b2:	4b47      	ldr	r3, [pc, #284]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d11c      	bne.n	80092f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092be:	4b44      	ldr	r3, [pc, #272]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d116      	bne.n	80092f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ca:	4b41      	ldr	r3, [pc, #260]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <HAL_RCC_OscConfig+0x152>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d001      	beq.n	80092e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e1c7      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092e2:	4b3b      	ldr	r3, [pc, #236]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4937      	ldr	r1, [pc, #220]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092f6:	e03a      	b.n	800936e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d020      	beq.n	8009342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009300:	4b34      	ldr	r3, [pc, #208]	; (80093d4 <HAL_RCC_OscConfig+0x244>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009306:	f7ff fc41 	bl	8008b8c <HAL_GetTick>
 800930a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800930e:	f7ff fc3d 	bl	8008b8c <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e1a8      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009320:	4b2b      	ldr	r3, [pc, #172]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0f0      	beq.n	800930e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800932c:	4b28      	ldr	r3, [pc, #160]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	4925      	ldr	r1, [pc, #148]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 800933c:	4313      	orrs	r3, r2
 800933e:	600b      	str	r3, [r1, #0]
 8009340:	e015      	b.n	800936e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <HAL_RCC_OscConfig+0x244>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009348:	f7ff fc20 	bl	8008b8c <HAL_GetTick>
 800934c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800934e:	e008      	b.n	8009362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009350:	f7ff fc1c 	bl	8008b8c <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e187      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009362:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f0      	bne.n	8009350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d036      	beq.n	80093e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <HAL_RCC_OscConfig+0x248>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009388:	f7ff fc00 	bl	8008b8c <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009390:	f7ff fbfc 	bl	8008b8c <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e167      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <HAL_RCC_OscConfig+0x240>)
 80093a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x200>
 80093ae:	e01b      	b.n	80093e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <HAL_RCC_OscConfig+0x248>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093b6:	f7ff fbe9 	bl	8008b8c <HAL_GetTick>
 80093ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093bc:	e00e      	b.n	80093dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093be:	f7ff fbe5 	bl	8008b8c <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d907      	bls.n	80093dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e150      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
 80093d0:	40023800 	.word	0x40023800
 80093d4:	42470000 	.word	0x42470000
 80093d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093dc:	4b88      	ldr	r3, [pc, #544]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80093de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1ea      	bne.n	80093be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8097 	beq.w	8009524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093fa:	4b81      	ldr	r3, [pc, #516]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10f      	bne.n	8009426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009406:	2300      	movs	r3, #0
 8009408:	60bb      	str	r3, [r7, #8]
 800940a:	4b7d      	ldr	r3, [pc, #500]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	4a7c      	ldr	r2, [pc, #496]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009414:	6413      	str	r3, [r2, #64]	; 0x40
 8009416:	4b7a      	ldr	r3, [pc, #488]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800941e:	60bb      	str	r3, [r7, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009422:	2301      	movs	r3, #1
 8009424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009426:	4b77      	ldr	r3, [pc, #476]	; (8009604 <HAL_RCC_OscConfig+0x474>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d118      	bne.n	8009464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009432:	4b74      	ldr	r3, [pc, #464]	; (8009604 <HAL_RCC_OscConfig+0x474>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a73      	ldr	r2, [pc, #460]	; (8009604 <HAL_RCC_OscConfig+0x474>)
 8009438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800943e:	f7ff fba5 	bl	8008b8c <HAL_GetTick>
 8009442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009444:	e008      	b.n	8009458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009446:	f7ff fba1 	bl	8008b8c <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e10c      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009458:	4b6a      	ldr	r3, [pc, #424]	; (8009604 <HAL_RCC_OscConfig+0x474>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0f0      	beq.n	8009446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d106      	bne.n	800947a <HAL_RCC_OscConfig+0x2ea>
 800946c:	4b64      	ldr	r3, [pc, #400]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 800946e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009470:	4a63      	ldr	r2, [pc, #396]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	6713      	str	r3, [r2, #112]	; 0x70
 8009478:	e01c      	b.n	80094b4 <HAL_RCC_OscConfig+0x324>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	2b05      	cmp	r3, #5
 8009480:	d10c      	bne.n	800949c <HAL_RCC_OscConfig+0x30c>
 8009482:	4b5f      	ldr	r3, [pc, #380]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009486:	4a5e      	ldr	r2, [pc, #376]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009488:	f043 0304 	orr.w	r3, r3, #4
 800948c:	6713      	str	r3, [r2, #112]	; 0x70
 800948e:	4b5c      	ldr	r3, [pc, #368]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009492:	4a5b      	ldr	r2, [pc, #364]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009494:	f043 0301 	orr.w	r3, r3, #1
 8009498:	6713      	str	r3, [r2, #112]	; 0x70
 800949a:	e00b      	b.n	80094b4 <HAL_RCC_OscConfig+0x324>
 800949c:	4b58      	ldr	r3, [pc, #352]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 800949e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a0:	4a57      	ldr	r2, [pc, #348]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	6713      	str	r3, [r2, #112]	; 0x70
 80094a8:	4b55      	ldr	r3, [pc, #340]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80094aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ac:	4a54      	ldr	r2, [pc, #336]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80094ae:	f023 0304 	bic.w	r3, r3, #4
 80094b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d015      	beq.n	80094e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094bc:	f7ff fb66 	bl	8008b8c <HAL_GetTick>
 80094c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c2:	e00a      	b.n	80094da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094c4:	f7ff fb62 	bl	8008b8c <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e0cb      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094da:	4b49      	ldr	r3, [pc, #292]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0ee      	beq.n	80094c4 <HAL_RCC_OscConfig+0x334>
 80094e6:	e014      	b.n	8009512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094e8:	f7ff fb50 	bl	8008b8c <HAL_GetTick>
 80094ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094ee:	e00a      	b.n	8009506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094f0:	f7ff fb4c 	bl	8008b8c <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fe:	4293      	cmp	r3, r2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e0b5      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009506:	4b3e      	ldr	r3, [pc, #248]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1ee      	bne.n	80094f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d105      	bne.n	8009524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009518:	4b39      	ldr	r3, [pc, #228]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	4a38      	ldr	r2, [pc, #224]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 800951e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80a1 	beq.w	8009670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800952e:	4b34      	ldr	r3, [pc, #208]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f003 030c 	and.w	r3, r3, #12
 8009536:	2b08      	cmp	r3, #8
 8009538:	d05c      	beq.n	80095f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d141      	bne.n	80095c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009542:	4b31      	ldr	r3, [pc, #196]	; (8009608 <HAL_RCC_OscConfig+0x478>)
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009548:	f7ff fb20 	bl	8008b8c <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009550:	f7ff fb1c 	bl	8008b8c <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e087      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009562:	4b27      	ldr	r3, [pc, #156]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f0      	bne.n	8009550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69da      	ldr	r2, [r3, #28]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	019b      	lsls	r3, r3, #6
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009584:	085b      	lsrs	r3, r3, #1
 8009586:	3b01      	subs	r3, #1
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	061b      	lsls	r3, r3, #24
 8009592:	491b      	ldr	r1, [pc, #108]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 8009594:	4313      	orrs	r3, r2
 8009596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <HAL_RCC_OscConfig+0x478>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800959e:	f7ff faf5 	bl	8008b8c <HAL_GetTick>
 80095a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a4:	e008      	b.n	80095b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a6:	f7ff faf1 	bl	8008b8c <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e05c      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095b8:	4b11      	ldr	r3, [pc, #68]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0f0      	beq.n	80095a6 <HAL_RCC_OscConfig+0x416>
 80095c4:	e054      	b.n	8009670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095c6:	4b10      	ldr	r3, [pc, #64]	; (8009608 <HAL_RCC_OscConfig+0x478>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095cc:	f7ff fade 	bl	8008b8c <HAL_GetTick>
 80095d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d2:	e008      	b.n	80095e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095d4:	f7ff fada 	bl	8008b8c <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d901      	bls.n	80095e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e045      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_RCC_OscConfig+0x470>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f0      	bne.n	80095d4 <HAL_RCC_OscConfig+0x444>
 80095f2:	e03d      	b.n	8009670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d107      	bne.n	800960c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e038      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
 8009600:	40023800 	.word	0x40023800
 8009604:	40007000 	.word	0x40007000
 8009608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <HAL_RCC_OscConfig+0x4ec>)
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d028      	beq.n	800966c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009624:	429a      	cmp	r2, r3
 8009626:	d121      	bne.n	800966c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009632:	429a      	cmp	r2, r3
 8009634:	d11a      	bne.n	800966c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800963c:	4013      	ands	r3, r2
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009644:	4293      	cmp	r3, r2
 8009646:	d111      	bne.n	800966c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	3b01      	subs	r3, #1
 8009656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009658:	429a      	cmp	r2, r3
 800965a:	d107      	bne.n	800966c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009668:	429a      	cmp	r2, r3
 800966a:	d001      	beq.n	8009670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	40023800 	.word	0x40023800

08009680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0cc      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009694:	4b68      	ldr	r3, [pc, #416]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d90c      	bls.n	80096bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096a2:	4b65      	ldr	r3, [pc, #404]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096aa:	4b63      	ldr	r3, [pc, #396]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d001      	beq.n	80096bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0b8      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d020      	beq.n	800970a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096d4:	4b59      	ldr	r3, [pc, #356]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	4a58      	ldr	r2, [pc, #352]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096ec:	4b53      	ldr	r3, [pc, #332]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	4a52      	ldr	r2, [pc, #328]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80096f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096f8:	4b50      	ldr	r3, [pc, #320]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	494d      	ldr	r1, [pc, #308]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009706:	4313      	orrs	r3, r2
 8009708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d044      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d107      	bne.n	800972e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800971e:	4b47      	ldr	r3, [pc, #284]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d119      	bne.n	800975e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e07f      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d003      	beq.n	800973e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800973a:	2b03      	cmp	r3, #3
 800973c:	d107      	bne.n	800974e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800973e:	4b3f      	ldr	r3, [pc, #252]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d109      	bne.n	800975e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e06f      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800974e:	4b3b      	ldr	r3, [pc, #236]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e067      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800975e:	4b37      	ldr	r3, [pc, #220]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f023 0203 	bic.w	r2, r3, #3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	4934      	ldr	r1, [pc, #208]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 800976c:	4313      	orrs	r3, r2
 800976e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009770:	f7ff fa0c 	bl	8008b8c <HAL_GetTick>
 8009774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009776:	e00a      	b.n	800978e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009778:	f7ff fa08 	bl	8008b8c <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	f241 3288 	movw	r2, #5000	; 0x1388
 8009786:	4293      	cmp	r3, r2
 8009788:	d901      	bls.n	800978e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e04f      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800978e:	4b2b      	ldr	r3, [pc, #172]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 020c 	and.w	r2, r3, #12
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	429a      	cmp	r2, r3
 800979e:	d1eb      	bne.n	8009778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097a0:	4b25      	ldr	r3, [pc, #148]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d20c      	bcs.n	80097c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ae:	4b22      	ldr	r3, [pc, #136]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097b6:	4b20      	ldr	r3, [pc, #128]	; (8009838 <HAL_RCC_ClockConfig+0x1b8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d001      	beq.n	80097c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e032      	b.n	800982e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d008      	beq.n	80097e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097d4:	4b19      	ldr	r3, [pc, #100]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	4916      	ldr	r1, [pc, #88]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097f2:	4b12      	ldr	r3, [pc, #72]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	490e      	ldr	r1, [pc, #56]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 8009802:	4313      	orrs	r3, r2
 8009804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009806:	f000 f821 	bl	800984c <HAL_RCC_GetSysClockFreq>
 800980a:	4602      	mov	r2, r0
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <HAL_RCC_ClockConfig+0x1bc>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	091b      	lsrs	r3, r3, #4
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	490a      	ldr	r1, [pc, #40]	; (8009840 <HAL_RCC_ClockConfig+0x1c0>)
 8009818:	5ccb      	ldrb	r3, [r1, r3]
 800981a:	fa22 f303 	lsr.w	r3, r2, r3
 800981e:	4a09      	ldr	r2, [pc, #36]	; (8009844 <HAL_RCC_ClockConfig+0x1c4>)
 8009820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <HAL_RCC_ClockConfig+0x1c8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff f96c 	bl	8008b04 <HAL_InitTick>

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40023c00 	.word	0x40023c00
 800983c:	40023800 	.word	0x40023800
 8009840:	0800ab28 	.word	0x0800ab28
 8009844:	20000000 	.word	0x20000000
 8009848:	20000004 	.word	0x20000004

0800984c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800984c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009850:	b090      	sub	sp, #64	; 0x40
 8009852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	637b      	str	r3, [r7, #52]	; 0x34
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800985c:	2300      	movs	r3, #0
 800985e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009864:	4b59      	ldr	r3, [pc, #356]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 030c 	and.w	r3, r3, #12
 800986c:	2b08      	cmp	r3, #8
 800986e:	d00d      	beq.n	800988c <HAL_RCC_GetSysClockFreq+0x40>
 8009870:	2b08      	cmp	r3, #8
 8009872:	f200 80a1 	bhi.w	80099b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0x34>
 800987a:	2b04      	cmp	r3, #4
 800987c:	d003      	beq.n	8009886 <HAL_RCC_GetSysClockFreq+0x3a>
 800987e:	e09b      	b.n	80099b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009880:	4b53      	ldr	r3, [pc, #332]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009882:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009884:	e09b      	b.n	80099be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009886:	4b53      	ldr	r3, [pc, #332]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009888:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800988a:	e098      	b.n	80099be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800988c:	4b4f      	ldr	r3, [pc, #316]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009896:	4b4d      	ldr	r3, [pc, #308]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d028      	beq.n	80098f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098a2:	4b4a      	ldr	r3, [pc, #296]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	099b      	lsrs	r3, r3, #6
 80098a8:	2200      	movs	r2, #0
 80098aa:	623b      	str	r3, [r7, #32]
 80098ac:	627a      	str	r2, [r7, #36]	; 0x24
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80098b4:	2100      	movs	r1, #0
 80098b6:	4b47      	ldr	r3, [pc, #284]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80098b8:	fb03 f201 	mul.w	r2, r3, r1
 80098bc:	2300      	movs	r3, #0
 80098be:	fb00 f303 	mul.w	r3, r0, r3
 80098c2:	4413      	add	r3, r2
 80098c4:	4a43      	ldr	r2, [pc, #268]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80098c6:	fba0 1202 	umull	r1, r2, r0, r2
 80098ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098cc:	460a      	mov	r2, r1
 80098ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80098d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098d2:	4413      	add	r3, r2
 80098d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d8:	2200      	movs	r2, #0
 80098da:	61bb      	str	r3, [r7, #24]
 80098dc:	61fa      	str	r2, [r7, #28]
 80098de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80098e6:	f7fe fccb 	bl	8008280 <__aeabi_uldivmod>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4613      	mov	r3, r2
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f2:	e053      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098f4:	4b35      	ldr	r3, [pc, #212]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	099b      	lsrs	r3, r3, #6
 80098fa:	2200      	movs	r2, #0
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	617a      	str	r2, [r7, #20]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009906:	f04f 0b00 	mov.w	fp, #0
 800990a:	4652      	mov	r2, sl
 800990c:	465b      	mov	r3, fp
 800990e:	f04f 0000 	mov.w	r0, #0
 8009912:	f04f 0100 	mov.w	r1, #0
 8009916:	0159      	lsls	r1, r3, #5
 8009918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800991c:	0150      	lsls	r0, r2, #5
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	ebb2 080a 	subs.w	r8, r2, sl
 8009926:	eb63 090b 	sbc.w	r9, r3, fp
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800993a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800993e:	ebb2 0408 	subs.w	r4, r2, r8
 8009942:	eb63 0509 	sbc.w	r5, r3, r9
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	00eb      	lsls	r3, r5, #3
 8009950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009954:	00e2      	lsls	r2, r4, #3
 8009956:	4614      	mov	r4, r2
 8009958:	461d      	mov	r5, r3
 800995a:	eb14 030a 	adds.w	r3, r4, sl
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	eb45 030b 	adc.w	r3, r5, fp
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	f04f 0300 	mov.w	r3, #0
 800996e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009972:	4629      	mov	r1, r5
 8009974:	028b      	lsls	r3, r1, #10
 8009976:	4621      	mov	r1, r4
 8009978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800997c:	4621      	mov	r1, r4
 800997e:	028a      	lsls	r2, r1, #10
 8009980:	4610      	mov	r0, r2
 8009982:	4619      	mov	r1, r3
 8009984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009986:	2200      	movs	r2, #0
 8009988:	60bb      	str	r3, [r7, #8]
 800998a:	60fa      	str	r2, [r7, #12]
 800998c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009990:	f7fe fc76 	bl	8008280 <__aeabi_uldivmod>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4613      	mov	r3, r2
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <HAL_RCC_GetSysClockFreq+0x180>)
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	0c1b      	lsrs	r3, r3, #16
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	3301      	adds	r3, #1
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80099ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80099b6:	e002      	b.n	80099be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80099ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80099bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3740      	adds	r7, #64	; 0x40
 80099c4:	46bd      	mov	sp, r7
 80099c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ca:	bf00      	nop
 80099cc:	40023800 	.word	0x40023800
 80099d0:	00f42400 	.word	0x00f42400
 80099d4:	017d7840 	.word	0x017d7840

080099d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099dc:	4b03      	ldr	r3, [pc, #12]	; (80099ec <HAL_RCC_GetHCLKFreq+0x14>)
 80099de:	681b      	ldr	r3, [r3, #0]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20000000 	.word	0x20000000

080099f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80099f4:	f7ff fff0 	bl	80099d8 <HAL_RCC_GetHCLKFreq>
 80099f8:	4602      	mov	r2, r0
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	0a9b      	lsrs	r3, r3, #10
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	4903      	ldr	r1, [pc, #12]	; (8009a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a06:	5ccb      	ldrb	r3, [r1, r3]
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	40023800 	.word	0x40023800
 8009a14:	0800ab38 	.word	0x0800ab38

08009a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a1c:	f7ff ffdc 	bl	80099d8 <HAL_RCC_GetHCLKFreq>
 8009a20:	4602      	mov	r2, r0
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	0b5b      	lsrs	r3, r3, #13
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	4903      	ldr	r1, [pc, #12]	; (8009a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a2e:	5ccb      	ldrb	r3, [r1, r3]
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	0800ab38 	.word	0x0800ab38

08009a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e03f      	b.n	8009ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7fe ff42 	bl	80088f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2224      	movs	r2, #36	; 0x24
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f929 	bl	8009cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695a      	ldr	r2, [r3, #20]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b08a      	sub	sp, #40	; 0x28
 8009ade:	af02      	add	r7, sp, #8
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d17c      	bne.n	8009bf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <HAL_UART_Transmit+0x2c>
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e075      	b.n	8009bf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_UART_Transmit+0x3e>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e06e      	b.n	8009bf6 <HAL_UART_Transmit+0x11c>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2221      	movs	r2, #33	; 0x21
 8009b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b2e:	f7ff f82d 	bl	8008b8c <HAL_GetTick>
 8009b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	88fa      	ldrh	r2, [r7, #6]
 8009b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b48:	d108      	bne.n	8009b5c <HAL_UART_Transmit+0x82>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d104      	bne.n	8009b5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	e003      	b.n	8009b64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009b6c:	e02a      	b.n	8009bc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2200      	movs	r2, #0
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f840 	bl	8009bfe <UART_WaitOnFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e036      	b.n	8009bf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	61bb      	str	r3, [r7, #24]
 8009ba4:	e007      	b.n	8009bb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1cf      	bne.n	8009b6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2140      	movs	r1, #64	; 0x40
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f810 	bl	8009bfe <UART_WaitOnFlagUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e006      	b.n	8009bf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e000      	b.n	8009bf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009bf4:	2302      	movs	r3, #2
  }
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b090      	sub	sp, #64	; 0x40
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c0e:	e050      	b.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d04c      	beq.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8009c1e:	f7fe ffb5 	bl	8008b8c <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d241      	bcs.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	330c      	adds	r3, #12
 8009c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c4e:	637a      	str	r2, [r7, #52]	; 0x34
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e5      	bne.n	8009c2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3314      	adds	r3, #20
 8009c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	613b      	str	r3, [r7, #16]
   return(result);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f023 0301 	bic.w	r3, r3, #1
 8009c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3314      	adds	r3, #20
 8009c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c82:	623a      	str	r2, [r7, #32]
 8009c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	69f9      	ldr	r1, [r7, #28]
 8009c88:	6a3a      	ldr	r2, [r7, #32]
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e5      	bne.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e00f      	b.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	bf0c      	ite	eq
 8009cc2:	2301      	moveq	r3, #1
 8009cc4:	2300      	movne	r3, #0
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d09f      	beq.n	8009c10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3740      	adds	r7, #64	; 0x40
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ce0:	b0c0      	sub	sp, #256	; 0x100
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf8:	68d9      	ldr	r1, [r3, #12]
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	ea40 0301 	orr.w	r3, r0, r1
 8009d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d34:	f021 010c 	bic.w	r1, r1, #12
 8009d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d42:	430b      	orrs	r3, r1
 8009d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d56:	6999      	ldr	r1, [r3, #24]
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	ea40 0301 	orr.w	r3, r0, r1
 8009d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b8f      	ldr	r3, [pc, #572]	; (8009fa8 <UART_SetConfig+0x2cc>)
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d005      	beq.n	8009d7c <UART_SetConfig+0xa0>
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b8d      	ldr	r3, [pc, #564]	; (8009fac <UART_SetConfig+0x2d0>)
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d104      	bne.n	8009d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d7c:	f7ff fe4c 	bl	8009a18 <HAL_RCC_GetPCLK2Freq>
 8009d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d84:	e003      	b.n	8009d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d86:	f7ff fe33 	bl	80099f0 <HAL_RCC_GetPCLK1Freq>
 8009d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d98:	f040 810c 	bne.w	8009fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	1891      	adds	r1, r2, r2
 8009db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009db6:	415b      	adcs	r3, r3
 8009db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	eb12 0801 	adds.w	r8, r2, r1
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	eb43 0901 	adc.w	r9, r3, r1
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dde:	4690      	mov	r8, r2
 8009de0:	4699      	mov	r9, r3
 8009de2:	4623      	mov	r3, r4
 8009de4:	eb18 0303 	adds.w	r3, r8, r3
 8009de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dec:	462b      	mov	r3, r5
 8009dee:	eb49 0303 	adc.w	r3, r9, r3
 8009df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	18db      	adds	r3, r3, r3
 8009e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e10:	4613      	mov	r3, r2
 8009e12:	eb42 0303 	adc.w	r3, r2, r3
 8009e16:	657b      	str	r3, [r7, #84]	; 0x54
 8009e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e20:	f7fe fa2e 	bl	8008280 <__aeabi_uldivmod>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4b61      	ldr	r3, [pc, #388]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	011c      	lsls	r4, r3, #4
 8009e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e54:	4641      	mov	r1, r8
 8009e56:	eb12 0a01 	adds.w	sl, r2, r1
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e74:	4692      	mov	sl, r2
 8009e76:	469b      	mov	fp, r3
 8009e78:	4643      	mov	r3, r8
 8009e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e82:	464b      	mov	r3, r9
 8009e84:	eb4b 0303 	adc.w	r3, fp, r3
 8009e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	18db      	adds	r3, r3, r3
 8009ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	eb42 0303 	adc.w	r3, r2, r3
 8009eac:	647b      	str	r3, [r7, #68]	; 0x44
 8009eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009eb6:	f7fe f9e3 	bl	8008280 <__aeabi_uldivmod>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4b3b      	ldr	r3, [pc, #236]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	2264      	movs	r2, #100	; 0x64
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	1acb      	subs	r3, r1, r3
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ed6:	4b36      	ldr	r3, [pc, #216]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ee4:	441c      	add	r4, r3
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f00:	415b      	adcs	r3, r3
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f08:	4641      	mov	r1, r8
 8009f0a:	1851      	adds	r1, r2, r1
 8009f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f0e:	4649      	mov	r1, r9
 8009f10:	414b      	adcs	r3, r1
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f20:	4659      	mov	r1, fp
 8009f22:	00cb      	lsls	r3, r1, #3
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	00ca      	lsls	r2, r1, #3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4642      	mov	r2, r8
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	460a      	mov	r2, r1
 8009f40:	eb42 0303 	adc.w	r3, r2, r3
 8009f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	18db      	adds	r3, r3, r3
 8009f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f62:	4613      	mov	r3, r2
 8009f64:	eb42 0303 	adc.w	r3, r2, r3
 8009f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f72:	f7fe f985 	bl	8008280 <__aeabi_uldivmod>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	2164      	movs	r1, #100	; 0x64
 8009f84:	fb01 f303 	mul.w	r3, r1, r3
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	3332      	adds	r3, #50	; 0x32
 8009f8e:	4a08      	ldr	r2, [pc, #32]	; (8009fb0 <UART_SetConfig+0x2d4>)
 8009f90:	fba2 2303 	umull	r2, r3, r2, r3
 8009f94:	095b      	lsrs	r3, r3, #5
 8009f96:	f003 0207 	and.w	r2, r3, #7
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4422      	add	r2, r4
 8009fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fa4:	e105      	b.n	800a1b2 <UART_SetConfig+0x4d6>
 8009fa6:	bf00      	nop
 8009fa8:	40011000 	.word	0x40011000
 8009fac:	40011400 	.word	0x40011400
 8009fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	464b      	mov	r3, r9
 8009fca:	1891      	adds	r1, r2, r2
 8009fcc:	6239      	str	r1, [r7, #32]
 8009fce:	415b      	adcs	r3, r3
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	1854      	adds	r4, r2, r1
 8009fda:	4649      	mov	r1, r9
 8009fdc:	eb43 0501 	adc.w	r5, r3, r1
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	00eb      	lsls	r3, r5, #3
 8009fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fee:	00e2      	lsls	r2, r4, #3
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	461d      	mov	r5, r3
 8009ff4:	4643      	mov	r3, r8
 8009ff6:	18e3      	adds	r3, r4, r3
 8009ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	eb45 0303 	adc.w	r3, r5, r3
 800a002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a022:	4629      	mov	r1, r5
 800a024:	008b      	lsls	r3, r1, #2
 800a026:	4621      	mov	r1, r4
 800a028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a02c:	4621      	mov	r1, r4
 800a02e:	008a      	lsls	r2, r1, #2
 800a030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a034:	f7fe f924 	bl	8008280 <__aeabi_uldivmod>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4b60      	ldr	r3, [pc, #384]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a03e:	fba3 2302 	umull	r2, r3, r3, r2
 800a042:	095b      	lsrs	r3, r3, #5
 800a044:	011c      	lsls	r4, r3, #4
 800a046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	1891      	adds	r1, r2, r2
 800a05e:	61b9      	str	r1, [r7, #24]
 800a060:	415b      	adcs	r3, r3
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a068:	4641      	mov	r1, r8
 800a06a:	1851      	adds	r1, r2, r1
 800a06c:	6139      	str	r1, [r7, #16]
 800a06e:	4649      	mov	r1, r9
 800a070:	414b      	adcs	r3, r1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a080:	4659      	mov	r1, fp
 800a082:	00cb      	lsls	r3, r1, #3
 800a084:	4651      	mov	r1, sl
 800a086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a08a:	4651      	mov	r1, sl
 800a08c:	00ca      	lsls	r2, r1, #3
 800a08e:	4610      	mov	r0, r2
 800a090:	4619      	mov	r1, r3
 800a092:	4603      	mov	r3, r0
 800a094:	4642      	mov	r2, r8
 800a096:	189b      	adds	r3, r3, r2
 800a098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a09c:	464b      	mov	r3, r9
 800a09e:	460a      	mov	r2, r1
 800a0a0:	eb42 0303 	adc.w	r3, r2, r3
 800a0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	008b      	lsls	r3, r1, #2
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	008a      	lsls	r2, r1, #2
 800a0ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0d2:	f7fe f8d5 	bl	8008280 <__aeabi_uldivmod>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4b39      	ldr	r3, [pc, #228]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	2164      	movs	r1, #100	; 0x64
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	3332      	adds	r3, #50	; 0x32
 800a0ee:	4a34      	ldr	r2, [pc, #208]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fa:	441c      	add	r4, r3
 800a0fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a100:	2200      	movs	r2, #0
 800a102:	673b      	str	r3, [r7, #112]	; 0x70
 800a104:	677a      	str	r2, [r7, #116]	; 0x74
 800a106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a10a:	4642      	mov	r2, r8
 800a10c:	464b      	mov	r3, r9
 800a10e:	1891      	adds	r1, r2, r2
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	415b      	adcs	r3, r3
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a11a:	4641      	mov	r1, r8
 800a11c:	1851      	adds	r1, r2, r1
 800a11e:	6039      	str	r1, [r7, #0]
 800a120:	4649      	mov	r1, r9
 800a122:	414b      	adcs	r3, r1
 800a124:	607b      	str	r3, [r7, #4]
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	f04f 0300 	mov.w	r3, #0
 800a12e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a132:	4659      	mov	r1, fp
 800a134:	00cb      	lsls	r3, r1, #3
 800a136:	4651      	mov	r1, sl
 800a138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a13c:	4651      	mov	r1, sl
 800a13e:	00ca      	lsls	r2, r1, #3
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	4603      	mov	r3, r0
 800a146:	4642      	mov	r2, r8
 800a148:	189b      	adds	r3, r3, r2
 800a14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a14c:	464b      	mov	r3, r9
 800a14e:	460a      	mov	r2, r1
 800a150:	eb42 0303 	adc.w	r3, r2, r3
 800a154:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	663b      	str	r3, [r7, #96]	; 0x60
 800a160:	667a      	str	r2, [r7, #100]	; 0x64
 800a162:	f04f 0200 	mov.w	r2, #0
 800a166:	f04f 0300 	mov.w	r3, #0
 800a16a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a16e:	4649      	mov	r1, r9
 800a170:	008b      	lsls	r3, r1, #2
 800a172:	4641      	mov	r1, r8
 800a174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a178:	4641      	mov	r1, r8
 800a17a:	008a      	lsls	r2, r1, #2
 800a17c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a180:	f7fe f87e 	bl	8008280 <__aeabi_uldivmod>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a18a:	fba3 1302 	umull	r1, r3, r3, r2
 800a18e:	095b      	lsrs	r3, r3, #5
 800a190:	2164      	movs	r1, #100	; 0x64
 800a192:	fb01 f303 	mul.w	r3, r1, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	011b      	lsls	r3, r3, #4
 800a19a:	3332      	adds	r3, #50	; 0x32
 800a19c:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <UART_SetConfig+0x4e4>)
 800a19e:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	f003 020f 	and.w	r2, r3, #15
 800a1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4422      	add	r2, r4
 800a1b0:	609a      	str	r2, [r3, #8]
}
 800a1b2:	bf00      	nop
 800a1b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1be:	bf00      	nop
 800a1c0:	51eb851f 	.word	0x51eb851f

0800a1c4 <__errno>:
 800a1c4:	4b01      	ldr	r3, [pc, #4]	; (800a1cc <__errno+0x8>)
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	2000000c 	.word	0x2000000c

0800a1d0 <__libc_init_array>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	4d0d      	ldr	r5, [pc, #52]	; (800a208 <__libc_init_array+0x38>)
 800a1d4:	4c0d      	ldr	r4, [pc, #52]	; (800a20c <__libc_init_array+0x3c>)
 800a1d6:	1b64      	subs	r4, r4, r5
 800a1d8:	10a4      	asrs	r4, r4, #2
 800a1da:	2600      	movs	r6, #0
 800a1dc:	42a6      	cmp	r6, r4
 800a1de:	d109      	bne.n	800a1f4 <__libc_init_array+0x24>
 800a1e0:	4d0b      	ldr	r5, [pc, #44]	; (800a210 <__libc_init_array+0x40>)
 800a1e2:	4c0c      	ldr	r4, [pc, #48]	; (800a214 <__libc_init_array+0x44>)
 800a1e4:	f000 fc8e 	bl	800ab04 <_init>
 800a1e8:	1b64      	subs	r4, r4, r5
 800a1ea:	10a4      	asrs	r4, r4, #2
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	42a6      	cmp	r6, r4
 800a1f0:	d105      	bne.n	800a1fe <__libc_init_array+0x2e>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f8:	4798      	blx	r3
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	e7ee      	b.n	800a1dc <__libc_init_array+0xc>
 800a1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a202:	4798      	blx	r3
 800a204:	3601      	adds	r6, #1
 800a206:	e7f2      	b.n	800a1ee <__libc_init_array+0x1e>
 800a208:	0800ab7c 	.word	0x0800ab7c
 800a20c:	0800ab7c 	.word	0x0800ab7c
 800a210:	0800ab7c 	.word	0x0800ab7c
 800a214:	0800ab80 	.word	0x0800ab80

0800a218 <memset>:
 800a218:	4402      	add	r2, r0
 800a21a:	4603      	mov	r3, r0
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d100      	bne.n	800a222 <memset+0xa>
 800a220:	4770      	bx	lr
 800a222:	f803 1b01 	strb.w	r1, [r3], #1
 800a226:	e7f9      	b.n	800a21c <memset+0x4>

0800a228 <_vsiprintf_r>:
 800a228:	b500      	push	{lr}
 800a22a:	b09b      	sub	sp, #108	; 0x6c
 800a22c:	9100      	str	r1, [sp, #0]
 800a22e:	9104      	str	r1, [sp, #16]
 800a230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a234:	9105      	str	r1, [sp, #20]
 800a236:	9102      	str	r1, [sp, #8]
 800a238:	4905      	ldr	r1, [pc, #20]	; (800a250 <_vsiprintf_r+0x28>)
 800a23a:	9103      	str	r1, [sp, #12]
 800a23c:	4669      	mov	r1, sp
 800a23e:	f000 f86f 	bl	800a320 <_svfiprintf_r>
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	2200      	movs	r2, #0
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	b01b      	add	sp, #108	; 0x6c
 800a24a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a24e:	bf00      	nop
 800a250:	ffff0208 	.word	0xffff0208

0800a254 <vsiprintf>:
 800a254:	4613      	mov	r3, r2
 800a256:	460a      	mov	r2, r1
 800a258:	4601      	mov	r1, r0
 800a25a:	4802      	ldr	r0, [pc, #8]	; (800a264 <vsiprintf+0x10>)
 800a25c:	6800      	ldr	r0, [r0, #0]
 800a25e:	f7ff bfe3 	b.w	800a228 <_vsiprintf_r>
 800a262:	bf00      	nop
 800a264:	2000000c 	.word	0x2000000c

0800a268 <__ssputs_r>:
 800a268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a26c:	688e      	ldr	r6, [r1, #8]
 800a26e:	429e      	cmp	r6, r3
 800a270:	4682      	mov	sl, r0
 800a272:	460c      	mov	r4, r1
 800a274:	4690      	mov	r8, r2
 800a276:	461f      	mov	r7, r3
 800a278:	d838      	bhi.n	800a2ec <__ssputs_r+0x84>
 800a27a:	898a      	ldrh	r2, [r1, #12]
 800a27c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a280:	d032      	beq.n	800a2e8 <__ssputs_r+0x80>
 800a282:	6825      	ldr	r5, [r4, #0]
 800a284:	6909      	ldr	r1, [r1, #16]
 800a286:	eba5 0901 	sub.w	r9, r5, r1
 800a28a:	6965      	ldr	r5, [r4, #20]
 800a28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a294:	3301      	adds	r3, #1
 800a296:	444b      	add	r3, r9
 800a298:	106d      	asrs	r5, r5, #1
 800a29a:	429d      	cmp	r5, r3
 800a29c:	bf38      	it	cc
 800a29e:	461d      	movcc	r5, r3
 800a2a0:	0553      	lsls	r3, r2, #21
 800a2a2:	d531      	bpl.n	800a308 <__ssputs_r+0xa0>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f000 fb63 	bl	800a970 <_malloc_r>
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	b950      	cbnz	r0, 800a2c4 <__ssputs_r+0x5c>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	f8ca 3000 	str.w	r3, [sl]
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c4:	6921      	ldr	r1, [r4, #16]
 800a2c6:	464a      	mov	r2, r9
 800a2c8:	f000 fabe 	bl	800a848 <memcpy>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	6126      	str	r6, [r4, #16]
 800a2da:	6165      	str	r5, [r4, #20]
 800a2dc:	444e      	add	r6, r9
 800a2de:	eba5 0509 	sub.w	r5, r5, r9
 800a2e2:	6026      	str	r6, [r4, #0]
 800a2e4:	60a5      	str	r5, [r4, #8]
 800a2e6:	463e      	mov	r6, r7
 800a2e8:	42be      	cmp	r6, r7
 800a2ea:	d900      	bls.n	800a2ee <__ssputs_r+0x86>
 800a2ec:	463e      	mov	r6, r7
 800a2ee:	6820      	ldr	r0, [r4, #0]
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	f000 fab6 	bl	800a864 <memmove>
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	1b9b      	subs	r3, r3, r6
 800a2fc:	60a3      	str	r3, [r4, #8]
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	4433      	add	r3, r6
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	2000      	movs	r0, #0
 800a306:	e7db      	b.n	800a2c0 <__ssputs_r+0x58>
 800a308:	462a      	mov	r2, r5
 800a30a:	f000 fba5 	bl	800aa58 <_realloc_r>
 800a30e:	4606      	mov	r6, r0
 800a310:	2800      	cmp	r0, #0
 800a312:	d1e1      	bne.n	800a2d8 <__ssputs_r+0x70>
 800a314:	6921      	ldr	r1, [r4, #16]
 800a316:	4650      	mov	r0, sl
 800a318:	f000 fabe 	bl	800a898 <_free_r>
 800a31c:	e7c7      	b.n	800a2ae <__ssputs_r+0x46>
	...

0800a320 <_svfiprintf_r>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	4698      	mov	r8, r3
 800a326:	898b      	ldrh	r3, [r1, #12]
 800a328:	061b      	lsls	r3, r3, #24
 800a32a:	b09d      	sub	sp, #116	; 0x74
 800a32c:	4607      	mov	r7, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	4614      	mov	r4, r2
 800a332:	d50e      	bpl.n	800a352 <_svfiprintf_r+0x32>
 800a334:	690b      	ldr	r3, [r1, #16]
 800a336:	b963      	cbnz	r3, 800a352 <_svfiprintf_r+0x32>
 800a338:	2140      	movs	r1, #64	; 0x40
 800a33a:	f000 fb19 	bl	800a970 <_malloc_r>
 800a33e:	6028      	str	r0, [r5, #0]
 800a340:	6128      	str	r0, [r5, #16]
 800a342:	b920      	cbnz	r0, 800a34e <_svfiprintf_r+0x2e>
 800a344:	230c      	movs	r3, #12
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	e0d1      	b.n	800a4f2 <_svfiprintf_r+0x1d2>
 800a34e:	2340      	movs	r3, #64	; 0x40
 800a350:	616b      	str	r3, [r5, #20]
 800a352:	2300      	movs	r3, #0
 800a354:	9309      	str	r3, [sp, #36]	; 0x24
 800a356:	2320      	movs	r3, #32
 800a358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a360:	2330      	movs	r3, #48	; 0x30
 800a362:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a50c <_svfiprintf_r+0x1ec>
 800a366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a36a:	f04f 0901 	mov.w	r9, #1
 800a36e:	4623      	mov	r3, r4
 800a370:	469a      	mov	sl, r3
 800a372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a376:	b10a      	cbz	r2, 800a37c <_svfiprintf_r+0x5c>
 800a378:	2a25      	cmp	r2, #37	; 0x25
 800a37a:	d1f9      	bne.n	800a370 <_svfiprintf_r+0x50>
 800a37c:	ebba 0b04 	subs.w	fp, sl, r4
 800a380:	d00b      	beq.n	800a39a <_svfiprintf_r+0x7a>
 800a382:	465b      	mov	r3, fp
 800a384:	4622      	mov	r2, r4
 800a386:	4629      	mov	r1, r5
 800a388:	4638      	mov	r0, r7
 800a38a:	f7ff ff6d 	bl	800a268 <__ssputs_r>
 800a38e:	3001      	adds	r0, #1
 800a390:	f000 80aa 	beq.w	800a4e8 <_svfiprintf_r+0x1c8>
 800a394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a396:	445a      	add	r2, fp
 800a398:	9209      	str	r2, [sp, #36]	; 0x24
 800a39a:	f89a 3000 	ldrb.w	r3, [sl]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80a2 	beq.w	800a4e8 <_svfiprintf_r+0x1c8>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ae:	f10a 0a01 	add.w	sl, sl, #1
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	9307      	str	r3, [sp, #28]
 800a3b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a3bc:	4654      	mov	r4, sl
 800a3be:	2205      	movs	r2, #5
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	4851      	ldr	r0, [pc, #324]	; (800a50c <_svfiprintf_r+0x1ec>)
 800a3c6:	f7fd ff0b 	bl	80081e0 <memchr>
 800a3ca:	9a04      	ldr	r2, [sp, #16]
 800a3cc:	b9d8      	cbnz	r0, 800a406 <_svfiprintf_r+0xe6>
 800a3ce:	06d0      	lsls	r0, r2, #27
 800a3d0:	bf44      	itt	mi
 800a3d2:	2320      	movmi	r3, #32
 800a3d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d8:	0711      	lsls	r1, r2, #28
 800a3da:	bf44      	itt	mi
 800a3dc:	232b      	movmi	r3, #43	; 0x2b
 800a3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e8:	d015      	beq.n	800a416 <_svfiprintf_r+0xf6>
 800a3ea:	9a07      	ldr	r2, [sp, #28]
 800a3ec:	4654      	mov	r4, sl
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f04f 0c0a 	mov.w	ip, #10
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3fa:	3b30      	subs	r3, #48	; 0x30
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d94e      	bls.n	800a49e <_svfiprintf_r+0x17e>
 800a400:	b1b0      	cbz	r0, 800a430 <_svfiprintf_r+0x110>
 800a402:	9207      	str	r2, [sp, #28]
 800a404:	e014      	b.n	800a430 <_svfiprintf_r+0x110>
 800a406:	eba0 0308 	sub.w	r3, r0, r8
 800a40a:	fa09 f303 	lsl.w	r3, r9, r3
 800a40e:	4313      	orrs	r3, r2
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	46a2      	mov	sl, r4
 800a414:	e7d2      	b.n	800a3bc <_svfiprintf_r+0x9c>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	1d19      	adds	r1, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9103      	str	r1, [sp, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfbb      	ittet	lt
 800a422:	425b      	neglt	r3, r3
 800a424:	f042 0202 	orrlt.w	r2, r2, #2
 800a428:	9307      	strge	r3, [sp, #28]
 800a42a:	9307      	strlt	r3, [sp, #28]
 800a42c:	bfb8      	it	lt
 800a42e:	9204      	strlt	r2, [sp, #16]
 800a430:	7823      	ldrb	r3, [r4, #0]
 800a432:	2b2e      	cmp	r3, #46	; 0x2e
 800a434:	d10c      	bne.n	800a450 <_svfiprintf_r+0x130>
 800a436:	7863      	ldrb	r3, [r4, #1]
 800a438:	2b2a      	cmp	r3, #42	; 0x2a
 800a43a:	d135      	bne.n	800a4a8 <_svfiprintf_r+0x188>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	9203      	str	r2, [sp, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfb8      	it	lt
 800a448:	f04f 33ff 	movlt.w	r3, #4294967295
 800a44c:	3402      	adds	r4, #2
 800a44e:	9305      	str	r3, [sp, #20]
 800a450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a51c <_svfiprintf_r+0x1fc>
 800a454:	7821      	ldrb	r1, [r4, #0]
 800a456:	2203      	movs	r2, #3
 800a458:	4650      	mov	r0, sl
 800a45a:	f7fd fec1 	bl	80081e0 <memchr>
 800a45e:	b140      	cbz	r0, 800a472 <_svfiprintf_r+0x152>
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	eba0 000a 	sub.w	r0, r0, sl
 800a466:	fa03 f000 	lsl.w	r0, r3, r0
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	4303      	orrs	r3, r0
 800a46e:	3401      	adds	r4, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a476:	4826      	ldr	r0, [pc, #152]	; (800a510 <_svfiprintf_r+0x1f0>)
 800a478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47c:	2206      	movs	r2, #6
 800a47e:	f7fd feaf 	bl	80081e0 <memchr>
 800a482:	2800      	cmp	r0, #0
 800a484:	d038      	beq.n	800a4f8 <_svfiprintf_r+0x1d8>
 800a486:	4b23      	ldr	r3, [pc, #140]	; (800a514 <_svfiprintf_r+0x1f4>)
 800a488:	bb1b      	cbnz	r3, 800a4d2 <_svfiprintf_r+0x1b2>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	3307      	adds	r3, #7
 800a48e:	f023 0307 	bic.w	r3, r3, #7
 800a492:	3308      	adds	r3, #8
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a498:	4433      	add	r3, r6
 800a49a:	9309      	str	r3, [sp, #36]	; 0x24
 800a49c:	e767      	b.n	800a36e <_svfiprintf_r+0x4e>
 800a49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	e7a5      	b.n	800a3f4 <_svfiprintf_r+0xd4>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9305      	str	r3, [sp, #20]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f04f 0c0a 	mov.w	ip, #10
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ba:	3a30      	subs	r2, #48	; 0x30
 800a4bc:	2a09      	cmp	r2, #9
 800a4be:	d903      	bls.n	800a4c8 <_svfiprintf_r+0x1a8>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0c5      	beq.n	800a450 <_svfiprintf_r+0x130>
 800a4c4:	9105      	str	r1, [sp, #20]
 800a4c6:	e7c3      	b.n	800a450 <_svfiprintf_r+0x130>
 800a4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7f0      	b.n	800a4b4 <_svfiprintf_r+0x194>
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <_svfiprintf_r+0x1f8>)
 800a4da:	a904      	add	r1, sp, #16
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f3af 8000 	nop.w
 800a4e2:	1c42      	adds	r2, r0, #1
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	d1d6      	bne.n	800a496 <_svfiprintf_r+0x176>
 800a4e8:	89ab      	ldrh	r3, [r5, #12]
 800a4ea:	065b      	lsls	r3, r3, #25
 800a4ec:	f53f af2c 	bmi.w	800a348 <_svfiprintf_r+0x28>
 800a4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f2:	b01d      	add	sp, #116	; 0x74
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	ab03      	add	r3, sp, #12
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	462a      	mov	r2, r5
 800a4fe:	4b06      	ldr	r3, [pc, #24]	; (800a518 <_svfiprintf_r+0x1f8>)
 800a500:	a904      	add	r1, sp, #16
 800a502:	4638      	mov	r0, r7
 800a504:	f000 f87a 	bl	800a5fc <_printf_i>
 800a508:	e7eb      	b.n	800a4e2 <_svfiprintf_r+0x1c2>
 800a50a:	bf00      	nop
 800a50c:	0800ab40 	.word	0x0800ab40
 800a510:	0800ab4a 	.word	0x0800ab4a
 800a514:	00000000 	.word	0x00000000
 800a518:	0800a269 	.word	0x0800a269
 800a51c:	0800ab46 	.word	0x0800ab46

0800a520 <_printf_common>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	4616      	mov	r6, r2
 800a526:	4699      	mov	r9, r3
 800a528:	688a      	ldr	r2, [r1, #8]
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a530:	4293      	cmp	r3, r2
 800a532:	bfb8      	it	lt
 800a534:	4613      	movlt	r3, r2
 800a536:	6033      	str	r3, [r6, #0]
 800a538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a53c:	4607      	mov	r7, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b10a      	cbz	r2, 800a546 <_printf_common+0x26>
 800a542:	3301      	adds	r3, #1
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	0699      	lsls	r1, r3, #26
 800a54a:	bf42      	ittt	mi
 800a54c:	6833      	ldrmi	r3, [r6, #0]
 800a54e:	3302      	addmi	r3, #2
 800a550:	6033      	strmi	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	f015 0506 	ands.w	r5, r5, #6
 800a558:	d106      	bne.n	800a568 <_printf_common+0x48>
 800a55a:	f104 0a19 	add.w	sl, r4, #25
 800a55e:	68e3      	ldr	r3, [r4, #12]
 800a560:	6832      	ldr	r2, [r6, #0]
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	42ab      	cmp	r3, r5
 800a566:	dc26      	bgt.n	800a5b6 <_printf_common+0x96>
 800a568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a56c:	1e13      	subs	r3, r2, #0
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	bf18      	it	ne
 800a572:	2301      	movne	r3, #1
 800a574:	0692      	lsls	r2, r2, #26
 800a576:	d42b      	bmi.n	800a5d0 <_printf_common+0xb0>
 800a578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a57c:	4649      	mov	r1, r9
 800a57e:	4638      	mov	r0, r7
 800a580:	47c0      	blx	r8
 800a582:	3001      	adds	r0, #1
 800a584:	d01e      	beq.n	800a5c4 <_printf_common+0xa4>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	68e5      	ldr	r5, [r4, #12]
 800a58a:	6832      	ldr	r2, [r6, #0]
 800a58c:	f003 0306 	and.w	r3, r3, #6
 800a590:	2b04      	cmp	r3, #4
 800a592:	bf08      	it	eq
 800a594:	1aad      	subeq	r5, r5, r2
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	6922      	ldr	r2, [r4, #16]
 800a59a:	bf0c      	ite	eq
 800a59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a0:	2500      	movne	r5, #0
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bfc4      	itt	gt
 800a5a6:	1a9b      	subgt	r3, r3, r2
 800a5a8:	18ed      	addgt	r5, r5, r3
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	341a      	adds	r4, #26
 800a5ae:	42b5      	cmp	r5, r6
 800a5b0:	d11a      	bne.n	800a5e8 <_printf_common+0xc8>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e008      	b.n	800a5c8 <_printf_common+0xa8>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4638      	mov	r0, r7
 800a5be:	47c0      	blx	r8
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d103      	bne.n	800a5cc <_printf_common+0xac>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	e7c6      	b.n	800a55e <_printf_common+0x3e>
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	2030      	movs	r0, #48	; 0x30
 800a5d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5da:	4422      	add	r2, r4
 800a5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	e7c7      	b.n	800a578 <_printf_common+0x58>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	4649      	mov	r1, r9
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c0      	blx	r8
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d0e6      	beq.n	800a5c4 <_printf_common+0xa4>
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7d9      	b.n	800a5ae <_printf_common+0x8e>
	...

0800a5fc <_printf_i>:
 800a5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	7e0f      	ldrb	r7, [r1, #24]
 800a602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a604:	2f78      	cmp	r7, #120	; 0x78
 800a606:	4691      	mov	r9, r2
 800a608:	4680      	mov	r8, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	469a      	mov	sl, r3
 800a60e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a612:	d807      	bhi.n	800a624 <_printf_i+0x28>
 800a614:	2f62      	cmp	r7, #98	; 0x62
 800a616:	d80a      	bhi.n	800a62e <_printf_i+0x32>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f000 80d8 	beq.w	800a7ce <_printf_i+0x1d2>
 800a61e:	2f58      	cmp	r7, #88	; 0x58
 800a620:	f000 80a3 	beq.w	800a76a <_printf_i+0x16e>
 800a624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a62c:	e03a      	b.n	800a6a4 <_printf_i+0xa8>
 800a62e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a632:	2b15      	cmp	r3, #21
 800a634:	d8f6      	bhi.n	800a624 <_printf_i+0x28>
 800a636:	a101      	add	r1, pc, #4	; (adr r1, 800a63c <_printf_i+0x40>)
 800a638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a625 	.word	0x0800a625
 800a648:	0800a625 	.word	0x0800a625
 800a64c:	0800a625 	.word	0x0800a625
 800a650:	0800a625 	.word	0x0800a625
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a625 	.word	0x0800a625
 800a65c:	0800a625 	.word	0x0800a625
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a7b5 	.word	0x0800a7b5
 800a66c:	0800a6d9 	.word	0x0800a6d9
 800a670:	0800a797 	.word	0x0800a797
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7d7 	.word	0x0800a7d7
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a79f 	.word	0x0800a79f
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	602a      	str	r2, [r5, #0]
 800a69c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e0a3      	b.n	800a7f0 <_printf_i+0x1f4>
 800a6a8:	6820      	ldr	r0, [r4, #0]
 800a6aa:	6829      	ldr	r1, [r5, #0]
 800a6ac:	0606      	lsls	r6, r0, #24
 800a6ae:	f101 0304 	add.w	r3, r1, #4
 800a6b2:	d50a      	bpl.n	800a6ca <_printf_i+0xce>
 800a6b4:	680e      	ldr	r6, [r1, #0]
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	2e00      	cmp	r6, #0
 800a6ba:	da03      	bge.n	800a6c4 <_printf_i+0xc8>
 800a6bc:	232d      	movs	r3, #45	; 0x2d
 800a6be:	4276      	negs	r6, r6
 800a6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c4:	485e      	ldr	r0, [pc, #376]	; (800a840 <_printf_i+0x244>)
 800a6c6:	230a      	movs	r3, #10
 800a6c8:	e019      	b.n	800a6fe <_printf_i+0x102>
 800a6ca:	680e      	ldr	r6, [r1, #0]
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6d2:	bf18      	it	ne
 800a6d4:	b236      	sxthne	r6, r6
 800a6d6:	e7ef      	b.n	800a6b8 <_printf_i+0xbc>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6820      	ldr	r0, [r4, #0]
 800a6dc:	1d19      	adds	r1, r3, #4
 800a6de:	6029      	str	r1, [r5, #0]
 800a6e0:	0601      	lsls	r1, r0, #24
 800a6e2:	d501      	bpl.n	800a6e8 <_printf_i+0xec>
 800a6e4:	681e      	ldr	r6, [r3, #0]
 800a6e6:	e002      	b.n	800a6ee <_printf_i+0xf2>
 800a6e8:	0646      	lsls	r6, r0, #25
 800a6ea:	d5fb      	bpl.n	800a6e4 <_printf_i+0xe8>
 800a6ec:	881e      	ldrh	r6, [r3, #0]
 800a6ee:	4854      	ldr	r0, [pc, #336]	; (800a840 <_printf_i+0x244>)
 800a6f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6f2:	bf0c      	ite	eq
 800a6f4:	2308      	moveq	r3, #8
 800a6f6:	230a      	movne	r3, #10
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6fe:	6865      	ldr	r5, [r4, #4]
 800a700:	60a5      	str	r5, [r4, #8]
 800a702:	2d00      	cmp	r5, #0
 800a704:	bfa2      	ittt	ge
 800a706:	6821      	ldrge	r1, [r4, #0]
 800a708:	f021 0104 	bicge.w	r1, r1, #4
 800a70c:	6021      	strge	r1, [r4, #0]
 800a70e:	b90e      	cbnz	r6, 800a714 <_printf_i+0x118>
 800a710:	2d00      	cmp	r5, #0
 800a712:	d04d      	beq.n	800a7b0 <_printf_i+0x1b4>
 800a714:	4615      	mov	r5, r2
 800a716:	fbb6 f1f3 	udiv	r1, r6, r3
 800a71a:	fb03 6711 	mls	r7, r3, r1, r6
 800a71e:	5dc7      	ldrb	r7, [r0, r7]
 800a720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a724:	4637      	mov	r7, r6
 800a726:	42bb      	cmp	r3, r7
 800a728:	460e      	mov	r6, r1
 800a72a:	d9f4      	bls.n	800a716 <_printf_i+0x11a>
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d10b      	bne.n	800a748 <_printf_i+0x14c>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	07de      	lsls	r6, r3, #31
 800a734:	d508      	bpl.n	800a748 <_printf_i+0x14c>
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	6861      	ldr	r1, [r4, #4]
 800a73a:	4299      	cmp	r1, r3
 800a73c:	bfde      	ittt	le
 800a73e:	2330      	movle	r3, #48	; 0x30
 800a740:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a744:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a748:	1b52      	subs	r2, r2, r5
 800a74a:	6122      	str	r2, [r4, #16]
 800a74c:	f8cd a000 	str.w	sl, [sp]
 800a750:	464b      	mov	r3, r9
 800a752:	aa03      	add	r2, sp, #12
 800a754:	4621      	mov	r1, r4
 800a756:	4640      	mov	r0, r8
 800a758:	f7ff fee2 	bl	800a520 <_printf_common>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d14c      	bne.n	800a7fa <_printf_i+0x1fe>
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	b004      	add	sp, #16
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	4835      	ldr	r0, [pc, #212]	; (800a840 <_printf_i+0x244>)
 800a76c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a770:	6829      	ldr	r1, [r5, #0]
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f851 6b04 	ldr.w	r6, [r1], #4
 800a778:	6029      	str	r1, [r5, #0]
 800a77a:	061d      	lsls	r5, r3, #24
 800a77c:	d514      	bpl.n	800a7a8 <_printf_i+0x1ac>
 800a77e:	07df      	lsls	r7, r3, #31
 800a780:	bf44      	itt	mi
 800a782:	f043 0320 	orrmi.w	r3, r3, #32
 800a786:	6023      	strmi	r3, [r4, #0]
 800a788:	b91e      	cbnz	r6, 800a792 <_printf_i+0x196>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f023 0320 	bic.w	r3, r3, #32
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	2310      	movs	r3, #16
 800a794:	e7b0      	b.n	800a6f8 <_printf_i+0xfc>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	f043 0320 	orr.w	r3, r3, #32
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	2378      	movs	r3, #120	; 0x78
 800a7a0:	4828      	ldr	r0, [pc, #160]	; (800a844 <_printf_i+0x248>)
 800a7a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7a6:	e7e3      	b.n	800a770 <_printf_i+0x174>
 800a7a8:	0659      	lsls	r1, r3, #25
 800a7aa:	bf48      	it	mi
 800a7ac:	b2b6      	uxthmi	r6, r6
 800a7ae:	e7e6      	b.n	800a77e <_printf_i+0x182>
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	e7bb      	b.n	800a72c <_printf_i+0x130>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	6826      	ldr	r6, [r4, #0]
 800a7b8:	6961      	ldr	r1, [r4, #20]
 800a7ba:	1d18      	adds	r0, r3, #4
 800a7bc:	6028      	str	r0, [r5, #0]
 800a7be:	0635      	lsls	r5, r6, #24
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	d501      	bpl.n	800a7c8 <_printf_i+0x1cc>
 800a7c4:	6019      	str	r1, [r3, #0]
 800a7c6:	e002      	b.n	800a7ce <_printf_i+0x1d2>
 800a7c8:	0670      	lsls	r0, r6, #25
 800a7ca:	d5fb      	bpl.n	800a7c4 <_printf_i+0x1c8>
 800a7cc:	8019      	strh	r1, [r3, #0]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	e7ba      	b.n	800a74c <_printf_i+0x150>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	602a      	str	r2, [r5, #0]
 800a7dc:	681d      	ldr	r5, [r3, #0]
 800a7de:	6862      	ldr	r2, [r4, #4]
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7fd fcfc 	bl	80081e0 <memchr>
 800a7e8:	b108      	cbz	r0, 800a7ee <_printf_i+0x1f2>
 800a7ea:	1b40      	subs	r0, r0, r5
 800a7ec:	6060      	str	r0, [r4, #4]
 800a7ee:	6863      	ldr	r3, [r4, #4]
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	e7a8      	b.n	800a74c <_printf_i+0x150>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4649      	mov	r1, r9
 800a800:	4640      	mov	r0, r8
 800a802:	47d0      	blx	sl
 800a804:	3001      	adds	r0, #1
 800a806:	d0ab      	beq.n	800a760 <_printf_i+0x164>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	079b      	lsls	r3, r3, #30
 800a80c:	d413      	bmi.n	800a836 <_printf_i+0x23a>
 800a80e:	68e0      	ldr	r0, [r4, #12]
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	4298      	cmp	r0, r3
 800a814:	bfb8      	it	lt
 800a816:	4618      	movlt	r0, r3
 800a818:	e7a4      	b.n	800a764 <_printf_i+0x168>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4632      	mov	r2, r6
 800a81e:	4649      	mov	r1, r9
 800a820:	4640      	mov	r0, r8
 800a822:	47d0      	blx	sl
 800a824:	3001      	adds	r0, #1
 800a826:	d09b      	beq.n	800a760 <_printf_i+0x164>
 800a828:	3501      	adds	r5, #1
 800a82a:	68e3      	ldr	r3, [r4, #12]
 800a82c:	9903      	ldr	r1, [sp, #12]
 800a82e:	1a5b      	subs	r3, r3, r1
 800a830:	42ab      	cmp	r3, r5
 800a832:	dcf2      	bgt.n	800a81a <_printf_i+0x21e>
 800a834:	e7eb      	b.n	800a80e <_printf_i+0x212>
 800a836:	2500      	movs	r5, #0
 800a838:	f104 0619 	add.w	r6, r4, #25
 800a83c:	e7f5      	b.n	800a82a <_printf_i+0x22e>
 800a83e:	bf00      	nop
 800a840:	0800ab51 	.word	0x0800ab51
 800a844:	0800ab62 	.word	0x0800ab62

0800a848 <memcpy>:
 800a848:	440a      	add	r2, r1
 800a84a:	4291      	cmp	r1, r2
 800a84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a850:	d100      	bne.n	800a854 <memcpy+0xc>
 800a852:	4770      	bx	lr
 800a854:	b510      	push	{r4, lr}
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85e:	4291      	cmp	r1, r2
 800a860:	d1f9      	bne.n	800a856 <memcpy+0xe>
 800a862:	bd10      	pop	{r4, pc}

0800a864 <memmove>:
 800a864:	4288      	cmp	r0, r1
 800a866:	b510      	push	{r4, lr}
 800a868:	eb01 0402 	add.w	r4, r1, r2
 800a86c:	d902      	bls.n	800a874 <memmove+0x10>
 800a86e:	4284      	cmp	r4, r0
 800a870:	4623      	mov	r3, r4
 800a872:	d807      	bhi.n	800a884 <memmove+0x20>
 800a874:	1e43      	subs	r3, r0, #1
 800a876:	42a1      	cmp	r1, r4
 800a878:	d008      	beq.n	800a88c <memmove+0x28>
 800a87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a882:	e7f8      	b.n	800a876 <memmove+0x12>
 800a884:	4402      	add	r2, r0
 800a886:	4601      	mov	r1, r0
 800a888:	428a      	cmp	r2, r1
 800a88a:	d100      	bne.n	800a88e <memmove+0x2a>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a896:	e7f7      	b.n	800a888 <memmove+0x24>

0800a898 <_free_r>:
 800a898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a89a:	2900      	cmp	r1, #0
 800a89c:	d044      	beq.n	800a928 <_free_r+0x90>
 800a89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a2:	9001      	str	r0, [sp, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8aa:	bfb8      	it	lt
 800a8ac:	18e4      	addlt	r4, r4, r3
 800a8ae:	f000 f913 	bl	800aad8 <__malloc_lock>
 800a8b2:	4a1e      	ldr	r2, [pc, #120]	; (800a92c <_free_r+0x94>)
 800a8b4:	9801      	ldr	r0, [sp, #4]
 800a8b6:	6813      	ldr	r3, [r2, #0]
 800a8b8:	b933      	cbnz	r3, 800a8c8 <_free_r+0x30>
 800a8ba:	6063      	str	r3, [r4, #4]
 800a8bc:	6014      	str	r4, [r2, #0]
 800a8be:	b003      	add	sp, #12
 800a8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8c4:	f000 b90e 	b.w	800aae4 <__malloc_unlock>
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d908      	bls.n	800a8de <_free_r+0x46>
 800a8cc:	6825      	ldr	r5, [r4, #0]
 800a8ce:	1961      	adds	r1, r4, r5
 800a8d0:	428b      	cmp	r3, r1
 800a8d2:	bf01      	itttt	eq
 800a8d4:	6819      	ldreq	r1, [r3, #0]
 800a8d6:	685b      	ldreq	r3, [r3, #4]
 800a8d8:	1949      	addeq	r1, r1, r5
 800a8da:	6021      	streq	r1, [r4, #0]
 800a8dc:	e7ed      	b.n	800a8ba <_free_r+0x22>
 800a8de:	461a      	mov	r2, r3
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	b10b      	cbz	r3, 800a8e8 <_free_r+0x50>
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	d9fa      	bls.n	800a8de <_free_r+0x46>
 800a8e8:	6811      	ldr	r1, [r2, #0]
 800a8ea:	1855      	adds	r5, r2, r1
 800a8ec:	42a5      	cmp	r5, r4
 800a8ee:	d10b      	bne.n	800a908 <_free_r+0x70>
 800a8f0:	6824      	ldr	r4, [r4, #0]
 800a8f2:	4421      	add	r1, r4
 800a8f4:	1854      	adds	r4, r2, r1
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	6011      	str	r1, [r2, #0]
 800a8fa:	d1e0      	bne.n	800a8be <_free_r+0x26>
 800a8fc:	681c      	ldr	r4, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	6053      	str	r3, [r2, #4]
 800a902:	4421      	add	r1, r4
 800a904:	6011      	str	r1, [r2, #0]
 800a906:	e7da      	b.n	800a8be <_free_r+0x26>
 800a908:	d902      	bls.n	800a910 <_free_r+0x78>
 800a90a:	230c      	movs	r3, #12
 800a90c:	6003      	str	r3, [r0, #0]
 800a90e:	e7d6      	b.n	800a8be <_free_r+0x26>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf04      	itt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	bf04      	itt	eq
 800a920:	1949      	addeq	r1, r1, r5
 800a922:	6021      	streq	r1, [r4, #0]
 800a924:	6054      	str	r4, [r2, #4]
 800a926:	e7ca      	b.n	800a8be <_free_r+0x26>
 800a928:	b003      	add	sp, #12
 800a92a:	bd30      	pop	{r4, r5, pc}
 800a92c:	200000d8 	.word	0x200000d8

0800a930 <sbrk_aligned>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4e0e      	ldr	r6, [pc, #56]	; (800a96c <sbrk_aligned+0x3c>)
 800a934:	460c      	mov	r4, r1
 800a936:	6831      	ldr	r1, [r6, #0]
 800a938:	4605      	mov	r5, r0
 800a93a:	b911      	cbnz	r1, 800a942 <sbrk_aligned+0x12>
 800a93c:	f000 f8bc 	bl	800aab8 <_sbrk_r>
 800a940:	6030      	str	r0, [r6, #0]
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f000 f8b7 	bl	800aab8 <_sbrk_r>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d00a      	beq.n	800a964 <sbrk_aligned+0x34>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d007      	beq.n	800a968 <sbrk_aligned+0x38>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 f8ac 	bl	800aab8 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d101      	bne.n	800a968 <sbrk_aligned+0x38>
 800a964:	f04f 34ff 	mov.w	r4, #4294967295
 800a968:	4620      	mov	r0, r4
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	200000dc 	.word	0x200000dc

0800a970 <_malloc_r>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	1ccd      	adds	r5, r1, #3
 800a976:	f025 0503 	bic.w	r5, r5, #3
 800a97a:	3508      	adds	r5, #8
 800a97c:	2d0c      	cmp	r5, #12
 800a97e:	bf38      	it	cc
 800a980:	250c      	movcc	r5, #12
 800a982:	2d00      	cmp	r5, #0
 800a984:	4607      	mov	r7, r0
 800a986:	db01      	blt.n	800a98c <_malloc_r+0x1c>
 800a988:	42a9      	cmp	r1, r5
 800a98a:	d905      	bls.n	800a998 <_malloc_r+0x28>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	2600      	movs	r6, #0
 800a992:	4630      	mov	r0, r6
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4e2e      	ldr	r6, [pc, #184]	; (800aa54 <_malloc_r+0xe4>)
 800a99a:	f000 f89d 	bl	800aad8 <__malloc_lock>
 800a99e:	6833      	ldr	r3, [r6, #0]
 800a9a0:	461c      	mov	r4, r3
 800a9a2:	bb34      	cbnz	r4, 800a9f2 <_malloc_r+0x82>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7ff ffc2 	bl	800a930 <sbrk_aligned>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	d14d      	bne.n	800aa4e <_malloc_r+0xde>
 800a9b2:	6834      	ldr	r4, [r6, #0]
 800a9b4:	4626      	mov	r6, r4
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	d140      	bne.n	800aa3c <_malloc_r+0xcc>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4638      	mov	r0, r7
 800a9c0:	eb04 0803 	add.w	r8, r4, r3
 800a9c4:	f000 f878 	bl	800aab8 <_sbrk_r>
 800a9c8:	4580      	cmp	r8, r0
 800a9ca:	d13a      	bne.n	800aa42 <_malloc_r+0xd2>
 800a9cc:	6821      	ldr	r1, [r4, #0]
 800a9ce:	3503      	adds	r5, #3
 800a9d0:	1a6d      	subs	r5, r5, r1
 800a9d2:	f025 0503 	bic.w	r5, r5, #3
 800a9d6:	3508      	adds	r5, #8
 800a9d8:	2d0c      	cmp	r5, #12
 800a9da:	bf38      	it	cc
 800a9dc:	250c      	movcc	r5, #12
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff ffa5 	bl	800a930 <sbrk_aligned>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d02b      	beq.n	800aa42 <_malloc_r+0xd2>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	442b      	add	r3, r5
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	e00e      	b.n	800aa10 <_malloc_r+0xa0>
 800a9f2:	6822      	ldr	r2, [r4, #0]
 800a9f4:	1b52      	subs	r2, r2, r5
 800a9f6:	d41e      	bmi.n	800aa36 <_malloc_r+0xc6>
 800a9f8:	2a0b      	cmp	r2, #11
 800a9fa:	d916      	bls.n	800aa2a <_malloc_r+0xba>
 800a9fc:	1961      	adds	r1, r4, r5
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	6025      	str	r5, [r4, #0]
 800aa02:	bf18      	it	ne
 800aa04:	6059      	strne	r1, [r3, #4]
 800aa06:	6863      	ldr	r3, [r4, #4]
 800aa08:	bf08      	it	eq
 800aa0a:	6031      	streq	r1, [r6, #0]
 800aa0c:	5162      	str	r2, [r4, r5]
 800aa0e:	604b      	str	r3, [r1, #4]
 800aa10:	4638      	mov	r0, r7
 800aa12:	f104 060b 	add.w	r6, r4, #11
 800aa16:	f000 f865 	bl	800aae4 <__malloc_unlock>
 800aa1a:	f026 0607 	bic.w	r6, r6, #7
 800aa1e:	1d23      	adds	r3, r4, #4
 800aa20:	1af2      	subs	r2, r6, r3
 800aa22:	d0b6      	beq.n	800a992 <_malloc_r+0x22>
 800aa24:	1b9b      	subs	r3, r3, r6
 800aa26:	50a3      	str	r3, [r4, r2]
 800aa28:	e7b3      	b.n	800a992 <_malloc_r+0x22>
 800aa2a:	6862      	ldr	r2, [r4, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	bf0c      	ite	eq
 800aa30:	6032      	streq	r2, [r6, #0]
 800aa32:	605a      	strne	r2, [r3, #4]
 800aa34:	e7ec      	b.n	800aa10 <_malloc_r+0xa0>
 800aa36:	4623      	mov	r3, r4
 800aa38:	6864      	ldr	r4, [r4, #4]
 800aa3a:	e7b2      	b.n	800a9a2 <_malloc_r+0x32>
 800aa3c:	4634      	mov	r4, r6
 800aa3e:	6876      	ldr	r6, [r6, #4]
 800aa40:	e7b9      	b.n	800a9b6 <_malloc_r+0x46>
 800aa42:	230c      	movs	r3, #12
 800aa44:	603b      	str	r3, [r7, #0]
 800aa46:	4638      	mov	r0, r7
 800aa48:	f000 f84c 	bl	800aae4 <__malloc_unlock>
 800aa4c:	e7a1      	b.n	800a992 <_malloc_r+0x22>
 800aa4e:	6025      	str	r5, [r4, #0]
 800aa50:	e7de      	b.n	800aa10 <_malloc_r+0xa0>
 800aa52:	bf00      	nop
 800aa54:	200000d8 	.word	0x200000d8

0800aa58 <_realloc_r>:
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	4614      	mov	r4, r2
 800aa60:	460e      	mov	r6, r1
 800aa62:	b921      	cbnz	r1, 800aa6e <_realloc_r+0x16>
 800aa64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	4611      	mov	r1, r2
 800aa6a:	f7ff bf81 	b.w	800a970 <_malloc_r>
 800aa6e:	b92a      	cbnz	r2, 800aa7c <_realloc_r+0x24>
 800aa70:	f7ff ff12 	bl	800a898 <_free_r>
 800aa74:	4625      	mov	r5, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7c:	f000 f838 	bl	800aaf0 <_malloc_usable_size_r>
 800aa80:	4284      	cmp	r4, r0
 800aa82:	4607      	mov	r7, r0
 800aa84:	d802      	bhi.n	800aa8c <_realloc_r+0x34>
 800aa86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa8a:	d812      	bhi.n	800aab2 <_realloc_r+0x5a>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4640      	mov	r0, r8
 800aa90:	f7ff ff6e 	bl	800a970 <_malloc_r>
 800aa94:	4605      	mov	r5, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d0ed      	beq.n	800aa76 <_realloc_r+0x1e>
 800aa9a:	42bc      	cmp	r4, r7
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	bf28      	it	cs
 800aaa2:	463a      	movcs	r2, r7
 800aaa4:	f7ff fed0 	bl	800a848 <memcpy>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7ff fef4 	bl	800a898 <_free_r>
 800aab0:	e7e1      	b.n	800aa76 <_realloc_r+0x1e>
 800aab2:	4635      	mov	r5, r6
 800aab4:	e7df      	b.n	800aa76 <_realloc_r+0x1e>
	...

0800aab8 <_sbrk_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d06      	ldr	r5, [pc, #24]	; (800aad4 <_sbrk_r+0x1c>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	f7fd ff86 	bl	80089d4 <_sbrk>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_sbrk_r+0x1a>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_sbrk_r+0x1a>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	200000e0 	.word	0x200000e0

0800aad8 <__malloc_lock>:
 800aad8:	4801      	ldr	r0, [pc, #4]	; (800aae0 <__malloc_lock+0x8>)
 800aada:	f000 b811 	b.w	800ab00 <__retarget_lock_acquire_recursive>
 800aade:	bf00      	nop
 800aae0:	200000e4 	.word	0x200000e4

0800aae4 <__malloc_unlock>:
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <__malloc_unlock+0x8>)
 800aae6:	f000 b80c 	b.w	800ab02 <__retarget_lock_release_recursive>
 800aaea:	bf00      	nop
 800aaec:	200000e4 	.word	0x200000e4

0800aaf0 <_malloc_usable_size_r>:
 800aaf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf4:	1f18      	subs	r0, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bfbc      	itt	lt
 800aafa:	580b      	ldrlt	r3, [r1, r0]
 800aafc:	18c0      	addlt	r0, r0, r3
 800aafe:	4770      	bx	lr

0800ab00 <__retarget_lock_acquire_recursive>:
 800ab00:	4770      	bx	lr

0800ab02 <__retarget_lock_release_recursive>:
 800ab02:	4770      	bx	lr

0800ab04 <_init>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	bf00      	nop
 800ab08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0a:	bc08      	pop	{r3}
 800ab0c:	469e      	mov	lr, r3
 800ab0e:	4770      	bx	lr

0800ab10 <_fini>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr
