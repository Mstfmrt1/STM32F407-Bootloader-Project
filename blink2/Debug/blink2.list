
blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002990  0800c190  0800c190  0000c190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800eb20  0800eb20  0000eb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb78  0800eb78  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb78  0800eb78  0000eb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb80  0800eb80  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb80  0800eb80  0000eb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb84  0800eb84  0000eb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800eb88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b1b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000133f  00000000  00000000  00017bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00018f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005b8  00000000  00000000  00019530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201e6  00000000  00000000  00019ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b84  00000000  00000000  00039cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c299f  00000000  00000000  00041852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001041f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bfc  00000000  00000000  00104244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c190 <__do_global_dtors_aux>:
 800c190:	b510      	push	{r4, lr}
 800c192:	4c05      	ldr	r4, [pc, #20]	; (800c1a8 <__do_global_dtors_aux+0x18>)
 800c194:	7823      	ldrb	r3, [r4, #0]
 800c196:	b933      	cbnz	r3, 800c1a6 <__do_global_dtors_aux+0x16>
 800c198:	4b04      	ldr	r3, [pc, #16]	; (800c1ac <__do_global_dtors_aux+0x1c>)
 800c19a:	b113      	cbz	r3, 800c1a2 <__do_global_dtors_aux+0x12>
 800c19c:	4804      	ldr	r0, [pc, #16]	; (800c1b0 <__do_global_dtors_aux+0x20>)
 800c19e:	f3af 8000 	nop.w
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	7023      	strb	r3, [r4, #0]
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	20000070 	.word	0x20000070
 800c1ac:	00000000 	.word	0x00000000
 800c1b0:	0800eb08 	.word	0x0800eb08

0800c1b4 <frame_dummy>:
 800c1b4:	b508      	push	{r3, lr}
 800c1b6:	4b03      	ldr	r3, [pc, #12]	; (800c1c4 <frame_dummy+0x10>)
 800c1b8:	b11b      	cbz	r3, 800c1c2 <frame_dummy+0xe>
 800c1ba:	4903      	ldr	r1, [pc, #12]	; (800c1c8 <frame_dummy+0x14>)
 800c1bc:	4803      	ldr	r0, [pc, #12]	; (800c1cc <frame_dummy+0x18>)
 800c1be:	f3af 8000 	nop.w
 800c1c2:	bd08      	pop	{r3, pc}
 800c1c4:	00000000 	.word	0x00000000
 800c1c8:	20000074 	.word	0x20000074
 800c1cc:	0800eb08 	.word	0x0800eb08

0800c1d0 <strlen>:
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	d1fb      	bne.n	800c1d2 <strlen+0x2>
 800c1da:	1a18      	subs	r0, r3, r0
 800c1dc:	3801      	subs	r0, #1
 800c1de:	4770      	bx	lr

0800c1e0 <memchr>:
 800c1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c1e4:	2a10      	cmp	r2, #16
 800c1e6:	db2b      	blt.n	800c240 <memchr+0x60>
 800c1e8:	f010 0f07 	tst.w	r0, #7
 800c1ec:	d008      	beq.n	800c200 <memchr+0x20>
 800c1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	d02d      	beq.n	800c254 <memchr+0x74>
 800c1f8:	f010 0f07 	tst.w	r0, #7
 800c1fc:	b342      	cbz	r2, 800c250 <memchr+0x70>
 800c1fe:	d1f6      	bne.n	800c1ee <memchr+0xe>
 800c200:	b4f0      	push	{r4, r5, r6, r7}
 800c202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c20a:	f022 0407 	bic.w	r4, r2, #7
 800c20e:	f07f 0700 	mvns.w	r7, #0
 800c212:	2300      	movs	r3, #0
 800c214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c218:	3c08      	subs	r4, #8
 800c21a:	ea85 0501 	eor.w	r5, r5, r1
 800c21e:	ea86 0601 	eor.w	r6, r6, r1
 800c222:	fa85 f547 	uadd8	r5, r5, r7
 800c226:	faa3 f587 	sel	r5, r3, r7
 800c22a:	fa86 f647 	uadd8	r6, r6, r7
 800c22e:	faa5 f687 	sel	r6, r5, r7
 800c232:	b98e      	cbnz	r6, 800c258 <memchr+0x78>
 800c234:	d1ee      	bne.n	800c214 <memchr+0x34>
 800c236:	bcf0      	pop	{r4, r5, r6, r7}
 800c238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c23c:	f002 0207 	and.w	r2, r2, #7
 800c240:	b132      	cbz	r2, 800c250 <memchr+0x70>
 800c242:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c246:	3a01      	subs	r2, #1
 800c248:	ea83 0301 	eor.w	r3, r3, r1
 800c24c:	b113      	cbz	r3, 800c254 <memchr+0x74>
 800c24e:	d1f8      	bne.n	800c242 <memchr+0x62>
 800c250:	2000      	movs	r0, #0
 800c252:	4770      	bx	lr
 800c254:	3801      	subs	r0, #1
 800c256:	4770      	bx	lr
 800c258:	2d00      	cmp	r5, #0
 800c25a:	bf06      	itte	eq
 800c25c:	4635      	moveq	r5, r6
 800c25e:	3803      	subeq	r0, #3
 800c260:	3807      	subne	r0, #7
 800c262:	f015 0f01 	tst.w	r5, #1
 800c266:	d107      	bne.n	800c278 <memchr+0x98>
 800c268:	3001      	adds	r0, #1
 800c26a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c26e:	bf02      	ittt	eq
 800c270:	3001      	addeq	r0, #1
 800c272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c276:	3001      	addeq	r0, #1
 800c278:	bcf0      	pop	{r4, r5, r6, r7}
 800c27a:	3801      	subs	r0, #1
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <__aeabi_uldivmod>:
 800c280:	b953      	cbnz	r3, 800c298 <__aeabi_uldivmod+0x18>
 800c282:	b94a      	cbnz	r2, 800c298 <__aeabi_uldivmod+0x18>
 800c284:	2900      	cmp	r1, #0
 800c286:	bf08      	it	eq
 800c288:	2800      	cmpeq	r0, #0
 800c28a:	bf1c      	itt	ne
 800c28c:	f04f 31ff 	movne.w	r1, #4294967295
 800c290:	f04f 30ff 	movne.w	r0, #4294967295
 800c294:	f000 b974 	b.w	800c580 <__aeabi_idiv0>
 800c298:	f1ad 0c08 	sub.w	ip, sp, #8
 800c29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c2a0:	f000 f806 	bl	800c2b0 <__udivmoddi4>
 800c2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ac:	b004      	add	sp, #16
 800c2ae:	4770      	bx	lr

0800c2b0 <__udivmoddi4>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	9d08      	ldr	r5, [sp, #32]
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	468e      	mov	lr, r1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d14d      	bne.n	800c35a <__udivmoddi4+0xaa>
 800c2be:	428a      	cmp	r2, r1
 800c2c0:	4694      	mov	ip, r2
 800c2c2:	d969      	bls.n	800c398 <__udivmoddi4+0xe8>
 800c2c4:	fab2 f282 	clz	r2, r2
 800c2c8:	b152      	cbz	r2, 800c2e0 <__udivmoddi4+0x30>
 800c2ca:	fa01 f302 	lsl.w	r3, r1, r2
 800c2ce:	f1c2 0120 	rsb	r1, r2, #32
 800c2d2:	fa20 f101 	lsr.w	r1, r0, r1
 800c2d6:	fa0c fc02 	lsl.w	ip, ip, r2
 800c2da:	ea41 0e03 	orr.w	lr, r1, r3
 800c2de:	4094      	lsls	r4, r2
 800c2e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c2e4:	0c21      	lsrs	r1, r4, #16
 800c2e6:	fbbe f6f8 	udiv	r6, lr, r8
 800c2ea:	fa1f f78c 	uxth.w	r7, ip
 800c2ee:	fb08 e316 	mls	r3, r8, r6, lr
 800c2f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c2f6:	fb06 f107 	mul.w	r1, r6, r7
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d90a      	bls.n	800c314 <__udivmoddi4+0x64>
 800c2fe:	eb1c 0303 	adds.w	r3, ip, r3
 800c302:	f106 30ff 	add.w	r0, r6, #4294967295
 800c306:	f080 811f 	bcs.w	800c548 <__udivmoddi4+0x298>
 800c30a:	4299      	cmp	r1, r3
 800c30c:	f240 811c 	bls.w	800c548 <__udivmoddi4+0x298>
 800c310:	3e02      	subs	r6, #2
 800c312:	4463      	add	r3, ip
 800c314:	1a5b      	subs	r3, r3, r1
 800c316:	b2a4      	uxth	r4, r4
 800c318:	fbb3 f0f8 	udiv	r0, r3, r8
 800c31c:	fb08 3310 	mls	r3, r8, r0, r3
 800c320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c324:	fb00 f707 	mul.w	r7, r0, r7
 800c328:	42a7      	cmp	r7, r4
 800c32a:	d90a      	bls.n	800c342 <__udivmoddi4+0x92>
 800c32c:	eb1c 0404 	adds.w	r4, ip, r4
 800c330:	f100 33ff 	add.w	r3, r0, #4294967295
 800c334:	f080 810a 	bcs.w	800c54c <__udivmoddi4+0x29c>
 800c338:	42a7      	cmp	r7, r4
 800c33a:	f240 8107 	bls.w	800c54c <__udivmoddi4+0x29c>
 800c33e:	4464      	add	r4, ip
 800c340:	3802      	subs	r0, #2
 800c342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c346:	1be4      	subs	r4, r4, r7
 800c348:	2600      	movs	r6, #0
 800c34a:	b11d      	cbz	r5, 800c354 <__udivmoddi4+0xa4>
 800c34c:	40d4      	lsrs	r4, r2
 800c34e:	2300      	movs	r3, #0
 800c350:	e9c5 4300 	strd	r4, r3, [r5]
 800c354:	4631      	mov	r1, r6
 800c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35a:	428b      	cmp	r3, r1
 800c35c:	d909      	bls.n	800c372 <__udivmoddi4+0xc2>
 800c35e:	2d00      	cmp	r5, #0
 800c360:	f000 80ef 	beq.w	800c542 <__udivmoddi4+0x292>
 800c364:	2600      	movs	r6, #0
 800c366:	e9c5 0100 	strd	r0, r1, [r5]
 800c36a:	4630      	mov	r0, r6
 800c36c:	4631      	mov	r1, r6
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	fab3 f683 	clz	r6, r3
 800c376:	2e00      	cmp	r6, #0
 800c378:	d14a      	bne.n	800c410 <__udivmoddi4+0x160>
 800c37a:	428b      	cmp	r3, r1
 800c37c:	d302      	bcc.n	800c384 <__udivmoddi4+0xd4>
 800c37e:	4282      	cmp	r2, r0
 800c380:	f200 80f9 	bhi.w	800c576 <__udivmoddi4+0x2c6>
 800c384:	1a84      	subs	r4, r0, r2
 800c386:	eb61 0303 	sbc.w	r3, r1, r3
 800c38a:	2001      	movs	r0, #1
 800c38c:	469e      	mov	lr, r3
 800c38e:	2d00      	cmp	r5, #0
 800c390:	d0e0      	beq.n	800c354 <__udivmoddi4+0xa4>
 800c392:	e9c5 4e00 	strd	r4, lr, [r5]
 800c396:	e7dd      	b.n	800c354 <__udivmoddi4+0xa4>
 800c398:	b902      	cbnz	r2, 800c39c <__udivmoddi4+0xec>
 800c39a:	deff      	udf	#255	; 0xff
 800c39c:	fab2 f282 	clz	r2, r2
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	f040 8092 	bne.w	800c4ca <__udivmoddi4+0x21a>
 800c3a6:	eba1 010c 	sub.w	r1, r1, ip
 800c3aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c3ae:	fa1f fe8c 	uxth.w	lr, ip
 800c3b2:	2601      	movs	r6, #1
 800c3b4:	0c20      	lsrs	r0, r4, #16
 800c3b6:	fbb1 f3f7 	udiv	r3, r1, r7
 800c3ba:	fb07 1113 	mls	r1, r7, r3, r1
 800c3be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c3c2:	fb0e f003 	mul.w	r0, lr, r3
 800c3c6:	4288      	cmp	r0, r1
 800c3c8:	d908      	bls.n	800c3dc <__udivmoddi4+0x12c>
 800c3ca:	eb1c 0101 	adds.w	r1, ip, r1
 800c3ce:	f103 38ff 	add.w	r8, r3, #4294967295
 800c3d2:	d202      	bcs.n	800c3da <__udivmoddi4+0x12a>
 800c3d4:	4288      	cmp	r0, r1
 800c3d6:	f200 80cb 	bhi.w	800c570 <__udivmoddi4+0x2c0>
 800c3da:	4643      	mov	r3, r8
 800c3dc:	1a09      	subs	r1, r1, r0
 800c3de:	b2a4      	uxth	r4, r4
 800c3e0:	fbb1 f0f7 	udiv	r0, r1, r7
 800c3e4:	fb07 1110 	mls	r1, r7, r0, r1
 800c3e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c3ec:	fb0e fe00 	mul.w	lr, lr, r0
 800c3f0:	45a6      	cmp	lr, r4
 800c3f2:	d908      	bls.n	800c406 <__udivmoddi4+0x156>
 800c3f4:	eb1c 0404 	adds.w	r4, ip, r4
 800c3f8:	f100 31ff 	add.w	r1, r0, #4294967295
 800c3fc:	d202      	bcs.n	800c404 <__udivmoddi4+0x154>
 800c3fe:	45a6      	cmp	lr, r4
 800c400:	f200 80bb 	bhi.w	800c57a <__udivmoddi4+0x2ca>
 800c404:	4608      	mov	r0, r1
 800c406:	eba4 040e 	sub.w	r4, r4, lr
 800c40a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c40e:	e79c      	b.n	800c34a <__udivmoddi4+0x9a>
 800c410:	f1c6 0720 	rsb	r7, r6, #32
 800c414:	40b3      	lsls	r3, r6
 800c416:	fa22 fc07 	lsr.w	ip, r2, r7
 800c41a:	ea4c 0c03 	orr.w	ip, ip, r3
 800c41e:	fa20 f407 	lsr.w	r4, r0, r7
 800c422:	fa01 f306 	lsl.w	r3, r1, r6
 800c426:	431c      	orrs	r4, r3
 800c428:	40f9      	lsrs	r1, r7
 800c42a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c42e:	fa00 f306 	lsl.w	r3, r0, r6
 800c432:	fbb1 f8f9 	udiv	r8, r1, r9
 800c436:	0c20      	lsrs	r0, r4, #16
 800c438:	fa1f fe8c 	uxth.w	lr, ip
 800c43c:	fb09 1118 	mls	r1, r9, r8, r1
 800c440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c444:	fb08 f00e 	mul.w	r0, r8, lr
 800c448:	4288      	cmp	r0, r1
 800c44a:	fa02 f206 	lsl.w	r2, r2, r6
 800c44e:	d90b      	bls.n	800c468 <__udivmoddi4+0x1b8>
 800c450:	eb1c 0101 	adds.w	r1, ip, r1
 800c454:	f108 3aff 	add.w	sl, r8, #4294967295
 800c458:	f080 8088 	bcs.w	800c56c <__udivmoddi4+0x2bc>
 800c45c:	4288      	cmp	r0, r1
 800c45e:	f240 8085 	bls.w	800c56c <__udivmoddi4+0x2bc>
 800c462:	f1a8 0802 	sub.w	r8, r8, #2
 800c466:	4461      	add	r1, ip
 800c468:	1a09      	subs	r1, r1, r0
 800c46a:	b2a4      	uxth	r4, r4
 800c46c:	fbb1 f0f9 	udiv	r0, r1, r9
 800c470:	fb09 1110 	mls	r1, r9, r0, r1
 800c474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800c478:	fb00 fe0e 	mul.w	lr, r0, lr
 800c47c:	458e      	cmp	lr, r1
 800c47e:	d908      	bls.n	800c492 <__udivmoddi4+0x1e2>
 800c480:	eb1c 0101 	adds.w	r1, ip, r1
 800c484:	f100 34ff 	add.w	r4, r0, #4294967295
 800c488:	d26c      	bcs.n	800c564 <__udivmoddi4+0x2b4>
 800c48a:	458e      	cmp	lr, r1
 800c48c:	d96a      	bls.n	800c564 <__udivmoddi4+0x2b4>
 800c48e:	3802      	subs	r0, #2
 800c490:	4461      	add	r1, ip
 800c492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c496:	fba0 9402 	umull	r9, r4, r0, r2
 800c49a:	eba1 010e 	sub.w	r1, r1, lr
 800c49e:	42a1      	cmp	r1, r4
 800c4a0:	46c8      	mov	r8, r9
 800c4a2:	46a6      	mov	lr, r4
 800c4a4:	d356      	bcc.n	800c554 <__udivmoddi4+0x2a4>
 800c4a6:	d053      	beq.n	800c550 <__udivmoddi4+0x2a0>
 800c4a8:	b15d      	cbz	r5, 800c4c2 <__udivmoddi4+0x212>
 800c4aa:	ebb3 0208 	subs.w	r2, r3, r8
 800c4ae:	eb61 010e 	sbc.w	r1, r1, lr
 800c4b2:	fa01 f707 	lsl.w	r7, r1, r7
 800c4b6:	fa22 f306 	lsr.w	r3, r2, r6
 800c4ba:	40f1      	lsrs	r1, r6
 800c4bc:	431f      	orrs	r7, r3
 800c4be:	e9c5 7100 	strd	r7, r1, [r5]
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ca:	f1c2 0320 	rsb	r3, r2, #32
 800c4ce:	40d8      	lsrs	r0, r3
 800c4d0:	fa0c fc02 	lsl.w	ip, ip, r2
 800c4d4:	fa21 f303 	lsr.w	r3, r1, r3
 800c4d8:	4091      	lsls	r1, r2
 800c4da:	4301      	orrs	r1, r0
 800c4dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c4e0:	fa1f fe8c 	uxth.w	lr, ip
 800c4e4:	fbb3 f0f7 	udiv	r0, r3, r7
 800c4e8:	fb07 3610 	mls	r6, r7, r0, r3
 800c4ec:	0c0b      	lsrs	r3, r1, #16
 800c4ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c4f2:	fb00 f60e 	mul.w	r6, r0, lr
 800c4f6:	429e      	cmp	r6, r3
 800c4f8:	fa04 f402 	lsl.w	r4, r4, r2
 800c4fc:	d908      	bls.n	800c510 <__udivmoddi4+0x260>
 800c4fe:	eb1c 0303 	adds.w	r3, ip, r3
 800c502:	f100 38ff 	add.w	r8, r0, #4294967295
 800c506:	d22f      	bcs.n	800c568 <__udivmoddi4+0x2b8>
 800c508:	429e      	cmp	r6, r3
 800c50a:	d92d      	bls.n	800c568 <__udivmoddi4+0x2b8>
 800c50c:	3802      	subs	r0, #2
 800c50e:	4463      	add	r3, ip
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	b289      	uxth	r1, r1
 800c514:	fbb3 f6f7 	udiv	r6, r3, r7
 800c518:	fb07 3316 	mls	r3, r7, r6, r3
 800c51c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c520:	fb06 f30e 	mul.w	r3, r6, lr
 800c524:	428b      	cmp	r3, r1
 800c526:	d908      	bls.n	800c53a <__udivmoddi4+0x28a>
 800c528:	eb1c 0101 	adds.w	r1, ip, r1
 800c52c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c530:	d216      	bcs.n	800c560 <__udivmoddi4+0x2b0>
 800c532:	428b      	cmp	r3, r1
 800c534:	d914      	bls.n	800c560 <__udivmoddi4+0x2b0>
 800c536:	3e02      	subs	r6, #2
 800c538:	4461      	add	r1, ip
 800c53a:	1ac9      	subs	r1, r1, r3
 800c53c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800c540:	e738      	b.n	800c3b4 <__udivmoddi4+0x104>
 800c542:	462e      	mov	r6, r5
 800c544:	4628      	mov	r0, r5
 800c546:	e705      	b.n	800c354 <__udivmoddi4+0xa4>
 800c548:	4606      	mov	r6, r0
 800c54a:	e6e3      	b.n	800c314 <__udivmoddi4+0x64>
 800c54c:	4618      	mov	r0, r3
 800c54e:	e6f8      	b.n	800c342 <__udivmoddi4+0x92>
 800c550:	454b      	cmp	r3, r9
 800c552:	d2a9      	bcs.n	800c4a8 <__udivmoddi4+0x1f8>
 800c554:	ebb9 0802 	subs.w	r8, r9, r2
 800c558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800c55c:	3801      	subs	r0, #1
 800c55e:	e7a3      	b.n	800c4a8 <__udivmoddi4+0x1f8>
 800c560:	4646      	mov	r6, r8
 800c562:	e7ea      	b.n	800c53a <__udivmoddi4+0x28a>
 800c564:	4620      	mov	r0, r4
 800c566:	e794      	b.n	800c492 <__udivmoddi4+0x1e2>
 800c568:	4640      	mov	r0, r8
 800c56a:	e7d1      	b.n	800c510 <__udivmoddi4+0x260>
 800c56c:	46d0      	mov	r8, sl
 800c56e:	e77b      	b.n	800c468 <__udivmoddi4+0x1b8>
 800c570:	3b02      	subs	r3, #2
 800c572:	4461      	add	r1, ip
 800c574:	e732      	b.n	800c3dc <__udivmoddi4+0x12c>
 800c576:	4630      	mov	r0, r6
 800c578:	e709      	b.n	800c38e <__udivmoddi4+0xde>
 800c57a:	4464      	add	r4, ip
 800c57c:	3802      	subs	r0, #2
 800c57e:	e742      	b.n	800c406 <__udivmoddi4+0x156>

0800c580 <__aeabi_idiv0>:
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop

0800c584 <printmsg>:
static void MX_USART3_UART_Init(void);


/*************************Print Message Functions**************************/
void printmsg(char *format,...)
{
 800c584:	b40f      	push	{r0, r1, r2, r3}
 800c586:	b580      	push	{r7, lr}
 800c588:	b096      	sub	sp, #88	; 0x58
 800c58a:	af00      	add	r7, sp, #0
	char str[80];
	va_list args;
	va_start(args, format);
 800c58c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c590:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800c592:	f107 0308 	add.w	r3, r7, #8
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c59a:	4618      	mov	r0, r3
 800c59c:	f001 fe5c 	bl	800e258 <vsiprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7ff fe13 	bl	800c1d0 <strlen>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	f107 0108 	add.w	r1, r7, #8
 800c5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b6:	4805      	ldr	r0, [pc, #20]	; (800c5cc <printmsg+0x48>)
 800c5b8:	f001 fa91 	bl	800dade <HAL_UART_Transmit>
	va_end(args);
}
 800c5bc:	bf00      	nop
 800c5be:	3758      	adds	r7, #88	; 0x58
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5c6:	b004      	add	sp, #16
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	2000008c 	.word	0x2000008c

0800c5d0 <main>:

int main(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0

  HAL_Init();
 800c5d4:	f000 fa76 	bl	800cac4 <HAL_Init>

  SystemClock_Config();
 800c5d8:	f000 f816 	bl	800c608 <SystemClock_Config>

  MX_GPIO_Init();
 800c5dc:	f000 f8bc 	bl	800c758 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800c5e0:	f000 f890 	bl	800c704 <MX_USART3_UART_Init>
  printmsg("JUMP APP2\r\n");
 800c5e4:	4806      	ldr	r0, [pc, #24]	; (800c600 <main+0x30>)
 800c5e6:	f7ff ffcd 	bl	800c584 <printmsg>
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800c5ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c5ee:	4805      	ldr	r0, [pc, #20]	; (800c604 <main+0x34>)
 800c5f0:	f000 fdb5 	bl	800d15e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800c5f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c5f8:	f000 fad6 	bl	800cba8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800c5fc:	e7f5      	b.n	800c5ea <main+0x1a>
 800c5fe:	bf00      	nop
 800c600:	0800eb20 	.word	0x0800eb20
 800c604:	40020c00 	.word	0x40020c00

0800c608 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b094      	sub	sp, #80	; 0x50
 800c60c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c60e:	f107 0320 	add.w	r3, r7, #32
 800c612:	2230      	movs	r2, #48	; 0x30
 800c614:	2100      	movs	r1, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f001 fe00 	bl	800e21c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	605a      	str	r2, [r3, #4]
 800c626:	609a      	str	r2, [r3, #8]
 800c628:	60da      	str	r2, [r3, #12]
 800c62a:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_PWR_CLK_ENABLE();
 800c62c:	2300      	movs	r3, #0
 800c62e:	60bb      	str	r3, [r7, #8]
 800c630:	4b31      	ldr	r3, [pc, #196]	; (800c6f8 <SystemClock_Config+0xf0>)
 800c632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c634:	4a30      	ldr	r2, [pc, #192]	; (800c6f8 <SystemClock_Config+0xf0>)
 800c636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c63a:	6413      	str	r3, [r2, #64]	; 0x40
 800c63c:	4b2e      	ldr	r3, [pc, #184]	; (800c6f8 <SystemClock_Config+0xf0>)
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c644:	60bb      	str	r3, [r7, #8]
 800c646:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c648:	2300      	movs	r3, #0
 800c64a:	607b      	str	r3, [r7, #4]
 800c64c:	4b2b      	ldr	r3, [pc, #172]	; (800c6fc <SystemClock_Config+0xf4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a2a      	ldr	r2, [pc, #168]	; (800c6fc <SystemClock_Config+0xf4>)
 800c652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	4b28      	ldr	r3, [pc, #160]	; (800c6fc <SystemClock_Config+0xf4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c660:	607b      	str	r3, [r7, #4]
 800c662:	687b      	ldr	r3, [r7, #4]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c664:	2302      	movs	r3, #2
 800c666:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c668:	2301      	movs	r3, #1
 800c66a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c66c:	2310      	movs	r3, #16
 800c66e:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c670:	2302      	movs	r3, #2
 800c672:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c674:	2300      	movs	r3, #0
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 800c678:	2308      	movs	r3, #8
 800c67a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 84;
 800c67c:	2354      	movs	r3, #84	; 0x54
 800c67e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c680:	2302      	movs	r3, #2
 800c682:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c684:	2304      	movs	r3, #4
 800c686:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c688:	f107 0320 	add.w	r3, r7, #32
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fd81 	bl	800d194 <HAL_RCC_OscConfig>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 800c698:	f000 f8fe 	bl	800c898 <Error_Handler>
	  }

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c69c:	230f      	movs	r3, #15
 800c69e:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c6a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6ac:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6b2:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c6b4:	f107 030c 	add.w	r3, r7, #12
 800c6b8:	2102      	movs	r1, #2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 ffe2 	bl	800d684 <HAL_RCC_ClockConfig>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <SystemClock_Config+0xc2>
	  {
	    Error_Handler();
 800c6c6:	f000 f8e7 	bl	800c898 <Error_Handler>
	  }

	  /**Configure the Systick interrupt time
	  */
	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800c6ca:	f001 f987 	bl	800d9dc <HAL_RCC_GetHCLKFreq>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4a0b      	ldr	r2, [pc, #44]	; (800c700 <SystemClock_Config+0xf8>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f000 fb62 	bl	800cda2 <HAL_SYSTICK_Config>

	  /**Configure the Systick
	  */
	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800c6de:	2004      	movs	r0, #4
 800c6e0:	f000 fb6c 	bl	800cdbc <HAL_SYSTICK_CLKSourceConfig>

	 /* SysTick_IRQn interrupt configuration */
	 HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	f000 fb3d 	bl	800cd6a <HAL_NVIC_SetPriority>
}
 800c6f0:	bf00      	nop
 800c6f2:	3750      	adds	r7, #80	; 0x50
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	40023800 	.word	0x40023800
 800c6fc:	40007000 	.word	0x40007000
 800c700:	10624dd3 	.word	0x10624dd3

0800c704 <MX_USART3_UART_Init>:

/**************************USART COMMUNICATION INIT*************************/


static void MX_USART3_UART_Init(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
	  huart3.Instance = USART3;
 800c708:	4b11      	ldr	r3, [pc, #68]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c70a:	4a12      	ldr	r2, [pc, #72]	; (800c754 <MX_USART3_UART_Init+0x50>)
 800c70c:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 800c70e:	4b10      	ldr	r3, [pc, #64]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c714:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c716:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c718:	2200      	movs	r2, #0
 800c71a:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 800c71c:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c71e:	2200      	movs	r2, #0
 800c720:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c724:	2200      	movs	r2, #0
 800c726:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c72a:	220c      	movs	r2, #12
 800c72c:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c72e:	4b08      	ldr	r3, [pc, #32]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c730:	2200      	movs	r2, #0
 800c732:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c734:	4b06      	ldr	r3, [pc, #24]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c736:	2200      	movs	r2, #0
 800c738:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c73a:	4805      	ldr	r0, [pc, #20]	; (800c750 <MX_USART3_UART_Init+0x4c>)
 800c73c:	f001 f982 	bl	800da44 <HAL_UART_Init>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <MX_USART3_UART_Init+0x46>
	  {
	    Error_Handler();
 800c746:	f000 f8a7 	bl	800c898 <Error_Handler>
	  }
}
 800c74a:	bf00      	nop
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	2000008c 	.word	0x2000008c
 800c754:	40004800 	.word	0x40004800

0800c758 <MX_GPIO_Init>:

/**************************GPIO INIT*************************/

static void MX_GPIO_Init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b088      	sub	sp, #32
 800c75c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c75e:	f107 030c 	add.w	r3, r7, #12
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	605a      	str	r2, [r3, #4]
 800c768:	609a      	str	r2, [r3, #8]
 800c76a:	60da      	str	r2, [r3, #12]
 800c76c:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c76e:	2300      	movs	r3, #0
 800c770:	60bb      	str	r3, [r7, #8]
 800c772:	4b46      	ldr	r3, [pc, #280]	; (800c88c <MX_GPIO_Init+0x134>)
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	4a45      	ldr	r2, [pc, #276]	; (800c88c <MX_GPIO_Init+0x134>)
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	6313      	str	r3, [r2, #48]	; 0x30
 800c77e:	4b43      	ldr	r3, [pc, #268]	; (800c88c <MX_GPIO_Init+0x134>)
 800c780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	60bb      	str	r3, [r7, #8]
 800c788:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c78a:	2300      	movs	r3, #0
 800c78c:	607b      	str	r3, [r7, #4]
 800c78e:	4b3f      	ldr	r3, [pc, #252]	; (800c88c <MX_GPIO_Init+0x134>)
 800c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c792:	4a3e      	ldr	r2, [pc, #248]	; (800c88c <MX_GPIO_Init+0x134>)
 800c794:	f043 0308 	orr.w	r3, r3, #8
 800c798:	6313      	str	r3, [r2, #48]	; 0x30
 800c79a:	4b3c      	ldr	r3, [pc, #240]	; (800c88c <MX_GPIO_Init+0x134>)
 800c79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79e:	f003 0308 	and.w	r3, r3, #8
 800c7a2:	607b      	str	r3, [r7, #4]
 800c7a4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	4b38      	ldr	r3, [pc, #224]	; (800c88c <MX_GPIO_Init+0x134>)
 800c7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ae:	4a37      	ldr	r2, [pc, #220]	; (800c88c <MX_GPIO_Init+0x134>)
 800c7b0:	f043 0304 	orr.w	r3, r3, #4
 800c7b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7b6:	4b35      	ldr	r3, [pc, #212]	; (800c88c <MX_GPIO_Init+0x134>)
 800c7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c7c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c7ca:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7d0:	f107 030c 	add.w	r3, r7, #12
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	482e      	ldr	r0, [pc, #184]	; (800c890 <MX_GPIO_Init+0x138>)
 800c7d8:	f000 fb0c 	bl	800cdf4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PD12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c7dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7e0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c7ee:	f107 030c 	add.w	r3, r7, #12
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4827      	ldr	r0, [pc, #156]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c7f6:	f000 fafd 	bl	800cdf4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c800:	4824      	ldr	r0, [pc, #144]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c802:	f000 fc93 	bl	800d12c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c80a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c80c:	2301      	movs	r3, #1
 800c80e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c814:	2300      	movs	r3, #0
 800c816:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	4619      	mov	r1, r3
 800c81e:	481d      	ldr	r0, [pc, #116]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c820:	f000 fae8 	bl	800cdf4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800c824:	2200      	movs	r2, #0
 800c826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c82a:	481a      	ldr	r0, [pc, #104]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c82c:	f000 fc7e 	bl	800d12c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c834:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c836:	2301      	movs	r3, #1
 800c838:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c83e:	2300      	movs	r3, #0
 800c840:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c842:	f107 030c 	add.w	r3, r7, #12
 800c846:	4619      	mov	r1, r3
 800c848:	4812      	ldr	r0, [pc, #72]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c84a:	f000 fad3 	bl	800cdf4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800c84e:	2200      	movs	r2, #0
 800c850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c854:	480f      	ldr	r0, [pc, #60]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c856:	f000 fc69 	bl	800d12c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800c85a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c860:	2301      	movs	r3, #1
 800c862:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c864:	2300      	movs	r3, #0
 800c866:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c868:	2300      	movs	r3, #0
 800c86a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c86c:	f107 030c 	add.w	r3, r7, #12
 800c870:	4619      	mov	r1, r3
 800c872:	4808      	ldr	r0, [pc, #32]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c874:	f000 fabe 	bl	800cdf4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800c878:	2200      	movs	r2, #0
 800c87a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c87e:	4805      	ldr	r0, [pc, #20]	; (800c894 <MX_GPIO_Init+0x13c>)
 800c880:	f000 fc54 	bl	800d12c <HAL_GPIO_WritePin>

}
 800c884:	bf00      	nop
 800c886:	3720      	adds	r7, #32
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	40023800 	.word	0x40023800
 800c890:	40020000 	.word	0x40020000
 800c894:	40020c00 	.word	0x40020c00

0800c898 <Error_Handler>:



/**************************ERROR HANDLER*************************/
void Error_Handler(void)
{
 800c898:	b480      	push	{r7}
 800c89a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c89c:	b672      	cpsid	i
}
 800c89e:	bf00      	nop
	  __disable_irq();
	  while (1)
 800c8a0:	e7fe      	b.n	800c8a0 <Error_Handler+0x8>
	...

0800c8a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	4b10      	ldr	r3, [pc, #64]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	4a0f      	ldr	r2, [pc, #60]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8b8:	6453      	str	r3, [r2, #68]	; 0x44
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8c2:	607b      	str	r3, [r7, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	603b      	str	r3, [r7, #0]
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	4a08      	ldr	r2, [pc, #32]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c8d6:	4b06      	ldr	r3, [pc, #24]	; (800c8f0 <HAL_MspInit+0x4c>)
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8de:	603b      	str	r3, [r7, #0]
 800c8e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c8e2:	bf00      	nop
 800c8e4:	370c      	adds	r7, #12
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	40023800 	.word	0x40023800

0800c8f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08a      	sub	sp, #40	; 0x28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8fc:	f107 0314 	add.w	r3, r7, #20
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	605a      	str	r2, [r3, #4]
 800c906:	609a      	str	r2, [r3, #8]
 800c908:	60da      	str	r2, [r3, #12]
 800c90a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a19      	ldr	r2, [pc, #100]	; (800c978 <HAL_UART_MspInit+0x84>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d12c      	bne.n	800c970 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c916:	2300      	movs	r3, #0
 800c918:	613b      	str	r3, [r7, #16]
 800c91a:	4b18      	ldr	r3, [pc, #96]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	4a17      	ldr	r2, [pc, #92]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c924:	6413      	str	r3, [r2, #64]	; 0x40
 800c926:	4b15      	ldr	r3, [pc, #84]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c92e:	613b      	str	r3, [r7, #16]
 800c930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	4b11      	ldr	r3, [pc, #68]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93a:	4a10      	ldr	r2, [pc, #64]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c93c:	f043 0302 	orr.w	r3, r3, #2
 800c940:	6313      	str	r3, [r2, #48]	; 0x30
 800c942:	4b0e      	ldr	r3, [pc, #56]	; (800c97c <HAL_UART_MspInit+0x88>)
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	f003 0302 	and.w	r3, r3, #2
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c94e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c954:	2302      	movs	r3, #2
 800c956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c958:	2300      	movs	r3, #0
 800c95a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c95c:	2303      	movs	r3, #3
 800c95e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c960:	2307      	movs	r3, #7
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	4619      	mov	r1, r3
 800c96a:	4805      	ldr	r0, [pc, #20]	; (800c980 <HAL_UART_MspInit+0x8c>)
 800c96c:	f000 fa42 	bl	800cdf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c970:	bf00      	nop
 800c972:	3728      	adds	r7, #40	; 0x28
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	40004800 	.word	0x40004800
 800c97c:	40023800 	.word	0x40023800
 800c980:	40020400 	.word	0x40020400

0800c984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c988:	e7fe      	b.n	800c988 <NMI_Handler+0x4>

0800c98a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c98a:	b480      	push	{r7}
 800c98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c98e:	e7fe      	b.n	800c98e <HardFault_Handler+0x4>

0800c990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c990:	b480      	push	{r7}
 800c992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c994:	e7fe      	b.n	800c994 <MemManage_Handler+0x4>

0800c996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c996:	b480      	push	{r7}
 800c998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c99a:	e7fe      	b.n	800c99a <BusFault_Handler+0x4>

0800c99c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c99c:	b480      	push	{r7}
 800c99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c9a0:	e7fe      	b.n	800c9a0 <UsageFault_Handler+0x4>

0800c9a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c9a6:	bf00      	nop
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c9b4:	bf00      	nop
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c9c2:	bf00      	nop
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c9d0:	f000 f8ca 	bl	800cb68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c9d4:	bf00      	nop
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c9e0:	4a14      	ldr	r2, [pc, #80]	; (800ca34 <_sbrk+0x5c>)
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <_sbrk+0x60>)
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c9ec:	4b13      	ldr	r3, [pc, #76]	; (800ca3c <_sbrk+0x64>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d102      	bne.n	800c9fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c9f4:	4b11      	ldr	r3, [pc, #68]	; (800ca3c <_sbrk+0x64>)
 800c9f6:	4a12      	ldr	r2, [pc, #72]	; (800ca40 <_sbrk+0x68>)
 800c9f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c9fa:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <_sbrk+0x64>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4413      	add	r3, r2
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d207      	bcs.n	800ca18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ca08:	f001 fbde 	bl	800e1c8 <__errno>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	220c      	movs	r2, #12
 800ca10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ca12:	f04f 33ff 	mov.w	r3, #4294967295
 800ca16:	e009      	b.n	800ca2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ca18:	4b08      	ldr	r3, [pc, #32]	; (800ca3c <_sbrk+0x64>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ca1e:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <_sbrk+0x64>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	4a05      	ldr	r2, [pc, #20]	; (800ca3c <_sbrk+0x64>)
 800ca28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20020000 	.word	0x20020000
 800ca38:	00000400 	.word	0x00000400
 800ca3c:	200000d0 	.word	0x200000d0
 800ca40:	200000e8 	.word	0x200000e8

0800ca44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ca44:	b480      	push	{r7}
 800ca46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <SystemInit+0x24>)
 800ca4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca4e:	4a06      	ldr	r2, [pc, #24]	; (800ca68 <SystemInit+0x24>)
 800ca50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <SystemInit+0x24>)
 800ca5a:	4a04      	ldr	r2, [pc, #16]	; (800ca6c <SystemInit+0x28>)
 800ca5c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ca5e:	bf00      	nop
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	e000ed00 	.word	0xe000ed00
 800ca6c:	0800c000 	.word	0x0800c000

0800ca70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ca70:	f8df d034 	ldr.w	sp, [pc, #52]	; 800caa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ca74:	480d      	ldr	r0, [pc, #52]	; (800caac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ca76:	490e      	ldr	r1, [pc, #56]	; (800cab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ca78:	4a0e      	ldr	r2, [pc, #56]	; (800cab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ca7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ca7c:	e002      	b.n	800ca84 <LoopCopyDataInit>

0800ca7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ca7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ca80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ca82:	3304      	adds	r3, #4

0800ca84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ca84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ca86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ca88:	d3f9      	bcc.n	800ca7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ca8a:	4a0b      	ldr	r2, [pc, #44]	; (800cab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ca8c:	4c0b      	ldr	r4, [pc, #44]	; (800cabc <LoopFillZerobss+0x26>)
  movs r3, #0
 800ca8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ca90:	e001      	b.n	800ca96 <LoopFillZerobss>

0800ca92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ca92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ca94:	3204      	adds	r2, #4

0800ca96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ca96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ca98:	d3fb      	bcc.n	800ca92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ca9a:	f7ff ffd3 	bl	800ca44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ca9e:	f001 fb99 	bl	800e1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800caa2:	f7ff fd95 	bl	800c5d0 <main>
  bx  lr    
 800caa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800caa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800caac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cab0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800cab4:	0800eb88 	.word	0x0800eb88
  ldr r2, =_sbss
 800cab8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800cabc:	200000e8 	.word	0x200000e8

0800cac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cac0:	e7fe      	b.n	800cac0 <ADC_IRQHandler>
	...

0800cac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cac8:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <HAL_Init+0x40>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a0d      	ldr	r2, [pc, #52]	; (800cb04 <HAL_Init+0x40>)
 800cace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <HAL_Init+0x40>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a0a      	ldr	r2, [pc, #40]	; (800cb04 <HAL_Init+0x40>)
 800cada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cae0:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <HAL_Init+0x40>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a07      	ldr	r2, [pc, #28]	; (800cb04 <HAL_Init+0x40>)
 800cae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800caec:	2003      	movs	r0, #3
 800caee:	f000 f931 	bl	800cd54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800caf2:	200f      	movs	r0, #15
 800caf4:	f000 f808 	bl	800cb08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800caf8:	f7ff fed4 	bl	800c8a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	40023c00 	.word	0x40023c00

0800cb08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cb10:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <HAL_InitTick+0x54>)
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	4b12      	ldr	r3, [pc, #72]	; (800cb60 <HAL_InitTick+0x58>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f93b 	bl	800cda2 <HAL_SYSTICK_Config>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e00e      	b.n	800cb54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b0f      	cmp	r3, #15
 800cb3a:	d80a      	bhi.n	800cb52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	f000 f911 	bl	800cd6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cb48:	4a06      	ldr	r2, [pc, #24]	; (800cb64 <HAL_InitTick+0x5c>)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e000      	b.n	800cb54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20000000 	.word	0x20000000
 800cb60:	20000008 	.word	0x20000008
 800cb64:	20000004 	.word	0x20000004

0800cb68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cb6c:	4b06      	ldr	r3, [pc, #24]	; (800cb88 <HAL_IncTick+0x20>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <HAL_IncTick+0x24>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4413      	add	r3, r2
 800cb78:	4a04      	ldr	r2, [pc, #16]	; (800cb8c <HAL_IncTick+0x24>)
 800cb7a:	6013      	str	r3, [r2, #0]
}
 800cb7c:	bf00      	nop
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20000008 	.word	0x20000008
 800cb8c:	200000d4 	.word	0x200000d4

0800cb90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cb90:	b480      	push	{r7}
 800cb92:	af00      	add	r7, sp, #0
  return uwTick;
 800cb94:	4b03      	ldr	r3, [pc, #12]	; (800cba4 <HAL_GetTick+0x14>)
 800cb96:	681b      	ldr	r3, [r3, #0]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	200000d4 	.word	0x200000d4

0800cba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cbb0:	f7ff ffee 	bl	800cb90 <HAL_GetTick>
 800cbb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc0:	d005      	beq.n	800cbce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <HAL_Delay+0x44>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cbce:	bf00      	nop
 800cbd0:	f7ff ffde 	bl	800cb90 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d8f7      	bhi.n	800cbd0 <HAL_Delay+0x28>
  {
  }
}
 800cbe0:	bf00      	nop
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000008 	.word	0x20000008

0800cbf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f003 0307 	and.w	r3, r3, #7
 800cbfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cc00:	4b0c      	ldr	r3, [pc, #48]	; (800cc34 <__NVIC_SetPriorityGrouping+0x44>)
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cc18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cc1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cc22:	4a04      	ldr	r2, [pc, #16]	; (800cc34 <__NVIC_SetPriorityGrouping+0x44>)
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	60d3      	str	r3, [r2, #12]
}
 800cc28:	bf00      	nop
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	e000ed00 	.word	0xe000ed00

0800cc38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <__NVIC_GetPriorityGrouping+0x18>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	0a1b      	lsrs	r3, r3, #8
 800cc42:	f003 0307 	and.w	r3, r3, #7
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	e000ed00 	.word	0xe000ed00

0800cc54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	db0a      	blt.n	800cc7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	490c      	ldr	r1, [pc, #48]	; (800cca0 <__NVIC_SetPriority+0x4c>)
 800cc6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc72:	0112      	lsls	r2, r2, #4
 800cc74:	b2d2      	uxtb	r2, r2
 800cc76:	440b      	add	r3, r1
 800cc78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cc7c:	e00a      	b.n	800cc94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	4908      	ldr	r1, [pc, #32]	; (800cca4 <__NVIC_SetPriority+0x50>)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	f003 030f 	and.w	r3, r3, #15
 800cc8a:	3b04      	subs	r3, #4
 800cc8c:	0112      	lsls	r2, r2, #4
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	440b      	add	r3, r1
 800cc92:	761a      	strb	r2, [r3, #24]
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	e000e100 	.word	0xe000e100
 800cca4:	e000ed00 	.word	0xe000ed00

0800cca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	f1c3 0307 	rsb	r3, r3, #7
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	bf28      	it	cs
 800ccc6:	2304      	movcs	r3, #4
 800ccc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	3304      	adds	r3, #4
 800ccce:	2b06      	cmp	r3, #6
 800ccd0:	d902      	bls.n	800ccd8 <NVIC_EncodePriority+0x30>
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	3b03      	subs	r3, #3
 800ccd6:	e000      	b.n	800ccda <NVIC_EncodePriority+0x32>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	fa02 f303 	lsl.w	r3, r2, r3
 800cce6:	43da      	mvns	r2, r3
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	401a      	ands	r2, r3
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ccf0:	f04f 31ff 	mov.w	r1, #4294967295
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfa:	43d9      	mvns	r1, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cd00:	4313      	orrs	r3, r2
         );
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3724      	adds	r7, #36	; 0x24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
	...

0800cd10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cd20:	d301      	bcc.n	800cd26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cd22:	2301      	movs	r3, #1
 800cd24:	e00f      	b.n	800cd46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cd26:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <SysTick_Config+0x40>)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cd2e:	210f      	movs	r1, #15
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	f7ff ff8e 	bl	800cc54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cd38:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <SysTick_Config+0x40>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cd3e:	4b04      	ldr	r3, [pc, #16]	; (800cd50 <SysTick_Config+0x40>)
 800cd40:	2207      	movs	r2, #7
 800cd42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	e000e010 	.word	0xe000e010

0800cd54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7ff ff47 	bl	800cbf0 <__NVIC_SetPriorityGrouping>
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b086      	sub	sp, #24
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	4603      	mov	r3, r0
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
 800cd76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cd7c:	f7ff ff5c 	bl	800cc38 <__NVIC_GetPriorityGrouping>
 800cd80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	6978      	ldr	r0, [r7, #20]
 800cd88:	f7ff ff8e 	bl	800cca8 <NVIC_EncodePriority>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff ff5d 	bl	800cc54 <__NVIC_SetPriority>
}
 800cd9a:	bf00      	nop
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b082      	sub	sp, #8
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff ffb0 	bl	800cd10 <SysTick_Config>
 800cdb0:	4603      	mov	r3, r0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b04      	cmp	r3, #4
 800cdc8:	d106      	bne.n	800cdd8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a08      	ldr	r2, [pc, #32]	; (800cdf0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800cdd0:	f043 0304 	orr.w	r3, r3, #4
 800cdd4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800cdd6:	e005      	b.n	800cde4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a04      	ldr	r2, [pc, #16]	; (800cdf0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800cdde:	f023 0304 	bic.w	r3, r3, #4
 800cde2:	6013      	str	r3, [r2, #0]
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	e000e010 	.word	0xe000e010

0800cdf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b089      	sub	sp, #36	; 0x24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61fb      	str	r3, [r7, #28]
 800ce0e:	e16b      	b.n	800d0e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ce10:	2201      	movs	r2, #1
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4013      	ands	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	f040 815a 	bne.w	800d0e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d005      	beq.n	800ce46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d130      	bne.n	800cea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	2203      	movs	r2, #3
 800ce52:	fa02 f303 	lsl.w	r3, r2, r3
 800ce56:	43db      	mvns	r3, r3
 800ce58:	69ba      	ldr	r2, [r7, #24]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6a:	69ba      	ldr	r2, [r7, #24]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	69ba      	ldr	r2, [r7, #24]
 800ce74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	43db      	mvns	r3, r3
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	091b      	lsrs	r3, r3, #4
 800ce92:	f003 0201 	and.w	r2, r3, #1
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	69ba      	ldr	r2, [r7, #24]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f003 0303 	and.w	r3, r3, #3
 800ceb0:	2b03      	cmp	r3, #3
 800ceb2:	d017      	beq.n	800cee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	2203      	movs	r2, #3
 800cec0:	fa02 f303 	lsl.w	r3, r2, r3
 800cec4:	43db      	mvns	r3, r3
 800cec6:	69ba      	ldr	r2, [r7, #24]
 800cec8:	4013      	ands	r3, r2
 800ceca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	689a      	ldr	r2, [r3, #8]
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	69ba      	ldr	r2, [r7, #24]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	69ba      	ldr	r2, [r7, #24]
 800cee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	f003 0303 	and.w	r3, r3, #3
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d123      	bne.n	800cf38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	08da      	lsrs	r2, r3, #3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3208      	adds	r2, #8
 800cef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	f003 0307 	and.w	r3, r3, #7
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	220f      	movs	r2, #15
 800cf08:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0c:	43db      	mvns	r3, r3
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	4013      	ands	r3, r2
 800cf12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	691a      	ldr	r2, [r3, #16]
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	f003 0307 	and.w	r3, r3, #7
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	fa02 f303 	lsl.w	r3, r2, r3
 800cf24:	69ba      	ldr	r2, [r7, #24]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	08da      	lsrs	r2, r3, #3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3208      	adds	r2, #8
 800cf32:	69b9      	ldr	r1, [r7, #24]
 800cf34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	2203      	movs	r2, #3
 800cf44:	fa02 f303 	lsl.w	r3, r2, r3
 800cf48:	43db      	mvns	r3, r3
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	f003 0203 	and.w	r2, r3, #3
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	69ba      	ldr	r2, [r7, #24]
 800cf6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 80b4 	beq.w	800d0e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60fb      	str	r3, [r7, #12]
 800cf7e:	4b60      	ldr	r3, [pc, #384]	; (800d100 <HAL_GPIO_Init+0x30c>)
 800cf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf82:	4a5f      	ldr	r2, [pc, #380]	; (800d100 <HAL_GPIO_Init+0x30c>)
 800cf84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf88:	6453      	str	r3, [r2, #68]	; 0x44
 800cf8a:	4b5d      	ldr	r3, [pc, #372]	; (800d100 <HAL_GPIO_Init+0x30c>)
 800cf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cf96:	4a5b      	ldr	r2, [pc, #364]	; (800d104 <HAL_GPIO_Init+0x310>)
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	089b      	lsrs	r3, r3, #2
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f003 0303 	and.w	r3, r3, #3
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	220f      	movs	r2, #15
 800cfae:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb2:	43db      	mvns	r3, r3
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a52      	ldr	r2, [pc, #328]	; (800d108 <HAL_GPIO_Init+0x314>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d02b      	beq.n	800d01a <HAL_GPIO_Init+0x226>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a51      	ldr	r2, [pc, #324]	; (800d10c <HAL_GPIO_Init+0x318>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d025      	beq.n	800d016 <HAL_GPIO_Init+0x222>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a50      	ldr	r2, [pc, #320]	; (800d110 <HAL_GPIO_Init+0x31c>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d01f      	beq.n	800d012 <HAL_GPIO_Init+0x21e>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a4f      	ldr	r2, [pc, #316]	; (800d114 <HAL_GPIO_Init+0x320>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d019      	beq.n	800d00e <HAL_GPIO_Init+0x21a>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a4e      	ldr	r2, [pc, #312]	; (800d118 <HAL_GPIO_Init+0x324>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d013      	beq.n	800d00a <HAL_GPIO_Init+0x216>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a4d      	ldr	r2, [pc, #308]	; (800d11c <HAL_GPIO_Init+0x328>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d00d      	beq.n	800d006 <HAL_GPIO_Init+0x212>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a4c      	ldr	r2, [pc, #304]	; (800d120 <HAL_GPIO_Init+0x32c>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d007      	beq.n	800d002 <HAL_GPIO_Init+0x20e>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a4b      	ldr	r2, [pc, #300]	; (800d124 <HAL_GPIO_Init+0x330>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d101      	bne.n	800cffe <HAL_GPIO_Init+0x20a>
 800cffa:	2307      	movs	r3, #7
 800cffc:	e00e      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800cffe:	2308      	movs	r3, #8
 800d000:	e00c      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d002:	2306      	movs	r3, #6
 800d004:	e00a      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d006:	2305      	movs	r3, #5
 800d008:	e008      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d00a:	2304      	movs	r3, #4
 800d00c:	e006      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d00e:	2303      	movs	r3, #3
 800d010:	e004      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d012:	2302      	movs	r3, #2
 800d014:	e002      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <HAL_GPIO_Init+0x228>
 800d01a:	2300      	movs	r3, #0
 800d01c:	69fa      	ldr	r2, [r7, #28]
 800d01e:	f002 0203 	and.w	r2, r2, #3
 800d022:	0092      	lsls	r2, r2, #2
 800d024:	4093      	lsls	r3, r2
 800d026:	69ba      	ldr	r2, [r7, #24]
 800d028:	4313      	orrs	r3, r2
 800d02a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d02c:	4935      	ldr	r1, [pc, #212]	; (800d104 <HAL_GPIO_Init+0x310>)
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	089b      	lsrs	r3, r3, #2
 800d032:	3302      	adds	r3, #2
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d03a:	4b3b      	ldr	r3, [pc, #236]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	43db      	mvns	r3, r3
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	4013      	ands	r3, r2
 800d048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d05e:	4a32      	ldr	r2, [pc, #200]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d064:	4b30      	ldr	r3, [pc, #192]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	43db      	mvns	r3, r3
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	4013      	ands	r3, r2
 800d072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d003      	beq.n	800d088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	4313      	orrs	r3, r2
 800d086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d088:	4a27      	ldr	r2, [pc, #156]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d08e:	4b26      	ldr	r3, [pc, #152]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	43db      	mvns	r3, r3
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	4013      	ands	r3, r2
 800d09c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d0b2:	4a1d      	ldr	r2, [pc, #116]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d0b8:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	43db      	mvns	r3, r3
 800d0c2:	69ba      	ldr	r2, [r7, #24]
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d0dc:	4a12      	ldr	r2, [pc, #72]	; (800d128 <HAL_GPIO_Init+0x334>)
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	61fb      	str	r3, [r7, #28]
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	2b0f      	cmp	r3, #15
 800d0ec:	f67f ae90 	bls.w	800ce10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	3724      	adds	r7, #36	; 0x24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	40023800 	.word	0x40023800
 800d104:	40013800 	.word	0x40013800
 800d108:	40020000 	.word	0x40020000
 800d10c:	40020400 	.word	0x40020400
 800d110:	40020800 	.word	0x40020800
 800d114:	40020c00 	.word	0x40020c00
 800d118:	40021000 	.word	0x40021000
 800d11c:	40021400 	.word	0x40021400
 800d120:	40021800 	.word	0x40021800
 800d124:	40021c00 	.word	0x40021c00
 800d128:	40013c00 	.word	0x40013c00

0800d12c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	807b      	strh	r3, [r7, #2]
 800d138:	4613      	mov	r3, r2
 800d13a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d13c:	787b      	ldrb	r3, [r7, #1]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d142:	887a      	ldrh	r2, [r7, #2]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d148:	e003      	b.n	800d152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d14a:	887b      	ldrh	r3, [r7, #2]
 800d14c:	041a      	lsls	r2, r3, #16
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	619a      	str	r2, [r3, #24]
}
 800d152:	bf00      	nop
 800d154:	370c      	adds	r7, #12
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d15e:	b480      	push	{r7}
 800d160:	b085      	sub	sp, #20
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d170:	887a      	ldrh	r2, [r7, #2]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4013      	ands	r3, r2
 800d176:	041a      	lsls	r2, r3, #16
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	43d9      	mvns	r1, r3
 800d17c:	887b      	ldrh	r3, [r7, #2]
 800d17e:	400b      	ands	r3, r1
 800d180:	431a      	orrs	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	619a      	str	r2, [r3, #24]
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
	...

0800d194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e267      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d075      	beq.n	800d29e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d1b2:	4b88      	ldr	r3, [pc, #544]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	f003 030c 	and.w	r3, r3, #12
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d00c      	beq.n	800d1d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d1be:	4b85      	ldr	r3, [pc, #532]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d112      	bne.n	800d1f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d1ca:	4b82      	ldr	r3, [pc, #520]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1d6:	d10b      	bne.n	800d1f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1d8:	4b7e      	ldr	r3, [pc, #504]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d05b      	beq.n	800d29c <HAL_RCC_OscConfig+0x108>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d157      	bne.n	800d29c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e242      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1f8:	d106      	bne.n	800d208 <HAL_RCC_OscConfig+0x74>
 800d1fa:	4b76      	ldr	r3, [pc, #472]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a75      	ldr	r2, [pc, #468]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	e01d      	b.n	800d244 <HAL_RCC_OscConfig+0xb0>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d210:	d10c      	bne.n	800d22c <HAL_RCC_OscConfig+0x98>
 800d212:	4b70      	ldr	r3, [pc, #448]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a6f      	ldr	r2, [pc, #444]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	4b6d      	ldr	r3, [pc, #436]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a6c      	ldr	r2, [pc, #432]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	e00b      	b.n	800d244 <HAL_RCC_OscConfig+0xb0>
 800d22c:	4b69      	ldr	r3, [pc, #420]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a68      	ldr	r2, [pc, #416]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	4b66      	ldr	r3, [pc, #408]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a65      	ldr	r2, [pc, #404]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d23e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d013      	beq.n	800d274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d24c:	f7ff fca0 	bl	800cb90 <HAL_GetTick>
 800d250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d252:	e008      	b.n	800d266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d254:	f7ff fc9c 	bl	800cb90 <HAL_GetTick>
 800d258:	4602      	mov	r2, r0
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	2b64      	cmp	r3, #100	; 0x64
 800d260:	d901      	bls.n	800d266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d262:	2303      	movs	r3, #3
 800d264:	e207      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d266:	4b5b      	ldr	r3, [pc, #364]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d0f0      	beq.n	800d254 <HAL_RCC_OscConfig+0xc0>
 800d272:	e014      	b.n	800d29e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d274:	f7ff fc8c 	bl	800cb90 <HAL_GetTick>
 800d278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d27a:	e008      	b.n	800d28e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d27c:	f7ff fc88 	bl	800cb90 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b64      	cmp	r3, #100	; 0x64
 800d288:	d901      	bls.n	800d28e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e1f3      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d28e:	4b51      	ldr	r3, [pc, #324]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1f0      	bne.n	800d27c <HAL_RCC_OscConfig+0xe8>
 800d29a:	e000      	b.n	800d29e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d29c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 0302 	and.w	r3, r3, #2
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d063      	beq.n	800d372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2aa:	4b4a      	ldr	r3, [pc, #296]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	f003 030c 	and.w	r3, r3, #12
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00b      	beq.n	800d2ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d2b6:	4b47      	ldr	r3, [pc, #284]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2be:	2b08      	cmp	r3, #8
 800d2c0:	d11c      	bne.n	800d2fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d2c2:	4b44      	ldr	r3, [pc, #272]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d116      	bne.n	800d2fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d2ce:	4b41      	ldr	r3, [pc, #260]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d005      	beq.n	800d2e6 <HAL_RCC_OscConfig+0x152>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d001      	beq.n	800d2e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e1c7      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2e6:	4b3b      	ldr	r3, [pc, #236]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	691b      	ldr	r3, [r3, #16]
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	4937      	ldr	r1, [pc, #220]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d2fa:	e03a      	b.n	800d372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d020      	beq.n	800d346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d304:	4b34      	ldr	r3, [pc, #208]	; (800d3d8 <HAL_RCC_OscConfig+0x244>)
 800d306:	2201      	movs	r2, #1
 800d308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d30a:	f7ff fc41 	bl	800cb90 <HAL_GetTick>
 800d30e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d310:	e008      	b.n	800d324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d312:	f7ff fc3d 	bl	800cb90 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d901      	bls.n	800d324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d320:	2303      	movs	r3, #3
 800d322:	e1a8      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d324:	4b2b      	ldr	r3, [pc, #172]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0f0      	beq.n	800d312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d330:	4b28      	ldr	r3, [pc, #160]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	691b      	ldr	r3, [r3, #16]
 800d33c:	00db      	lsls	r3, r3, #3
 800d33e:	4925      	ldr	r1, [pc, #148]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d340:	4313      	orrs	r3, r2
 800d342:	600b      	str	r3, [r1, #0]
 800d344:	e015      	b.n	800d372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d346:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <HAL_RCC_OscConfig+0x244>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d34c:	f7ff fc20 	bl	800cb90 <HAL_GetTick>
 800d350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d352:	e008      	b.n	800d366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d354:	f7ff fc1c 	bl	800cb90 <HAL_GetTick>
 800d358:	4602      	mov	r2, r0
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d901      	bls.n	800d366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d362:	2303      	movs	r3, #3
 800d364:	e187      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d366:	4b1b      	ldr	r3, [pc, #108]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1f0      	bne.n	800d354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0308 	and.w	r3, r3, #8
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d036      	beq.n	800d3ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d016      	beq.n	800d3b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d386:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <HAL_RCC_OscConfig+0x248>)
 800d388:	2201      	movs	r2, #1
 800d38a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d38c:	f7ff fc00 	bl	800cb90 <HAL_GetTick>
 800d390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d392:	e008      	b.n	800d3a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d394:	f7ff fbfc 	bl	800cb90 <HAL_GetTick>
 800d398:	4602      	mov	r2, r0
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d901      	bls.n	800d3a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e167      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <HAL_RCC_OscConfig+0x240>)
 800d3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0f0      	beq.n	800d394 <HAL_RCC_OscConfig+0x200>
 800d3b2:	e01b      	b.n	800d3ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <HAL_RCC_OscConfig+0x248>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d3ba:	f7ff fbe9 	bl	800cb90 <HAL_GetTick>
 800d3be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d3c0:	e00e      	b.n	800d3e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d3c2:	f7ff fbe5 	bl	800cb90 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d907      	bls.n	800d3e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e150      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
 800d3d4:	40023800 	.word	0x40023800
 800d3d8:	42470000 	.word	0x42470000
 800d3dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d3e0:	4b88      	ldr	r3, [pc, #544]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1ea      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8097 	beq.w	800d528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d3fe:	4b81      	ldr	r3, [pc, #516]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10f      	bne.n	800d42a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d40a:	2300      	movs	r3, #0
 800d40c:	60bb      	str	r3, [r7, #8]
 800d40e:	4b7d      	ldr	r3, [pc, #500]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d412:	4a7c      	ldr	r2, [pc, #496]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d418:	6413      	str	r3, [r2, #64]	; 0x40
 800d41a:	4b7a      	ldr	r3, [pc, #488]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d422:	60bb      	str	r3, [r7, #8]
 800d424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d426:	2301      	movs	r3, #1
 800d428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d42a:	4b77      	ldr	r3, [pc, #476]	; (800d608 <HAL_RCC_OscConfig+0x474>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d432:	2b00      	cmp	r3, #0
 800d434:	d118      	bne.n	800d468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d436:	4b74      	ldr	r3, [pc, #464]	; (800d608 <HAL_RCC_OscConfig+0x474>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a73      	ldr	r2, [pc, #460]	; (800d608 <HAL_RCC_OscConfig+0x474>)
 800d43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d442:	f7ff fba5 	bl	800cb90 <HAL_GetTick>
 800d446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d448:	e008      	b.n	800d45c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d44a:	f7ff fba1 	bl	800cb90 <HAL_GetTick>
 800d44e:	4602      	mov	r2, r0
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	2b02      	cmp	r3, #2
 800d456:	d901      	bls.n	800d45c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e10c      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d45c:	4b6a      	ldr	r3, [pc, #424]	; (800d608 <HAL_RCC_OscConfig+0x474>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d464:	2b00      	cmp	r3, #0
 800d466:	d0f0      	beq.n	800d44a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d106      	bne.n	800d47e <HAL_RCC_OscConfig+0x2ea>
 800d470:	4b64      	ldr	r3, [pc, #400]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d474:	4a63      	ldr	r2, [pc, #396]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d476:	f043 0301 	orr.w	r3, r3, #1
 800d47a:	6713      	str	r3, [r2, #112]	; 0x70
 800d47c:	e01c      	b.n	800d4b8 <HAL_RCC_OscConfig+0x324>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	2b05      	cmp	r3, #5
 800d484:	d10c      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x30c>
 800d486:	4b5f      	ldr	r3, [pc, #380]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48a:	4a5e      	ldr	r2, [pc, #376]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d48c:	f043 0304 	orr.w	r3, r3, #4
 800d490:	6713      	str	r3, [r2, #112]	; 0x70
 800d492:	4b5c      	ldr	r3, [pc, #368]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d496:	4a5b      	ldr	r2, [pc, #364]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d498:	f043 0301 	orr.w	r3, r3, #1
 800d49c:	6713      	str	r3, [r2, #112]	; 0x70
 800d49e:	e00b      	b.n	800d4b8 <HAL_RCC_OscConfig+0x324>
 800d4a0:	4b58      	ldr	r3, [pc, #352]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a4:	4a57      	ldr	r2, [pc, #348]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d4a6:	f023 0301 	bic.w	r3, r3, #1
 800d4aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d4ac:	4b55      	ldr	r3, [pc, #340]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b0:	4a54      	ldr	r2, [pc, #336]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d4b2:	f023 0304 	bic.w	r3, r3, #4
 800d4b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d015      	beq.n	800d4ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4c0:	f7ff fb66 	bl	800cb90 <HAL_GetTick>
 800d4c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4c6:	e00a      	b.n	800d4de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4c8:	f7ff fb62 	bl	800cb90 <HAL_GetTick>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d901      	bls.n	800d4de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e0cb      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4de:	4b49      	ldr	r3, [pc, #292]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4e2:	f003 0302 	and.w	r3, r3, #2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0ee      	beq.n	800d4c8 <HAL_RCC_OscConfig+0x334>
 800d4ea:	e014      	b.n	800d516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d4ec:	f7ff fb50 	bl	800cb90 <HAL_GetTick>
 800d4f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d4f2:	e00a      	b.n	800d50a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4f4:	f7ff fb4c 	bl	800cb90 <HAL_GetTick>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800d502:	4293      	cmp	r3, r2
 800d504:	d901      	bls.n	800d50a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d506:	2303      	movs	r3, #3
 800d508:	e0b5      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d50a:	4b3e      	ldr	r3, [pc, #248]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1ee      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d105      	bne.n	800d528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d51c:	4b39      	ldr	r3, [pc, #228]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d520:	4a38      	ldr	r2, [pc, #224]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80a1 	beq.w	800d674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d532:	4b34      	ldr	r3, [pc, #208]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f003 030c 	and.w	r3, r3, #12
 800d53a:	2b08      	cmp	r3, #8
 800d53c:	d05c      	beq.n	800d5f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d141      	bne.n	800d5ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d546:	4b31      	ldr	r3, [pc, #196]	; (800d60c <HAL_RCC_OscConfig+0x478>)
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d54c:	f7ff fb20 	bl	800cb90 <HAL_GetTick>
 800d550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d552:	e008      	b.n	800d566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d554:	f7ff fb1c 	bl	800cb90 <HAL_GetTick>
 800d558:	4602      	mov	r2, r0
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d901      	bls.n	800d566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d562:	2303      	movs	r3, #3
 800d564:	e087      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d566:	4b27      	ldr	r3, [pc, #156]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1f0      	bne.n	800d554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	69da      	ldr	r2, [r3, #28]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	431a      	orrs	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	019b      	lsls	r3, r3, #6
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d588:	085b      	lsrs	r3, r3, #1
 800d58a:	3b01      	subs	r3, #1
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	431a      	orrs	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	061b      	lsls	r3, r3, #24
 800d596:	491b      	ldr	r1, [pc, #108]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d598:	4313      	orrs	r3, r2
 800d59a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <HAL_RCC_OscConfig+0x478>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5a2:	f7ff faf5 	bl	800cb90 <HAL_GetTick>
 800d5a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5a8:	e008      	b.n	800d5bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5aa:	f7ff faf1 	bl	800cb90 <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d901      	bls.n	800d5bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e05c      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5bc:	4b11      	ldr	r3, [pc, #68]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0f0      	beq.n	800d5aa <HAL_RCC_OscConfig+0x416>
 800d5c8:	e054      	b.n	800d674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5ca:	4b10      	ldr	r3, [pc, #64]	; (800d60c <HAL_RCC_OscConfig+0x478>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5d0:	f7ff fade 	bl	800cb90 <HAL_GetTick>
 800d5d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5d6:	e008      	b.n	800d5ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5d8:	f7ff fada 	bl	800cb90 <HAL_GetTick>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d901      	bls.n	800d5ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	e045      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5ea:	4b06      	ldr	r3, [pc, #24]	; (800d604 <HAL_RCC_OscConfig+0x470>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1f0      	bne.n	800d5d8 <HAL_RCC_OscConfig+0x444>
 800d5f6:	e03d      	b.n	800d674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	699b      	ldr	r3, [r3, #24]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d107      	bne.n	800d610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e038      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
 800d604:	40023800 	.word	0x40023800
 800d608:	40007000 	.word	0x40007000
 800d60c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d610:	4b1b      	ldr	r3, [pc, #108]	; (800d680 <HAL_RCC_OscConfig+0x4ec>)
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d028      	beq.n	800d670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d628:	429a      	cmp	r2, r3
 800d62a:	d121      	bne.n	800d670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d636:	429a      	cmp	r2, r3
 800d638:	d11a      	bne.n	800d670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d640:	4013      	ands	r3, r2
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d648:	4293      	cmp	r3, r2
 800d64a:	d111      	bne.n	800d670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d656:	085b      	lsrs	r3, r3, #1
 800d658:	3b01      	subs	r3, #1
 800d65a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d107      	bne.n	800d670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d001      	beq.n	800d674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	e000      	b.n	800d676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3718      	adds	r7, #24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	40023800 	.word	0x40023800

0800d684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e0cc      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d698:	4b68      	ldr	r3, [pc, #416]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 0307 	and.w	r3, r3, #7
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d90c      	bls.n	800d6c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6a6:	4b65      	ldr	r3, [pc, #404]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ae:	4b63      	ldr	r3, [pc, #396]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d001      	beq.n	800d6c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e0b8      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d020      	beq.n	800d70e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 0304 	and.w	r3, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d005      	beq.n	800d6e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d6d8:	4b59      	ldr	r3, [pc, #356]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	4a58      	ldr	r2, [pc, #352]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d6de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d6e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f003 0308 	and.w	r3, r3, #8
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d6f0:	4b53      	ldr	r3, [pc, #332]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	4a52      	ldr	r2, [pc, #328]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d6fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d6fc:	4b50      	ldr	r3, [pc, #320]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	494d      	ldr	r1, [pc, #308]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d70a:	4313      	orrs	r3, r2
 800d70c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d044      	beq.n	800d7a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d107      	bne.n	800d732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d722:	4b47      	ldr	r3, [pc, #284]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d119      	bne.n	800d762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e07f      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	2b02      	cmp	r3, #2
 800d738:	d003      	beq.n	800d742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d107      	bne.n	800d752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d742:	4b3f      	ldr	r3, [pc, #252]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d109      	bne.n	800d762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e06f      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d752:	4b3b      	ldr	r3, [pc, #236]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e067      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d762:	4b37      	ldr	r3, [pc, #220]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	f023 0203 	bic.w	r2, r3, #3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	4934      	ldr	r1, [pc, #208]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d770:	4313      	orrs	r3, r2
 800d772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d774:	f7ff fa0c 	bl	800cb90 <HAL_GetTick>
 800d778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d77a:	e00a      	b.n	800d792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d77c:	f7ff fa08 	bl	800cb90 <HAL_GetTick>
 800d780:	4602      	mov	r2, r0
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	f241 3288 	movw	r2, #5000	; 0x1388
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d901      	bls.n	800d792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	e04f      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d792:	4b2b      	ldr	r3, [pc, #172]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 020c 	and.w	r2, r3, #12
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d1eb      	bne.n	800d77c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d7a4:	4b25      	ldr	r3, [pc, #148]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 0307 	and.w	r3, r3, #7
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d20c      	bcs.n	800d7cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7b2:	4b22      	ldr	r3, [pc, #136]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	b2d2      	uxtb	r2, r2
 800d7b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7ba:	4b20      	ldr	r3, [pc, #128]	; (800d83c <HAL_RCC_ClockConfig+0x1b8>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d001      	beq.n	800d7cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e032      	b.n	800d832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 0304 	and.w	r3, r3, #4
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d008      	beq.n	800d7ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7d8:	4b19      	ldr	r3, [pc, #100]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	4916      	ldr	r1, [pc, #88]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f003 0308 	and.w	r3, r3, #8
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d009      	beq.n	800d80a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7f6:	4b12      	ldr	r3, [pc, #72]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	490e      	ldr	r1, [pc, #56]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d806:	4313      	orrs	r3, r2
 800d808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d80a:	f000 f821 	bl	800d850 <HAL_RCC_GetSysClockFreq>
 800d80e:	4602      	mov	r2, r0
 800d810:	4b0b      	ldr	r3, [pc, #44]	; (800d840 <HAL_RCC_ClockConfig+0x1bc>)
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	091b      	lsrs	r3, r3, #4
 800d816:	f003 030f 	and.w	r3, r3, #15
 800d81a:	490a      	ldr	r1, [pc, #40]	; (800d844 <HAL_RCC_ClockConfig+0x1c0>)
 800d81c:	5ccb      	ldrb	r3, [r1, r3]
 800d81e:	fa22 f303 	lsr.w	r3, r2, r3
 800d822:	4a09      	ldr	r2, [pc, #36]	; (800d848 <HAL_RCC_ClockConfig+0x1c4>)
 800d824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d826:	4b09      	ldr	r3, [pc, #36]	; (800d84c <HAL_RCC_ClockConfig+0x1c8>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff f96c 	bl	800cb08 <HAL_InitTick>

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	40023c00 	.word	0x40023c00
 800d840:	40023800 	.word	0x40023800
 800d844:	0800eb2c 	.word	0x0800eb2c
 800d848:	20000000 	.word	0x20000000
 800d84c:	20000004 	.word	0x20000004

0800d850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d854:	b090      	sub	sp, #64	; 0x40
 800d856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d858:	2300      	movs	r3, #0
 800d85a:	637b      	str	r3, [r7, #52]	; 0x34
 800d85c:	2300      	movs	r3, #0
 800d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d860:	2300      	movs	r3, #0
 800d862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d868:	4b59      	ldr	r3, [pc, #356]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	f003 030c 	and.w	r3, r3, #12
 800d870:	2b08      	cmp	r3, #8
 800d872:	d00d      	beq.n	800d890 <HAL_RCC_GetSysClockFreq+0x40>
 800d874:	2b08      	cmp	r3, #8
 800d876:	f200 80a1 	bhi.w	800d9bc <HAL_RCC_GetSysClockFreq+0x16c>
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <HAL_RCC_GetSysClockFreq+0x34>
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d003      	beq.n	800d88a <HAL_RCC_GetSysClockFreq+0x3a>
 800d882:	e09b      	b.n	800d9bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d884:	4b53      	ldr	r3, [pc, #332]	; (800d9d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800d886:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800d888:	e09b      	b.n	800d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d88a:	4b53      	ldr	r3, [pc, #332]	; (800d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800d88c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d88e:	e098      	b.n	800d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d890:	4b4f      	ldr	r3, [pc, #316]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d898:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d89a:	4b4d      	ldr	r3, [pc, #308]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d028      	beq.n	800d8f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d8a6:	4b4a      	ldr	r3, [pc, #296]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	099b      	lsrs	r3, r3, #6
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	623b      	str	r3, [r7, #32]
 800d8b0:	627a      	str	r2, [r7, #36]	; 0x24
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
 800d8b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4b47      	ldr	r3, [pc, #284]	; (800d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800d8bc:	fb03 f201 	mul.w	r2, r3, r1
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	fb00 f303 	mul.w	r3, r0, r3
 800d8c6:	4413      	add	r3, r2
 800d8c8:	4a43      	ldr	r2, [pc, #268]	; (800d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800d8ca:	fba0 1202 	umull	r1, r2, r0, r2
 800d8ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8d0:	460a      	mov	r2, r1
 800d8d2:	62ba      	str	r2, [r7, #40]	; 0x28
 800d8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8d6:	4413      	add	r3, r2
 800d8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8dc:	2200      	movs	r2, #0
 800d8de:	61bb      	str	r3, [r7, #24]
 800d8e0:	61fa      	str	r2, [r7, #28]
 800d8e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d8e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d8ea:	f7fe fcc9 	bl	800c280 <__aeabi_uldivmod>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8f6:	e053      	b.n	800d9a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d8f8:	4b35      	ldr	r3, [pc, #212]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	099b      	lsrs	r3, r3, #6
 800d8fe:	2200      	movs	r2, #0
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	617a      	str	r2, [r7, #20]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d90a:	f04f 0b00 	mov.w	fp, #0
 800d90e:	4652      	mov	r2, sl
 800d910:	465b      	mov	r3, fp
 800d912:	f04f 0000 	mov.w	r0, #0
 800d916:	f04f 0100 	mov.w	r1, #0
 800d91a:	0159      	lsls	r1, r3, #5
 800d91c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d920:	0150      	lsls	r0, r2, #5
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	ebb2 080a 	subs.w	r8, r2, sl
 800d92a:	eb63 090b 	sbc.w	r9, r3, fp
 800d92e:	f04f 0200 	mov.w	r2, #0
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d93a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d93e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d942:	ebb2 0408 	subs.w	r4, r2, r8
 800d946:	eb63 0509 	sbc.w	r5, r3, r9
 800d94a:	f04f 0200 	mov.w	r2, #0
 800d94e:	f04f 0300 	mov.w	r3, #0
 800d952:	00eb      	lsls	r3, r5, #3
 800d954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d958:	00e2      	lsls	r2, r4, #3
 800d95a:	4614      	mov	r4, r2
 800d95c:	461d      	mov	r5, r3
 800d95e:	eb14 030a 	adds.w	r3, r4, sl
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	eb45 030b 	adc.w	r3, r5, fp
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	f04f 0200 	mov.w	r2, #0
 800d96e:	f04f 0300 	mov.w	r3, #0
 800d972:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d976:	4629      	mov	r1, r5
 800d978:	028b      	lsls	r3, r1, #10
 800d97a:	4621      	mov	r1, r4
 800d97c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d980:	4621      	mov	r1, r4
 800d982:	028a      	lsls	r2, r1, #10
 800d984:	4610      	mov	r0, r2
 800d986:	4619      	mov	r1, r3
 800d988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d98a:	2200      	movs	r2, #0
 800d98c:	60bb      	str	r3, [r7, #8]
 800d98e:	60fa      	str	r2, [r7, #12]
 800d990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d994:	f7fe fc74 	bl	800c280 <__aeabi_uldivmod>
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	4613      	mov	r3, r2
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	; (800d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	0c1b      	lsrs	r3, r3, #16
 800d9a6:	f003 0303 	and.w	r3, r3, #3
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	005b      	lsls	r3, r3, #1
 800d9ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800d9b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d9ba:	e002      	b.n	800d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d9bc:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800d9be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d9c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3740      	adds	r7, #64	; 0x40
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9ce:	bf00      	nop
 800d9d0:	40023800 	.word	0x40023800
 800d9d4:	00f42400 	.word	0x00f42400
 800d9d8:	017d7840 	.word	0x017d7840

0800d9dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d9e0:	4b03      	ldr	r3, [pc, #12]	; (800d9f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	20000000 	.word	0x20000000

0800d9f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d9f8:	f7ff fff0 	bl	800d9dc <HAL_RCC_GetHCLKFreq>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	4b05      	ldr	r3, [pc, #20]	; (800da14 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	0a9b      	lsrs	r3, r3, #10
 800da04:	f003 0307 	and.w	r3, r3, #7
 800da08:	4903      	ldr	r1, [pc, #12]	; (800da18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800da0a:	5ccb      	ldrb	r3, [r1, r3]
 800da0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da10:	4618      	mov	r0, r3
 800da12:	bd80      	pop	{r7, pc}
 800da14:	40023800 	.word	0x40023800
 800da18:	0800eb3c 	.word	0x0800eb3c

0800da1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800da20:	f7ff ffdc 	bl	800d9dc <HAL_RCC_GetHCLKFreq>
 800da24:	4602      	mov	r2, r0
 800da26:	4b05      	ldr	r3, [pc, #20]	; (800da3c <HAL_RCC_GetPCLK2Freq+0x20>)
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	0b5b      	lsrs	r3, r3, #13
 800da2c:	f003 0307 	and.w	r3, r3, #7
 800da30:	4903      	ldr	r1, [pc, #12]	; (800da40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800da32:	5ccb      	ldrb	r3, [r1, r3]
 800da34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da38:	4618      	mov	r0, r3
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	40023800 	.word	0x40023800
 800da40:	0800eb3c 	.word	0x0800eb3c

0800da44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da52:	2301      	movs	r3, #1
 800da54:	e03f      	b.n	800dad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7fe ff42 	bl	800c8f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2224      	movs	r2, #36	; 0x24
 800da74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68da      	ldr	r2, [r3, #12]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f929 	bl	800dce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	695a      	ldr	r2, [r3, #20]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800daac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68da      	ldr	r2, [r3, #12]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dabc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2220      	movs	r2, #32
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2220      	movs	r2, #32
 800dad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b08a      	sub	sp, #40	; 0x28
 800dae2:	af02      	add	r7, sp, #8
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	603b      	str	r3, [r7, #0]
 800daea:	4613      	mov	r3, r2
 800daec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800daee:	2300      	movs	r3, #0
 800daf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	d17c      	bne.n	800dbf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <HAL_UART_Transmit+0x2c>
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e075      	b.n	800dbfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db14:	2b01      	cmp	r3, #1
 800db16:	d101      	bne.n	800db1c <HAL_UART_Transmit+0x3e>
 800db18:	2302      	movs	r3, #2
 800db1a:	e06e      	b.n	800dbfa <HAL_UART_Transmit+0x11c>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2221      	movs	r2, #33	; 0x21
 800db2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db32:	f7ff f82d 	bl	800cb90 <HAL_GetTick>
 800db36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	88fa      	ldrh	r2, [r7, #6]
 800db3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	88fa      	ldrh	r2, [r7, #6]
 800db42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db4c:	d108      	bne.n	800db60 <HAL_UART_Transmit+0x82>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d104      	bne.n	800db60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800db56:	2300      	movs	r3, #0
 800db58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	e003      	b.n	800db68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800db70:	e02a      	b.n	800dbc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2200      	movs	r2, #0
 800db7a:	2180      	movs	r1, #128	; 0x80
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 f840 	bl	800dc02 <UART_WaitOnFlagUntilTimeout>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	e036      	b.n	800dbfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10b      	bne.n	800dbaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	3302      	adds	r3, #2
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e007      	b.n	800dbba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	781a      	ldrb	r2, [r3, #0]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1cf      	bne.n	800db72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2140      	movs	r1, #64	; 0x40
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 f810 	bl	800dc02 <UART_WaitOnFlagUntilTimeout>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	e006      	b.n	800dbfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2220      	movs	r2, #32
 800dbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e000      	b.n	800dbfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800dbf8:	2302      	movs	r3, #2
  }
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b090      	sub	sp, #64	; 0x40
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc12:	e050      	b.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1a:	d04c      	beq.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dc1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc22:	f7fe ffb5 	bl	800cb90 <HAL_GetTick>
 800dc26:	4602      	mov	r2, r0
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d241      	bcs.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	330c      	adds	r3, #12
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3c:	e853 3f00 	ldrex	r3, [r3]
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	330c      	adds	r3, #12
 800dc50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc52:	637a      	str	r2, [r7, #52]	; 0x34
 800dc54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc5a:	e841 2300 	strex	r3, r2, [r1]
 800dc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1e5      	bne.n	800dc32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3314      	adds	r3, #20
 800dc6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	e853 3f00 	ldrex	r3, [r3]
 800dc74:	613b      	str	r3, [r7, #16]
   return(result);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f023 0301 	bic.w	r3, r3, #1
 800dc7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3314      	adds	r3, #20
 800dc84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc86:	623a      	str	r2, [r7, #32]
 800dc88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8a:	69f9      	ldr	r1, [r7, #28]
 800dc8c:	6a3a      	ldr	r2, [r7, #32]
 800dc8e:	e841 2300 	strex	r3, r2, [r1]
 800dc92:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1e5      	bne.n	800dc66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2220      	movs	r2, #32
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2220      	movs	r2, #32
 800dca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	e00f      	b.n	800dcd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	bf0c      	ite	eq
 800dcc6:	2301      	moveq	r3, #1
 800dcc8:	2300      	movne	r3, #0
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d09f      	beq.n	800dc14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3740      	adds	r7, #64	; 0x40
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dce4:	b0c0      	sub	sp, #256	; 0x100
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dcf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcfc:	68d9      	ldr	r1, [r3, #12]
 800dcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	ea40 0301 	orr.w	r3, r0, r1
 800dd08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dd0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	431a      	orrs	r2, r3
 800dd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dd38:	f021 010c 	bic.w	r1, r1, #12
 800dd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dd46:	430b      	orrs	r3, r1
 800dd48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dd56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd5a:	6999      	ldr	r1, [r3, #24]
 800dd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	ea40 0301 	orr.w	r3, r0, r1
 800dd66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	4b8f      	ldr	r3, [pc, #572]	; (800dfac <UART_SetConfig+0x2cc>)
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d005      	beq.n	800dd80 <UART_SetConfig+0xa0>
 800dd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	4b8d      	ldr	r3, [pc, #564]	; (800dfb0 <UART_SetConfig+0x2d0>)
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d104      	bne.n	800dd8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dd80:	f7ff fe4c 	bl	800da1c <HAL_RCC_GetPCLK2Freq>
 800dd84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dd88:	e003      	b.n	800dd92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd8a:	f7ff fe33 	bl	800d9f4 <HAL_RCC_GetPCLK1Freq>
 800dd8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd9c:	f040 810c 	bne.w	800dfb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dda0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ddaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ddae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	462b      	mov	r3, r5
 800ddb6:	1891      	adds	r1, r2, r2
 800ddb8:	65b9      	str	r1, [r7, #88]	; 0x58
 800ddba:	415b      	adcs	r3, r3
 800ddbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	eb12 0801 	adds.w	r8, r2, r1
 800ddc8:	4629      	mov	r1, r5
 800ddca:	eb43 0901 	adc.w	r9, r3, r1
 800ddce:	f04f 0200 	mov.w	r2, #0
 800ddd2:	f04f 0300 	mov.w	r3, #0
 800ddd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ddda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ddde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dde2:	4690      	mov	r8, r2
 800dde4:	4699      	mov	r9, r3
 800dde6:	4623      	mov	r3, r4
 800dde8:	eb18 0303 	adds.w	r3, r8, r3
 800ddec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ddf0:	462b      	mov	r3, r5
 800ddf2:	eb49 0303 	adc.w	r3, r9, r3
 800ddf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ddfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800de06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800de0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800de0e:	460b      	mov	r3, r1
 800de10:	18db      	adds	r3, r3, r3
 800de12:	653b      	str	r3, [r7, #80]	; 0x50
 800de14:	4613      	mov	r3, r2
 800de16:	eb42 0303 	adc.w	r3, r2, r3
 800de1a:	657b      	str	r3, [r7, #84]	; 0x54
 800de1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800de20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800de24:	f7fe fa2c 	bl	800c280 <__aeabi_uldivmod>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4b61      	ldr	r3, [pc, #388]	; (800dfb4 <UART_SetConfig+0x2d4>)
 800de2e:	fba3 2302 	umull	r2, r3, r3, r2
 800de32:	095b      	lsrs	r3, r3, #5
 800de34:	011c      	lsls	r4, r3, #4
 800de36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800de40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800de44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800de48:	4642      	mov	r2, r8
 800de4a:	464b      	mov	r3, r9
 800de4c:	1891      	adds	r1, r2, r2
 800de4e:	64b9      	str	r1, [r7, #72]	; 0x48
 800de50:	415b      	adcs	r3, r3
 800de52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de58:	4641      	mov	r1, r8
 800de5a:	eb12 0a01 	adds.w	sl, r2, r1
 800de5e:	4649      	mov	r1, r9
 800de60:	eb43 0b01 	adc.w	fp, r3, r1
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	f04f 0300 	mov.w	r3, #0
 800de6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800de74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de78:	4692      	mov	sl, r2
 800de7a:	469b      	mov	fp, r3
 800de7c:	4643      	mov	r3, r8
 800de7e:	eb1a 0303 	adds.w	r3, sl, r3
 800de82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de86:	464b      	mov	r3, r9
 800de88:	eb4b 0303 	adc.w	r3, fp, r3
 800de8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dea4:	460b      	mov	r3, r1
 800dea6:	18db      	adds	r3, r3, r3
 800dea8:	643b      	str	r3, [r7, #64]	; 0x40
 800deaa:	4613      	mov	r3, r2
 800deac:	eb42 0303 	adc.w	r3, r2, r3
 800deb0:	647b      	str	r3, [r7, #68]	; 0x44
 800deb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800deb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800deba:	f7fe f9e1 	bl	800c280 <__aeabi_uldivmod>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4611      	mov	r1, r2
 800dec4:	4b3b      	ldr	r3, [pc, #236]	; (800dfb4 <UART_SetConfig+0x2d4>)
 800dec6:	fba3 2301 	umull	r2, r3, r3, r1
 800deca:	095b      	lsrs	r3, r3, #5
 800decc:	2264      	movs	r2, #100	; 0x64
 800dece:	fb02 f303 	mul.w	r3, r2, r3
 800ded2:	1acb      	subs	r3, r1, r3
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800deda:	4b36      	ldr	r3, [pc, #216]	; (800dfb4 <UART_SetConfig+0x2d4>)
 800dedc:	fba3 2302 	umull	r2, r3, r3, r2
 800dee0:	095b      	lsrs	r3, r3, #5
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dee8:	441c      	add	r4, r3
 800deea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800deee:	2200      	movs	r2, #0
 800def0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800def4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800def8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800defc:	4642      	mov	r2, r8
 800defe:	464b      	mov	r3, r9
 800df00:	1891      	adds	r1, r2, r2
 800df02:	63b9      	str	r1, [r7, #56]	; 0x38
 800df04:	415b      	adcs	r3, r3
 800df06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800df0c:	4641      	mov	r1, r8
 800df0e:	1851      	adds	r1, r2, r1
 800df10:	6339      	str	r1, [r7, #48]	; 0x30
 800df12:	4649      	mov	r1, r9
 800df14:	414b      	adcs	r3, r1
 800df16:	637b      	str	r3, [r7, #52]	; 0x34
 800df18:	f04f 0200 	mov.w	r2, #0
 800df1c:	f04f 0300 	mov.w	r3, #0
 800df20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800df24:	4659      	mov	r1, fp
 800df26:	00cb      	lsls	r3, r1, #3
 800df28:	4651      	mov	r1, sl
 800df2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df2e:	4651      	mov	r1, sl
 800df30:	00ca      	lsls	r2, r1, #3
 800df32:	4610      	mov	r0, r2
 800df34:	4619      	mov	r1, r3
 800df36:	4603      	mov	r3, r0
 800df38:	4642      	mov	r2, r8
 800df3a:	189b      	adds	r3, r3, r2
 800df3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df40:	464b      	mov	r3, r9
 800df42:	460a      	mov	r2, r1
 800df44:	eb42 0303 	adc.w	r3, r2, r3
 800df48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800df4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800df58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800df5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800df60:	460b      	mov	r3, r1
 800df62:	18db      	adds	r3, r3, r3
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28
 800df66:	4613      	mov	r3, r2
 800df68:	eb42 0303 	adc.w	r3, r2, r3
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800df76:	f7fe f983 	bl	800c280 <__aeabi_uldivmod>
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	4b0d      	ldr	r3, [pc, #52]	; (800dfb4 <UART_SetConfig+0x2d4>)
 800df80:	fba3 1302 	umull	r1, r3, r3, r2
 800df84:	095b      	lsrs	r3, r3, #5
 800df86:	2164      	movs	r1, #100	; 0x64
 800df88:	fb01 f303 	mul.w	r3, r1, r3
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	3332      	adds	r3, #50	; 0x32
 800df92:	4a08      	ldr	r2, [pc, #32]	; (800dfb4 <UART_SetConfig+0x2d4>)
 800df94:	fba2 2303 	umull	r2, r3, r2, r3
 800df98:	095b      	lsrs	r3, r3, #5
 800df9a:	f003 0207 	and.w	r2, r3, #7
 800df9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4422      	add	r2, r4
 800dfa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dfa8:	e105      	b.n	800e1b6 <UART_SetConfig+0x4d6>
 800dfaa:	bf00      	nop
 800dfac:	40011000 	.word	0x40011000
 800dfb0:	40011400 	.word	0x40011400
 800dfb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dfc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dfc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dfca:	4642      	mov	r2, r8
 800dfcc:	464b      	mov	r3, r9
 800dfce:	1891      	adds	r1, r2, r2
 800dfd0:	6239      	str	r1, [r7, #32]
 800dfd2:	415b      	adcs	r3, r3
 800dfd4:	627b      	str	r3, [r7, #36]	; 0x24
 800dfd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dfda:	4641      	mov	r1, r8
 800dfdc:	1854      	adds	r4, r2, r1
 800dfde:	4649      	mov	r1, r9
 800dfe0:	eb43 0501 	adc.w	r5, r3, r1
 800dfe4:	f04f 0200 	mov.w	r2, #0
 800dfe8:	f04f 0300 	mov.w	r3, #0
 800dfec:	00eb      	lsls	r3, r5, #3
 800dfee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dff2:	00e2      	lsls	r2, r4, #3
 800dff4:	4614      	mov	r4, r2
 800dff6:	461d      	mov	r5, r3
 800dff8:	4643      	mov	r3, r8
 800dffa:	18e3      	adds	r3, r4, r3
 800dffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e000:	464b      	mov	r3, r9
 800e002:	eb45 0303 	adc.w	r3, r5, r3
 800e006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e01a:	f04f 0200 	mov.w	r2, #0
 800e01e:	f04f 0300 	mov.w	r3, #0
 800e022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e026:	4629      	mov	r1, r5
 800e028:	008b      	lsls	r3, r1, #2
 800e02a:	4621      	mov	r1, r4
 800e02c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e030:	4621      	mov	r1, r4
 800e032:	008a      	lsls	r2, r1, #2
 800e034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e038:	f7fe f922 	bl	800c280 <__aeabi_uldivmod>
 800e03c:	4602      	mov	r2, r0
 800e03e:	460b      	mov	r3, r1
 800e040:	4b60      	ldr	r3, [pc, #384]	; (800e1c4 <UART_SetConfig+0x4e4>)
 800e042:	fba3 2302 	umull	r2, r3, r3, r2
 800e046:	095b      	lsrs	r3, r3, #5
 800e048:	011c      	lsls	r4, r3, #4
 800e04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e04e:	2200      	movs	r2, #0
 800e050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e05c:	4642      	mov	r2, r8
 800e05e:	464b      	mov	r3, r9
 800e060:	1891      	adds	r1, r2, r2
 800e062:	61b9      	str	r1, [r7, #24]
 800e064:	415b      	adcs	r3, r3
 800e066:	61fb      	str	r3, [r7, #28]
 800e068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e06c:	4641      	mov	r1, r8
 800e06e:	1851      	adds	r1, r2, r1
 800e070:	6139      	str	r1, [r7, #16]
 800e072:	4649      	mov	r1, r9
 800e074:	414b      	adcs	r3, r1
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	f04f 0200 	mov.w	r2, #0
 800e07c:	f04f 0300 	mov.w	r3, #0
 800e080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e084:	4659      	mov	r1, fp
 800e086:	00cb      	lsls	r3, r1, #3
 800e088:	4651      	mov	r1, sl
 800e08a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e08e:	4651      	mov	r1, sl
 800e090:	00ca      	lsls	r2, r1, #3
 800e092:	4610      	mov	r0, r2
 800e094:	4619      	mov	r1, r3
 800e096:	4603      	mov	r3, r0
 800e098:	4642      	mov	r2, r8
 800e09a:	189b      	adds	r3, r3, r2
 800e09c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0a0:	464b      	mov	r3, r9
 800e0a2:	460a      	mov	r2, r1
 800e0a4:	eb42 0303 	adc.w	r3, r2, r3
 800e0a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e0b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e0b8:	f04f 0200 	mov.w	r2, #0
 800e0bc:	f04f 0300 	mov.w	r3, #0
 800e0c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	008b      	lsls	r3, r1, #2
 800e0c8:	4641      	mov	r1, r8
 800e0ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	008a      	lsls	r2, r1, #2
 800e0d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e0d6:	f7fe f8d3 	bl	800c280 <__aeabi_uldivmod>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4b39      	ldr	r3, [pc, #228]	; (800e1c4 <UART_SetConfig+0x4e4>)
 800e0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800e0e4:	095b      	lsrs	r3, r3, #5
 800e0e6:	2164      	movs	r1, #100	; 0x64
 800e0e8:	fb01 f303 	mul.w	r3, r1, r3
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	011b      	lsls	r3, r3, #4
 800e0f0:	3332      	adds	r3, #50	; 0x32
 800e0f2:	4a34      	ldr	r2, [pc, #208]	; (800e1c4 <UART_SetConfig+0x4e4>)
 800e0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f8:	095b      	lsrs	r3, r3, #5
 800e0fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0fe:	441c      	add	r4, r3
 800e100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e104:	2200      	movs	r2, #0
 800e106:	673b      	str	r3, [r7, #112]	; 0x70
 800e108:	677a      	str	r2, [r7, #116]	; 0x74
 800e10a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e10e:	4642      	mov	r2, r8
 800e110:	464b      	mov	r3, r9
 800e112:	1891      	adds	r1, r2, r2
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	415b      	adcs	r3, r3
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e11e:	4641      	mov	r1, r8
 800e120:	1851      	adds	r1, r2, r1
 800e122:	6039      	str	r1, [r7, #0]
 800e124:	4649      	mov	r1, r9
 800e126:	414b      	adcs	r3, r1
 800e128:	607b      	str	r3, [r7, #4]
 800e12a:	f04f 0200 	mov.w	r2, #0
 800e12e:	f04f 0300 	mov.w	r3, #0
 800e132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e136:	4659      	mov	r1, fp
 800e138:	00cb      	lsls	r3, r1, #3
 800e13a:	4651      	mov	r1, sl
 800e13c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e140:	4651      	mov	r1, sl
 800e142:	00ca      	lsls	r2, r1, #3
 800e144:	4610      	mov	r0, r2
 800e146:	4619      	mov	r1, r3
 800e148:	4603      	mov	r3, r0
 800e14a:	4642      	mov	r2, r8
 800e14c:	189b      	adds	r3, r3, r2
 800e14e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e150:	464b      	mov	r3, r9
 800e152:	460a      	mov	r2, r1
 800e154:	eb42 0303 	adc.w	r3, r2, r3
 800e158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	663b      	str	r3, [r7, #96]	; 0x60
 800e164:	667a      	str	r2, [r7, #100]	; 0x64
 800e166:	f04f 0200 	mov.w	r2, #0
 800e16a:	f04f 0300 	mov.w	r3, #0
 800e16e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e172:	4649      	mov	r1, r9
 800e174:	008b      	lsls	r3, r1, #2
 800e176:	4641      	mov	r1, r8
 800e178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e17c:	4641      	mov	r1, r8
 800e17e:	008a      	lsls	r2, r1, #2
 800e180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e184:	f7fe f87c 	bl	800c280 <__aeabi_uldivmod>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4b0d      	ldr	r3, [pc, #52]	; (800e1c4 <UART_SetConfig+0x4e4>)
 800e18e:	fba3 1302 	umull	r1, r3, r3, r2
 800e192:	095b      	lsrs	r3, r3, #5
 800e194:	2164      	movs	r1, #100	; 0x64
 800e196:	fb01 f303 	mul.w	r3, r1, r3
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	011b      	lsls	r3, r3, #4
 800e19e:	3332      	adds	r3, #50	; 0x32
 800e1a0:	4a08      	ldr	r2, [pc, #32]	; (800e1c4 <UART_SetConfig+0x4e4>)
 800e1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a6:	095b      	lsrs	r3, r3, #5
 800e1a8:	f003 020f 	and.w	r2, r3, #15
 800e1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4422      	add	r2, r4
 800e1b4:	609a      	str	r2, [r3, #8]
}
 800e1b6:	bf00      	nop
 800e1b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1c2:	bf00      	nop
 800e1c4:	51eb851f 	.word	0x51eb851f

0800e1c8 <__errno>:
 800e1c8:	4b01      	ldr	r3, [pc, #4]	; (800e1d0 <__errno+0x8>)
 800e1ca:	6818      	ldr	r0, [r3, #0]
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	2000000c 	.word	0x2000000c

0800e1d4 <__libc_init_array>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	4d0d      	ldr	r5, [pc, #52]	; (800e20c <__libc_init_array+0x38>)
 800e1d8:	4c0d      	ldr	r4, [pc, #52]	; (800e210 <__libc_init_array+0x3c>)
 800e1da:	1b64      	subs	r4, r4, r5
 800e1dc:	10a4      	asrs	r4, r4, #2
 800e1de:	2600      	movs	r6, #0
 800e1e0:	42a6      	cmp	r6, r4
 800e1e2:	d109      	bne.n	800e1f8 <__libc_init_array+0x24>
 800e1e4:	4d0b      	ldr	r5, [pc, #44]	; (800e214 <__libc_init_array+0x40>)
 800e1e6:	4c0c      	ldr	r4, [pc, #48]	; (800e218 <__libc_init_array+0x44>)
 800e1e8:	f000 fc8e 	bl	800eb08 <_init>
 800e1ec:	1b64      	subs	r4, r4, r5
 800e1ee:	10a4      	asrs	r4, r4, #2
 800e1f0:	2600      	movs	r6, #0
 800e1f2:	42a6      	cmp	r6, r4
 800e1f4:	d105      	bne.n	800e202 <__libc_init_array+0x2e>
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1fc:	4798      	blx	r3
 800e1fe:	3601      	adds	r6, #1
 800e200:	e7ee      	b.n	800e1e0 <__libc_init_array+0xc>
 800e202:	f855 3b04 	ldr.w	r3, [r5], #4
 800e206:	4798      	blx	r3
 800e208:	3601      	adds	r6, #1
 800e20a:	e7f2      	b.n	800e1f2 <__libc_init_array+0x1e>
 800e20c:	0800eb80 	.word	0x0800eb80
 800e210:	0800eb80 	.word	0x0800eb80
 800e214:	0800eb80 	.word	0x0800eb80
 800e218:	0800eb84 	.word	0x0800eb84

0800e21c <memset>:
 800e21c:	4402      	add	r2, r0
 800e21e:	4603      	mov	r3, r0
 800e220:	4293      	cmp	r3, r2
 800e222:	d100      	bne.n	800e226 <memset+0xa>
 800e224:	4770      	bx	lr
 800e226:	f803 1b01 	strb.w	r1, [r3], #1
 800e22a:	e7f9      	b.n	800e220 <memset+0x4>

0800e22c <_vsiprintf_r>:
 800e22c:	b500      	push	{lr}
 800e22e:	b09b      	sub	sp, #108	; 0x6c
 800e230:	9100      	str	r1, [sp, #0]
 800e232:	9104      	str	r1, [sp, #16]
 800e234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e238:	9105      	str	r1, [sp, #20]
 800e23a:	9102      	str	r1, [sp, #8]
 800e23c:	4905      	ldr	r1, [pc, #20]	; (800e254 <_vsiprintf_r+0x28>)
 800e23e:	9103      	str	r1, [sp, #12]
 800e240:	4669      	mov	r1, sp
 800e242:	f000 f86f 	bl	800e324 <_svfiprintf_r>
 800e246:	9b00      	ldr	r3, [sp, #0]
 800e248:	2200      	movs	r2, #0
 800e24a:	701a      	strb	r2, [r3, #0]
 800e24c:	b01b      	add	sp, #108	; 0x6c
 800e24e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e252:	bf00      	nop
 800e254:	ffff0208 	.word	0xffff0208

0800e258 <vsiprintf>:
 800e258:	4613      	mov	r3, r2
 800e25a:	460a      	mov	r2, r1
 800e25c:	4601      	mov	r1, r0
 800e25e:	4802      	ldr	r0, [pc, #8]	; (800e268 <vsiprintf+0x10>)
 800e260:	6800      	ldr	r0, [r0, #0]
 800e262:	f7ff bfe3 	b.w	800e22c <_vsiprintf_r>
 800e266:	bf00      	nop
 800e268:	2000000c 	.word	0x2000000c

0800e26c <__ssputs_r>:
 800e26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	688e      	ldr	r6, [r1, #8]
 800e272:	429e      	cmp	r6, r3
 800e274:	4682      	mov	sl, r0
 800e276:	460c      	mov	r4, r1
 800e278:	4690      	mov	r8, r2
 800e27a:	461f      	mov	r7, r3
 800e27c:	d838      	bhi.n	800e2f0 <__ssputs_r+0x84>
 800e27e:	898a      	ldrh	r2, [r1, #12]
 800e280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e284:	d032      	beq.n	800e2ec <__ssputs_r+0x80>
 800e286:	6825      	ldr	r5, [r4, #0]
 800e288:	6909      	ldr	r1, [r1, #16]
 800e28a:	eba5 0901 	sub.w	r9, r5, r1
 800e28e:	6965      	ldr	r5, [r4, #20]
 800e290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e298:	3301      	adds	r3, #1
 800e29a:	444b      	add	r3, r9
 800e29c:	106d      	asrs	r5, r5, #1
 800e29e:	429d      	cmp	r5, r3
 800e2a0:	bf38      	it	cc
 800e2a2:	461d      	movcc	r5, r3
 800e2a4:	0553      	lsls	r3, r2, #21
 800e2a6:	d531      	bpl.n	800e30c <__ssputs_r+0xa0>
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	f000 fb63 	bl	800e974 <_malloc_r>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	b950      	cbnz	r0, 800e2c8 <__ssputs_r+0x5c>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	f8ca 3000 	str.w	r3, [sl]
 800e2b8:	89a3      	ldrh	r3, [r4, #12]
 800e2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2be:	81a3      	strh	r3, [r4, #12]
 800e2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c8:	6921      	ldr	r1, [r4, #16]
 800e2ca:	464a      	mov	r2, r9
 800e2cc:	f000 fabe 	bl	800e84c <memcpy>
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2da:	81a3      	strh	r3, [r4, #12]
 800e2dc:	6126      	str	r6, [r4, #16]
 800e2de:	6165      	str	r5, [r4, #20]
 800e2e0:	444e      	add	r6, r9
 800e2e2:	eba5 0509 	sub.w	r5, r5, r9
 800e2e6:	6026      	str	r6, [r4, #0]
 800e2e8:	60a5      	str	r5, [r4, #8]
 800e2ea:	463e      	mov	r6, r7
 800e2ec:	42be      	cmp	r6, r7
 800e2ee:	d900      	bls.n	800e2f2 <__ssputs_r+0x86>
 800e2f0:	463e      	mov	r6, r7
 800e2f2:	6820      	ldr	r0, [r4, #0]
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	4641      	mov	r1, r8
 800e2f8:	f000 fab6 	bl	800e868 <memmove>
 800e2fc:	68a3      	ldr	r3, [r4, #8]
 800e2fe:	1b9b      	subs	r3, r3, r6
 800e300:	60a3      	str	r3, [r4, #8]
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	4433      	add	r3, r6
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	2000      	movs	r0, #0
 800e30a:	e7db      	b.n	800e2c4 <__ssputs_r+0x58>
 800e30c:	462a      	mov	r2, r5
 800e30e:	f000 fba5 	bl	800ea5c <_realloc_r>
 800e312:	4606      	mov	r6, r0
 800e314:	2800      	cmp	r0, #0
 800e316:	d1e1      	bne.n	800e2dc <__ssputs_r+0x70>
 800e318:	6921      	ldr	r1, [r4, #16]
 800e31a:	4650      	mov	r0, sl
 800e31c:	f000 fabe 	bl	800e89c <_free_r>
 800e320:	e7c7      	b.n	800e2b2 <__ssputs_r+0x46>
	...

0800e324 <_svfiprintf_r>:
 800e324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e328:	4698      	mov	r8, r3
 800e32a:	898b      	ldrh	r3, [r1, #12]
 800e32c:	061b      	lsls	r3, r3, #24
 800e32e:	b09d      	sub	sp, #116	; 0x74
 800e330:	4607      	mov	r7, r0
 800e332:	460d      	mov	r5, r1
 800e334:	4614      	mov	r4, r2
 800e336:	d50e      	bpl.n	800e356 <_svfiprintf_r+0x32>
 800e338:	690b      	ldr	r3, [r1, #16]
 800e33a:	b963      	cbnz	r3, 800e356 <_svfiprintf_r+0x32>
 800e33c:	2140      	movs	r1, #64	; 0x40
 800e33e:	f000 fb19 	bl	800e974 <_malloc_r>
 800e342:	6028      	str	r0, [r5, #0]
 800e344:	6128      	str	r0, [r5, #16]
 800e346:	b920      	cbnz	r0, 800e352 <_svfiprintf_r+0x2e>
 800e348:	230c      	movs	r3, #12
 800e34a:	603b      	str	r3, [r7, #0]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e0d1      	b.n	800e4f6 <_svfiprintf_r+0x1d2>
 800e352:	2340      	movs	r3, #64	; 0x40
 800e354:	616b      	str	r3, [r5, #20]
 800e356:	2300      	movs	r3, #0
 800e358:	9309      	str	r3, [sp, #36]	; 0x24
 800e35a:	2320      	movs	r3, #32
 800e35c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e360:	f8cd 800c 	str.w	r8, [sp, #12]
 800e364:	2330      	movs	r3, #48	; 0x30
 800e366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e510 <_svfiprintf_r+0x1ec>
 800e36a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e36e:	f04f 0901 	mov.w	r9, #1
 800e372:	4623      	mov	r3, r4
 800e374:	469a      	mov	sl, r3
 800e376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e37a:	b10a      	cbz	r2, 800e380 <_svfiprintf_r+0x5c>
 800e37c:	2a25      	cmp	r2, #37	; 0x25
 800e37e:	d1f9      	bne.n	800e374 <_svfiprintf_r+0x50>
 800e380:	ebba 0b04 	subs.w	fp, sl, r4
 800e384:	d00b      	beq.n	800e39e <_svfiprintf_r+0x7a>
 800e386:	465b      	mov	r3, fp
 800e388:	4622      	mov	r2, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	4638      	mov	r0, r7
 800e38e:	f7ff ff6d 	bl	800e26c <__ssputs_r>
 800e392:	3001      	adds	r0, #1
 800e394:	f000 80aa 	beq.w	800e4ec <_svfiprintf_r+0x1c8>
 800e398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e39a:	445a      	add	r2, fp
 800e39c:	9209      	str	r2, [sp, #36]	; 0x24
 800e39e:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 80a2 	beq.w	800e4ec <_svfiprintf_r+0x1c8>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3b2:	f10a 0a01 	add.w	sl, sl, #1
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	9307      	str	r3, [sp, #28]
 800e3ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3be:	931a      	str	r3, [sp, #104]	; 0x68
 800e3c0:	4654      	mov	r4, sl
 800e3c2:	2205      	movs	r2, #5
 800e3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3c8:	4851      	ldr	r0, [pc, #324]	; (800e510 <_svfiprintf_r+0x1ec>)
 800e3ca:	f7fd ff09 	bl	800c1e0 <memchr>
 800e3ce:	9a04      	ldr	r2, [sp, #16]
 800e3d0:	b9d8      	cbnz	r0, 800e40a <_svfiprintf_r+0xe6>
 800e3d2:	06d0      	lsls	r0, r2, #27
 800e3d4:	bf44      	itt	mi
 800e3d6:	2320      	movmi	r3, #32
 800e3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3dc:	0711      	lsls	r1, r2, #28
 800e3de:	bf44      	itt	mi
 800e3e0:	232b      	movmi	r3, #43	; 0x2b
 800e3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ec:	d015      	beq.n	800e41a <_svfiprintf_r+0xf6>
 800e3ee:	9a07      	ldr	r2, [sp, #28]
 800e3f0:	4654      	mov	r4, sl
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	f04f 0c0a 	mov.w	ip, #10
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3fe:	3b30      	subs	r3, #48	; 0x30
 800e400:	2b09      	cmp	r3, #9
 800e402:	d94e      	bls.n	800e4a2 <_svfiprintf_r+0x17e>
 800e404:	b1b0      	cbz	r0, 800e434 <_svfiprintf_r+0x110>
 800e406:	9207      	str	r2, [sp, #28]
 800e408:	e014      	b.n	800e434 <_svfiprintf_r+0x110>
 800e40a:	eba0 0308 	sub.w	r3, r0, r8
 800e40e:	fa09 f303 	lsl.w	r3, r9, r3
 800e412:	4313      	orrs	r3, r2
 800e414:	9304      	str	r3, [sp, #16]
 800e416:	46a2      	mov	sl, r4
 800e418:	e7d2      	b.n	800e3c0 <_svfiprintf_r+0x9c>
 800e41a:	9b03      	ldr	r3, [sp, #12]
 800e41c:	1d19      	adds	r1, r3, #4
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	9103      	str	r1, [sp, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	bfbb      	ittet	lt
 800e426:	425b      	neglt	r3, r3
 800e428:	f042 0202 	orrlt.w	r2, r2, #2
 800e42c:	9307      	strge	r3, [sp, #28]
 800e42e:	9307      	strlt	r3, [sp, #28]
 800e430:	bfb8      	it	lt
 800e432:	9204      	strlt	r2, [sp, #16]
 800e434:	7823      	ldrb	r3, [r4, #0]
 800e436:	2b2e      	cmp	r3, #46	; 0x2e
 800e438:	d10c      	bne.n	800e454 <_svfiprintf_r+0x130>
 800e43a:	7863      	ldrb	r3, [r4, #1]
 800e43c:	2b2a      	cmp	r3, #42	; 0x2a
 800e43e:	d135      	bne.n	800e4ac <_svfiprintf_r+0x188>
 800e440:	9b03      	ldr	r3, [sp, #12]
 800e442:	1d1a      	adds	r2, r3, #4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	9203      	str	r2, [sp, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	bfb8      	it	lt
 800e44c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e450:	3402      	adds	r4, #2
 800e452:	9305      	str	r3, [sp, #20]
 800e454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e520 <_svfiprintf_r+0x1fc>
 800e458:	7821      	ldrb	r1, [r4, #0]
 800e45a:	2203      	movs	r2, #3
 800e45c:	4650      	mov	r0, sl
 800e45e:	f7fd febf 	bl	800c1e0 <memchr>
 800e462:	b140      	cbz	r0, 800e476 <_svfiprintf_r+0x152>
 800e464:	2340      	movs	r3, #64	; 0x40
 800e466:	eba0 000a 	sub.w	r0, r0, sl
 800e46a:	fa03 f000 	lsl.w	r0, r3, r0
 800e46e:	9b04      	ldr	r3, [sp, #16]
 800e470:	4303      	orrs	r3, r0
 800e472:	3401      	adds	r4, #1
 800e474:	9304      	str	r3, [sp, #16]
 800e476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e47a:	4826      	ldr	r0, [pc, #152]	; (800e514 <_svfiprintf_r+0x1f0>)
 800e47c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e480:	2206      	movs	r2, #6
 800e482:	f7fd fead 	bl	800c1e0 <memchr>
 800e486:	2800      	cmp	r0, #0
 800e488:	d038      	beq.n	800e4fc <_svfiprintf_r+0x1d8>
 800e48a:	4b23      	ldr	r3, [pc, #140]	; (800e518 <_svfiprintf_r+0x1f4>)
 800e48c:	bb1b      	cbnz	r3, 800e4d6 <_svfiprintf_r+0x1b2>
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	3307      	adds	r3, #7
 800e492:	f023 0307 	bic.w	r3, r3, #7
 800e496:	3308      	adds	r3, #8
 800e498:	9303      	str	r3, [sp, #12]
 800e49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e49c:	4433      	add	r3, r6
 800e49e:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a0:	e767      	b.n	800e372 <_svfiprintf_r+0x4e>
 800e4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	e7a5      	b.n	800e3f8 <_svfiprintf_r+0xd4>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	3401      	adds	r4, #1
 800e4b0:	9305      	str	r3, [sp, #20]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	f04f 0c0a 	mov.w	ip, #10
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4be:	3a30      	subs	r2, #48	; 0x30
 800e4c0:	2a09      	cmp	r2, #9
 800e4c2:	d903      	bls.n	800e4cc <_svfiprintf_r+0x1a8>
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d0c5      	beq.n	800e454 <_svfiprintf_r+0x130>
 800e4c8:	9105      	str	r1, [sp, #20]
 800e4ca:	e7c3      	b.n	800e454 <_svfiprintf_r+0x130>
 800e4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e7f0      	b.n	800e4b8 <_svfiprintf_r+0x194>
 800e4d6:	ab03      	add	r3, sp, #12
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	462a      	mov	r2, r5
 800e4dc:	4b0f      	ldr	r3, [pc, #60]	; (800e51c <_svfiprintf_r+0x1f8>)
 800e4de:	a904      	add	r1, sp, #16
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	f3af 8000 	nop.w
 800e4e6:	1c42      	adds	r2, r0, #1
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	d1d6      	bne.n	800e49a <_svfiprintf_r+0x176>
 800e4ec:	89ab      	ldrh	r3, [r5, #12]
 800e4ee:	065b      	lsls	r3, r3, #25
 800e4f0:	f53f af2c 	bmi.w	800e34c <_svfiprintf_r+0x28>
 800e4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4f6:	b01d      	add	sp, #116	; 0x74
 800e4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fc:	ab03      	add	r3, sp, #12
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	462a      	mov	r2, r5
 800e502:	4b06      	ldr	r3, [pc, #24]	; (800e51c <_svfiprintf_r+0x1f8>)
 800e504:	a904      	add	r1, sp, #16
 800e506:	4638      	mov	r0, r7
 800e508:	f000 f87a 	bl	800e600 <_printf_i>
 800e50c:	e7eb      	b.n	800e4e6 <_svfiprintf_r+0x1c2>
 800e50e:	bf00      	nop
 800e510:	0800eb44 	.word	0x0800eb44
 800e514:	0800eb4e 	.word	0x0800eb4e
 800e518:	00000000 	.word	0x00000000
 800e51c:	0800e26d 	.word	0x0800e26d
 800e520:	0800eb4a 	.word	0x0800eb4a

0800e524 <_printf_common>:
 800e524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e528:	4616      	mov	r6, r2
 800e52a:	4699      	mov	r9, r3
 800e52c:	688a      	ldr	r2, [r1, #8]
 800e52e:	690b      	ldr	r3, [r1, #16]
 800e530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e534:	4293      	cmp	r3, r2
 800e536:	bfb8      	it	lt
 800e538:	4613      	movlt	r3, r2
 800e53a:	6033      	str	r3, [r6, #0]
 800e53c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e540:	4607      	mov	r7, r0
 800e542:	460c      	mov	r4, r1
 800e544:	b10a      	cbz	r2, 800e54a <_printf_common+0x26>
 800e546:	3301      	adds	r3, #1
 800e548:	6033      	str	r3, [r6, #0]
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	0699      	lsls	r1, r3, #26
 800e54e:	bf42      	ittt	mi
 800e550:	6833      	ldrmi	r3, [r6, #0]
 800e552:	3302      	addmi	r3, #2
 800e554:	6033      	strmi	r3, [r6, #0]
 800e556:	6825      	ldr	r5, [r4, #0]
 800e558:	f015 0506 	ands.w	r5, r5, #6
 800e55c:	d106      	bne.n	800e56c <_printf_common+0x48>
 800e55e:	f104 0a19 	add.w	sl, r4, #25
 800e562:	68e3      	ldr	r3, [r4, #12]
 800e564:	6832      	ldr	r2, [r6, #0]
 800e566:	1a9b      	subs	r3, r3, r2
 800e568:	42ab      	cmp	r3, r5
 800e56a:	dc26      	bgt.n	800e5ba <_printf_common+0x96>
 800e56c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e570:	1e13      	subs	r3, r2, #0
 800e572:	6822      	ldr	r2, [r4, #0]
 800e574:	bf18      	it	ne
 800e576:	2301      	movne	r3, #1
 800e578:	0692      	lsls	r2, r2, #26
 800e57a:	d42b      	bmi.n	800e5d4 <_printf_common+0xb0>
 800e57c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e580:	4649      	mov	r1, r9
 800e582:	4638      	mov	r0, r7
 800e584:	47c0      	blx	r8
 800e586:	3001      	adds	r0, #1
 800e588:	d01e      	beq.n	800e5c8 <_printf_common+0xa4>
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	68e5      	ldr	r5, [r4, #12]
 800e58e:	6832      	ldr	r2, [r6, #0]
 800e590:	f003 0306 	and.w	r3, r3, #6
 800e594:	2b04      	cmp	r3, #4
 800e596:	bf08      	it	eq
 800e598:	1aad      	subeq	r5, r5, r2
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	6922      	ldr	r2, [r4, #16]
 800e59e:	bf0c      	ite	eq
 800e5a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5a4:	2500      	movne	r5, #0
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	bfc4      	itt	gt
 800e5aa:	1a9b      	subgt	r3, r3, r2
 800e5ac:	18ed      	addgt	r5, r5, r3
 800e5ae:	2600      	movs	r6, #0
 800e5b0:	341a      	adds	r4, #26
 800e5b2:	42b5      	cmp	r5, r6
 800e5b4:	d11a      	bne.n	800e5ec <_printf_common+0xc8>
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	e008      	b.n	800e5cc <_printf_common+0xa8>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4652      	mov	r2, sl
 800e5be:	4649      	mov	r1, r9
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	47c0      	blx	r8
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d103      	bne.n	800e5d0 <_printf_common+0xac>
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d0:	3501      	adds	r5, #1
 800e5d2:	e7c6      	b.n	800e562 <_printf_common+0x3e>
 800e5d4:	18e1      	adds	r1, r4, r3
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	2030      	movs	r0, #48	; 0x30
 800e5da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5de:	4422      	add	r2, r4
 800e5e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5e8:	3302      	adds	r3, #2
 800e5ea:	e7c7      	b.n	800e57c <_printf_common+0x58>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	47c0      	blx	r8
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	d0e6      	beq.n	800e5c8 <_printf_common+0xa4>
 800e5fa:	3601      	adds	r6, #1
 800e5fc:	e7d9      	b.n	800e5b2 <_printf_common+0x8e>
	...

0800e600 <_printf_i>:
 800e600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	7e0f      	ldrb	r7, [r1, #24]
 800e606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e608:	2f78      	cmp	r7, #120	; 0x78
 800e60a:	4691      	mov	r9, r2
 800e60c:	4680      	mov	r8, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	469a      	mov	sl, r3
 800e612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e616:	d807      	bhi.n	800e628 <_printf_i+0x28>
 800e618:	2f62      	cmp	r7, #98	; 0x62
 800e61a:	d80a      	bhi.n	800e632 <_printf_i+0x32>
 800e61c:	2f00      	cmp	r7, #0
 800e61e:	f000 80d8 	beq.w	800e7d2 <_printf_i+0x1d2>
 800e622:	2f58      	cmp	r7, #88	; 0x58
 800e624:	f000 80a3 	beq.w	800e76e <_printf_i+0x16e>
 800e628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e62c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e630:	e03a      	b.n	800e6a8 <_printf_i+0xa8>
 800e632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e636:	2b15      	cmp	r3, #21
 800e638:	d8f6      	bhi.n	800e628 <_printf_i+0x28>
 800e63a:	a101      	add	r1, pc, #4	; (adr r1, 800e640 <_printf_i+0x40>)
 800e63c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e640:	0800e699 	.word	0x0800e699
 800e644:	0800e6ad 	.word	0x0800e6ad
 800e648:	0800e629 	.word	0x0800e629
 800e64c:	0800e629 	.word	0x0800e629
 800e650:	0800e629 	.word	0x0800e629
 800e654:	0800e629 	.word	0x0800e629
 800e658:	0800e6ad 	.word	0x0800e6ad
 800e65c:	0800e629 	.word	0x0800e629
 800e660:	0800e629 	.word	0x0800e629
 800e664:	0800e629 	.word	0x0800e629
 800e668:	0800e629 	.word	0x0800e629
 800e66c:	0800e7b9 	.word	0x0800e7b9
 800e670:	0800e6dd 	.word	0x0800e6dd
 800e674:	0800e79b 	.word	0x0800e79b
 800e678:	0800e629 	.word	0x0800e629
 800e67c:	0800e629 	.word	0x0800e629
 800e680:	0800e7db 	.word	0x0800e7db
 800e684:	0800e629 	.word	0x0800e629
 800e688:	0800e6dd 	.word	0x0800e6dd
 800e68c:	0800e629 	.word	0x0800e629
 800e690:	0800e629 	.word	0x0800e629
 800e694:	0800e7a3 	.word	0x0800e7a3
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	1d1a      	adds	r2, r3, #4
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	602a      	str	r2, [r5, #0]
 800e6a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e0a3      	b.n	800e7f4 <_printf_i+0x1f4>
 800e6ac:	6820      	ldr	r0, [r4, #0]
 800e6ae:	6829      	ldr	r1, [r5, #0]
 800e6b0:	0606      	lsls	r6, r0, #24
 800e6b2:	f101 0304 	add.w	r3, r1, #4
 800e6b6:	d50a      	bpl.n	800e6ce <_printf_i+0xce>
 800e6b8:	680e      	ldr	r6, [r1, #0]
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	2e00      	cmp	r6, #0
 800e6be:	da03      	bge.n	800e6c8 <_printf_i+0xc8>
 800e6c0:	232d      	movs	r3, #45	; 0x2d
 800e6c2:	4276      	negs	r6, r6
 800e6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c8:	485e      	ldr	r0, [pc, #376]	; (800e844 <_printf_i+0x244>)
 800e6ca:	230a      	movs	r3, #10
 800e6cc:	e019      	b.n	800e702 <_printf_i+0x102>
 800e6ce:	680e      	ldr	r6, [r1, #0]
 800e6d0:	602b      	str	r3, [r5, #0]
 800e6d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6d6:	bf18      	it	ne
 800e6d8:	b236      	sxthne	r6, r6
 800e6da:	e7ef      	b.n	800e6bc <_printf_i+0xbc>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	6820      	ldr	r0, [r4, #0]
 800e6e0:	1d19      	adds	r1, r3, #4
 800e6e2:	6029      	str	r1, [r5, #0]
 800e6e4:	0601      	lsls	r1, r0, #24
 800e6e6:	d501      	bpl.n	800e6ec <_printf_i+0xec>
 800e6e8:	681e      	ldr	r6, [r3, #0]
 800e6ea:	e002      	b.n	800e6f2 <_printf_i+0xf2>
 800e6ec:	0646      	lsls	r6, r0, #25
 800e6ee:	d5fb      	bpl.n	800e6e8 <_printf_i+0xe8>
 800e6f0:	881e      	ldrh	r6, [r3, #0]
 800e6f2:	4854      	ldr	r0, [pc, #336]	; (800e844 <_printf_i+0x244>)
 800e6f4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6f6:	bf0c      	ite	eq
 800e6f8:	2308      	moveq	r3, #8
 800e6fa:	230a      	movne	r3, #10
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e702:	6865      	ldr	r5, [r4, #4]
 800e704:	60a5      	str	r5, [r4, #8]
 800e706:	2d00      	cmp	r5, #0
 800e708:	bfa2      	ittt	ge
 800e70a:	6821      	ldrge	r1, [r4, #0]
 800e70c:	f021 0104 	bicge.w	r1, r1, #4
 800e710:	6021      	strge	r1, [r4, #0]
 800e712:	b90e      	cbnz	r6, 800e718 <_printf_i+0x118>
 800e714:	2d00      	cmp	r5, #0
 800e716:	d04d      	beq.n	800e7b4 <_printf_i+0x1b4>
 800e718:	4615      	mov	r5, r2
 800e71a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e71e:	fb03 6711 	mls	r7, r3, r1, r6
 800e722:	5dc7      	ldrb	r7, [r0, r7]
 800e724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e728:	4637      	mov	r7, r6
 800e72a:	42bb      	cmp	r3, r7
 800e72c:	460e      	mov	r6, r1
 800e72e:	d9f4      	bls.n	800e71a <_printf_i+0x11a>
 800e730:	2b08      	cmp	r3, #8
 800e732:	d10b      	bne.n	800e74c <_printf_i+0x14c>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	07de      	lsls	r6, r3, #31
 800e738:	d508      	bpl.n	800e74c <_printf_i+0x14c>
 800e73a:	6923      	ldr	r3, [r4, #16]
 800e73c:	6861      	ldr	r1, [r4, #4]
 800e73e:	4299      	cmp	r1, r3
 800e740:	bfde      	ittt	le
 800e742:	2330      	movle	r3, #48	; 0x30
 800e744:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e74c:	1b52      	subs	r2, r2, r5
 800e74e:	6122      	str	r2, [r4, #16]
 800e750:	f8cd a000 	str.w	sl, [sp]
 800e754:	464b      	mov	r3, r9
 800e756:	aa03      	add	r2, sp, #12
 800e758:	4621      	mov	r1, r4
 800e75a:	4640      	mov	r0, r8
 800e75c:	f7ff fee2 	bl	800e524 <_printf_common>
 800e760:	3001      	adds	r0, #1
 800e762:	d14c      	bne.n	800e7fe <_printf_i+0x1fe>
 800e764:	f04f 30ff 	mov.w	r0, #4294967295
 800e768:	b004      	add	sp, #16
 800e76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e76e:	4835      	ldr	r0, [pc, #212]	; (800e844 <_printf_i+0x244>)
 800e770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e774:	6829      	ldr	r1, [r5, #0]
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	f851 6b04 	ldr.w	r6, [r1], #4
 800e77c:	6029      	str	r1, [r5, #0]
 800e77e:	061d      	lsls	r5, r3, #24
 800e780:	d514      	bpl.n	800e7ac <_printf_i+0x1ac>
 800e782:	07df      	lsls	r7, r3, #31
 800e784:	bf44      	itt	mi
 800e786:	f043 0320 	orrmi.w	r3, r3, #32
 800e78a:	6023      	strmi	r3, [r4, #0]
 800e78c:	b91e      	cbnz	r6, 800e796 <_printf_i+0x196>
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	f023 0320 	bic.w	r3, r3, #32
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	2310      	movs	r3, #16
 800e798:	e7b0      	b.n	800e6fc <_printf_i+0xfc>
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	f043 0320 	orr.w	r3, r3, #32
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	2378      	movs	r3, #120	; 0x78
 800e7a4:	4828      	ldr	r0, [pc, #160]	; (800e848 <_printf_i+0x248>)
 800e7a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7aa:	e7e3      	b.n	800e774 <_printf_i+0x174>
 800e7ac:	0659      	lsls	r1, r3, #25
 800e7ae:	bf48      	it	mi
 800e7b0:	b2b6      	uxthmi	r6, r6
 800e7b2:	e7e6      	b.n	800e782 <_printf_i+0x182>
 800e7b4:	4615      	mov	r5, r2
 800e7b6:	e7bb      	b.n	800e730 <_printf_i+0x130>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	6826      	ldr	r6, [r4, #0]
 800e7bc:	6961      	ldr	r1, [r4, #20]
 800e7be:	1d18      	adds	r0, r3, #4
 800e7c0:	6028      	str	r0, [r5, #0]
 800e7c2:	0635      	lsls	r5, r6, #24
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	d501      	bpl.n	800e7cc <_printf_i+0x1cc>
 800e7c8:	6019      	str	r1, [r3, #0]
 800e7ca:	e002      	b.n	800e7d2 <_printf_i+0x1d2>
 800e7cc:	0670      	lsls	r0, r6, #25
 800e7ce:	d5fb      	bpl.n	800e7c8 <_printf_i+0x1c8>
 800e7d0:	8019      	strh	r1, [r3, #0]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	6123      	str	r3, [r4, #16]
 800e7d6:	4615      	mov	r5, r2
 800e7d8:	e7ba      	b.n	800e750 <_printf_i+0x150>
 800e7da:	682b      	ldr	r3, [r5, #0]
 800e7dc:	1d1a      	adds	r2, r3, #4
 800e7de:	602a      	str	r2, [r5, #0]
 800e7e0:	681d      	ldr	r5, [r3, #0]
 800e7e2:	6862      	ldr	r2, [r4, #4]
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f7fd fcfa 	bl	800c1e0 <memchr>
 800e7ec:	b108      	cbz	r0, 800e7f2 <_printf_i+0x1f2>
 800e7ee:	1b40      	subs	r0, r0, r5
 800e7f0:	6060      	str	r0, [r4, #4]
 800e7f2:	6863      	ldr	r3, [r4, #4]
 800e7f4:	6123      	str	r3, [r4, #16]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fc:	e7a8      	b.n	800e750 <_printf_i+0x150>
 800e7fe:	6923      	ldr	r3, [r4, #16]
 800e800:	462a      	mov	r2, r5
 800e802:	4649      	mov	r1, r9
 800e804:	4640      	mov	r0, r8
 800e806:	47d0      	blx	sl
 800e808:	3001      	adds	r0, #1
 800e80a:	d0ab      	beq.n	800e764 <_printf_i+0x164>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	079b      	lsls	r3, r3, #30
 800e810:	d413      	bmi.n	800e83a <_printf_i+0x23a>
 800e812:	68e0      	ldr	r0, [r4, #12]
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	4298      	cmp	r0, r3
 800e818:	bfb8      	it	lt
 800e81a:	4618      	movlt	r0, r3
 800e81c:	e7a4      	b.n	800e768 <_printf_i+0x168>
 800e81e:	2301      	movs	r3, #1
 800e820:	4632      	mov	r2, r6
 800e822:	4649      	mov	r1, r9
 800e824:	4640      	mov	r0, r8
 800e826:	47d0      	blx	sl
 800e828:	3001      	adds	r0, #1
 800e82a:	d09b      	beq.n	800e764 <_printf_i+0x164>
 800e82c:	3501      	adds	r5, #1
 800e82e:	68e3      	ldr	r3, [r4, #12]
 800e830:	9903      	ldr	r1, [sp, #12]
 800e832:	1a5b      	subs	r3, r3, r1
 800e834:	42ab      	cmp	r3, r5
 800e836:	dcf2      	bgt.n	800e81e <_printf_i+0x21e>
 800e838:	e7eb      	b.n	800e812 <_printf_i+0x212>
 800e83a:	2500      	movs	r5, #0
 800e83c:	f104 0619 	add.w	r6, r4, #25
 800e840:	e7f5      	b.n	800e82e <_printf_i+0x22e>
 800e842:	bf00      	nop
 800e844:	0800eb55 	.word	0x0800eb55
 800e848:	0800eb66 	.word	0x0800eb66

0800e84c <memcpy>:
 800e84c:	440a      	add	r2, r1
 800e84e:	4291      	cmp	r1, r2
 800e850:	f100 33ff 	add.w	r3, r0, #4294967295
 800e854:	d100      	bne.n	800e858 <memcpy+0xc>
 800e856:	4770      	bx	lr
 800e858:	b510      	push	{r4, lr}
 800e85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e862:	4291      	cmp	r1, r2
 800e864:	d1f9      	bne.n	800e85a <memcpy+0xe>
 800e866:	bd10      	pop	{r4, pc}

0800e868 <memmove>:
 800e868:	4288      	cmp	r0, r1
 800e86a:	b510      	push	{r4, lr}
 800e86c:	eb01 0402 	add.w	r4, r1, r2
 800e870:	d902      	bls.n	800e878 <memmove+0x10>
 800e872:	4284      	cmp	r4, r0
 800e874:	4623      	mov	r3, r4
 800e876:	d807      	bhi.n	800e888 <memmove+0x20>
 800e878:	1e43      	subs	r3, r0, #1
 800e87a:	42a1      	cmp	r1, r4
 800e87c:	d008      	beq.n	800e890 <memmove+0x28>
 800e87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e882:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e886:	e7f8      	b.n	800e87a <memmove+0x12>
 800e888:	4402      	add	r2, r0
 800e88a:	4601      	mov	r1, r0
 800e88c:	428a      	cmp	r2, r1
 800e88e:	d100      	bne.n	800e892 <memmove+0x2a>
 800e890:	bd10      	pop	{r4, pc}
 800e892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e89a:	e7f7      	b.n	800e88c <memmove+0x24>

0800e89c <_free_r>:
 800e89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e89e:	2900      	cmp	r1, #0
 800e8a0:	d044      	beq.n	800e92c <_free_r+0x90>
 800e8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a6:	9001      	str	r0, [sp, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e8ae:	bfb8      	it	lt
 800e8b0:	18e4      	addlt	r4, r4, r3
 800e8b2:	f000 f913 	bl	800eadc <__malloc_lock>
 800e8b6:	4a1e      	ldr	r2, [pc, #120]	; (800e930 <_free_r+0x94>)
 800e8b8:	9801      	ldr	r0, [sp, #4]
 800e8ba:	6813      	ldr	r3, [r2, #0]
 800e8bc:	b933      	cbnz	r3, 800e8cc <_free_r+0x30>
 800e8be:	6063      	str	r3, [r4, #4]
 800e8c0:	6014      	str	r4, [r2, #0]
 800e8c2:	b003      	add	sp, #12
 800e8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8c8:	f000 b90e 	b.w	800eae8 <__malloc_unlock>
 800e8cc:	42a3      	cmp	r3, r4
 800e8ce:	d908      	bls.n	800e8e2 <_free_r+0x46>
 800e8d0:	6825      	ldr	r5, [r4, #0]
 800e8d2:	1961      	adds	r1, r4, r5
 800e8d4:	428b      	cmp	r3, r1
 800e8d6:	bf01      	itttt	eq
 800e8d8:	6819      	ldreq	r1, [r3, #0]
 800e8da:	685b      	ldreq	r3, [r3, #4]
 800e8dc:	1949      	addeq	r1, r1, r5
 800e8de:	6021      	streq	r1, [r4, #0]
 800e8e0:	e7ed      	b.n	800e8be <_free_r+0x22>
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	b10b      	cbz	r3, 800e8ec <_free_r+0x50>
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	d9fa      	bls.n	800e8e2 <_free_r+0x46>
 800e8ec:	6811      	ldr	r1, [r2, #0]
 800e8ee:	1855      	adds	r5, r2, r1
 800e8f0:	42a5      	cmp	r5, r4
 800e8f2:	d10b      	bne.n	800e90c <_free_r+0x70>
 800e8f4:	6824      	ldr	r4, [r4, #0]
 800e8f6:	4421      	add	r1, r4
 800e8f8:	1854      	adds	r4, r2, r1
 800e8fa:	42a3      	cmp	r3, r4
 800e8fc:	6011      	str	r1, [r2, #0]
 800e8fe:	d1e0      	bne.n	800e8c2 <_free_r+0x26>
 800e900:	681c      	ldr	r4, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	6053      	str	r3, [r2, #4]
 800e906:	4421      	add	r1, r4
 800e908:	6011      	str	r1, [r2, #0]
 800e90a:	e7da      	b.n	800e8c2 <_free_r+0x26>
 800e90c:	d902      	bls.n	800e914 <_free_r+0x78>
 800e90e:	230c      	movs	r3, #12
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	e7d6      	b.n	800e8c2 <_free_r+0x26>
 800e914:	6825      	ldr	r5, [r4, #0]
 800e916:	1961      	adds	r1, r4, r5
 800e918:	428b      	cmp	r3, r1
 800e91a:	bf04      	itt	eq
 800e91c:	6819      	ldreq	r1, [r3, #0]
 800e91e:	685b      	ldreq	r3, [r3, #4]
 800e920:	6063      	str	r3, [r4, #4]
 800e922:	bf04      	itt	eq
 800e924:	1949      	addeq	r1, r1, r5
 800e926:	6021      	streq	r1, [r4, #0]
 800e928:	6054      	str	r4, [r2, #4]
 800e92a:	e7ca      	b.n	800e8c2 <_free_r+0x26>
 800e92c:	b003      	add	sp, #12
 800e92e:	bd30      	pop	{r4, r5, pc}
 800e930:	200000d8 	.word	0x200000d8

0800e934 <sbrk_aligned>:
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	4e0e      	ldr	r6, [pc, #56]	; (800e970 <sbrk_aligned+0x3c>)
 800e938:	460c      	mov	r4, r1
 800e93a:	6831      	ldr	r1, [r6, #0]
 800e93c:	4605      	mov	r5, r0
 800e93e:	b911      	cbnz	r1, 800e946 <sbrk_aligned+0x12>
 800e940:	f000 f8bc 	bl	800eabc <_sbrk_r>
 800e944:	6030      	str	r0, [r6, #0]
 800e946:	4621      	mov	r1, r4
 800e948:	4628      	mov	r0, r5
 800e94a:	f000 f8b7 	bl	800eabc <_sbrk_r>
 800e94e:	1c43      	adds	r3, r0, #1
 800e950:	d00a      	beq.n	800e968 <sbrk_aligned+0x34>
 800e952:	1cc4      	adds	r4, r0, #3
 800e954:	f024 0403 	bic.w	r4, r4, #3
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d007      	beq.n	800e96c <sbrk_aligned+0x38>
 800e95c:	1a21      	subs	r1, r4, r0
 800e95e:	4628      	mov	r0, r5
 800e960:	f000 f8ac 	bl	800eabc <_sbrk_r>
 800e964:	3001      	adds	r0, #1
 800e966:	d101      	bne.n	800e96c <sbrk_aligned+0x38>
 800e968:	f04f 34ff 	mov.w	r4, #4294967295
 800e96c:	4620      	mov	r0, r4
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	200000dc 	.word	0x200000dc

0800e974 <_malloc_r>:
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	1ccd      	adds	r5, r1, #3
 800e97a:	f025 0503 	bic.w	r5, r5, #3
 800e97e:	3508      	adds	r5, #8
 800e980:	2d0c      	cmp	r5, #12
 800e982:	bf38      	it	cc
 800e984:	250c      	movcc	r5, #12
 800e986:	2d00      	cmp	r5, #0
 800e988:	4607      	mov	r7, r0
 800e98a:	db01      	blt.n	800e990 <_malloc_r+0x1c>
 800e98c:	42a9      	cmp	r1, r5
 800e98e:	d905      	bls.n	800e99c <_malloc_r+0x28>
 800e990:	230c      	movs	r3, #12
 800e992:	603b      	str	r3, [r7, #0]
 800e994:	2600      	movs	r6, #0
 800e996:	4630      	mov	r0, r6
 800e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e99c:	4e2e      	ldr	r6, [pc, #184]	; (800ea58 <_malloc_r+0xe4>)
 800e99e:	f000 f89d 	bl	800eadc <__malloc_lock>
 800e9a2:	6833      	ldr	r3, [r6, #0]
 800e9a4:	461c      	mov	r4, r3
 800e9a6:	bb34      	cbnz	r4, 800e9f6 <_malloc_r+0x82>
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f7ff ffc2 	bl	800e934 <sbrk_aligned>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	d14d      	bne.n	800ea52 <_malloc_r+0xde>
 800e9b6:	6834      	ldr	r4, [r6, #0]
 800e9b8:	4626      	mov	r6, r4
 800e9ba:	2e00      	cmp	r6, #0
 800e9bc:	d140      	bne.n	800ea40 <_malloc_r+0xcc>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	eb04 0803 	add.w	r8, r4, r3
 800e9c8:	f000 f878 	bl	800eabc <_sbrk_r>
 800e9cc:	4580      	cmp	r8, r0
 800e9ce:	d13a      	bne.n	800ea46 <_malloc_r+0xd2>
 800e9d0:	6821      	ldr	r1, [r4, #0]
 800e9d2:	3503      	adds	r5, #3
 800e9d4:	1a6d      	subs	r5, r5, r1
 800e9d6:	f025 0503 	bic.w	r5, r5, #3
 800e9da:	3508      	adds	r5, #8
 800e9dc:	2d0c      	cmp	r5, #12
 800e9de:	bf38      	it	cc
 800e9e0:	250c      	movcc	r5, #12
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff ffa5 	bl	800e934 <sbrk_aligned>
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	d02b      	beq.n	800ea46 <_malloc_r+0xd2>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	442b      	add	r3, r5
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	e00e      	b.n	800ea14 <_malloc_r+0xa0>
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	1b52      	subs	r2, r2, r5
 800e9fa:	d41e      	bmi.n	800ea3a <_malloc_r+0xc6>
 800e9fc:	2a0b      	cmp	r2, #11
 800e9fe:	d916      	bls.n	800ea2e <_malloc_r+0xba>
 800ea00:	1961      	adds	r1, r4, r5
 800ea02:	42a3      	cmp	r3, r4
 800ea04:	6025      	str	r5, [r4, #0]
 800ea06:	bf18      	it	ne
 800ea08:	6059      	strne	r1, [r3, #4]
 800ea0a:	6863      	ldr	r3, [r4, #4]
 800ea0c:	bf08      	it	eq
 800ea0e:	6031      	streq	r1, [r6, #0]
 800ea10:	5162      	str	r2, [r4, r5]
 800ea12:	604b      	str	r3, [r1, #4]
 800ea14:	4638      	mov	r0, r7
 800ea16:	f104 060b 	add.w	r6, r4, #11
 800ea1a:	f000 f865 	bl	800eae8 <__malloc_unlock>
 800ea1e:	f026 0607 	bic.w	r6, r6, #7
 800ea22:	1d23      	adds	r3, r4, #4
 800ea24:	1af2      	subs	r2, r6, r3
 800ea26:	d0b6      	beq.n	800e996 <_malloc_r+0x22>
 800ea28:	1b9b      	subs	r3, r3, r6
 800ea2a:	50a3      	str	r3, [r4, r2]
 800ea2c:	e7b3      	b.n	800e996 <_malloc_r+0x22>
 800ea2e:	6862      	ldr	r2, [r4, #4]
 800ea30:	42a3      	cmp	r3, r4
 800ea32:	bf0c      	ite	eq
 800ea34:	6032      	streq	r2, [r6, #0]
 800ea36:	605a      	strne	r2, [r3, #4]
 800ea38:	e7ec      	b.n	800ea14 <_malloc_r+0xa0>
 800ea3a:	4623      	mov	r3, r4
 800ea3c:	6864      	ldr	r4, [r4, #4]
 800ea3e:	e7b2      	b.n	800e9a6 <_malloc_r+0x32>
 800ea40:	4634      	mov	r4, r6
 800ea42:	6876      	ldr	r6, [r6, #4]
 800ea44:	e7b9      	b.n	800e9ba <_malloc_r+0x46>
 800ea46:	230c      	movs	r3, #12
 800ea48:	603b      	str	r3, [r7, #0]
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	f000 f84c 	bl	800eae8 <__malloc_unlock>
 800ea50:	e7a1      	b.n	800e996 <_malloc_r+0x22>
 800ea52:	6025      	str	r5, [r4, #0]
 800ea54:	e7de      	b.n	800ea14 <_malloc_r+0xa0>
 800ea56:	bf00      	nop
 800ea58:	200000d8 	.word	0x200000d8

0800ea5c <_realloc_r>:
 800ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	4680      	mov	r8, r0
 800ea62:	4614      	mov	r4, r2
 800ea64:	460e      	mov	r6, r1
 800ea66:	b921      	cbnz	r1, 800ea72 <_realloc_r+0x16>
 800ea68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	f7ff bf81 	b.w	800e974 <_malloc_r>
 800ea72:	b92a      	cbnz	r2, 800ea80 <_realloc_r+0x24>
 800ea74:	f7ff ff12 	bl	800e89c <_free_r>
 800ea78:	4625      	mov	r5, r4
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	f000 f838 	bl	800eaf4 <_malloc_usable_size_r>
 800ea84:	4284      	cmp	r4, r0
 800ea86:	4607      	mov	r7, r0
 800ea88:	d802      	bhi.n	800ea90 <_realloc_r+0x34>
 800ea8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea8e:	d812      	bhi.n	800eab6 <_realloc_r+0x5a>
 800ea90:	4621      	mov	r1, r4
 800ea92:	4640      	mov	r0, r8
 800ea94:	f7ff ff6e 	bl	800e974 <_malloc_r>
 800ea98:	4605      	mov	r5, r0
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d0ed      	beq.n	800ea7a <_realloc_r+0x1e>
 800ea9e:	42bc      	cmp	r4, r7
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	bf28      	it	cs
 800eaa6:	463a      	movcs	r2, r7
 800eaa8:	f7ff fed0 	bl	800e84c <memcpy>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4640      	mov	r0, r8
 800eab0:	f7ff fef4 	bl	800e89c <_free_r>
 800eab4:	e7e1      	b.n	800ea7a <_realloc_r+0x1e>
 800eab6:	4635      	mov	r5, r6
 800eab8:	e7df      	b.n	800ea7a <_realloc_r+0x1e>
	...

0800eabc <_sbrk_r>:
 800eabc:	b538      	push	{r3, r4, r5, lr}
 800eabe:	4d06      	ldr	r5, [pc, #24]	; (800ead8 <_sbrk_r+0x1c>)
 800eac0:	2300      	movs	r3, #0
 800eac2:	4604      	mov	r4, r0
 800eac4:	4608      	mov	r0, r1
 800eac6:	602b      	str	r3, [r5, #0]
 800eac8:	f7fd ff86 	bl	800c9d8 <_sbrk>
 800eacc:	1c43      	adds	r3, r0, #1
 800eace:	d102      	bne.n	800ead6 <_sbrk_r+0x1a>
 800ead0:	682b      	ldr	r3, [r5, #0]
 800ead2:	b103      	cbz	r3, 800ead6 <_sbrk_r+0x1a>
 800ead4:	6023      	str	r3, [r4, #0]
 800ead6:	bd38      	pop	{r3, r4, r5, pc}
 800ead8:	200000e0 	.word	0x200000e0

0800eadc <__malloc_lock>:
 800eadc:	4801      	ldr	r0, [pc, #4]	; (800eae4 <__malloc_lock+0x8>)
 800eade:	f000 b811 	b.w	800eb04 <__retarget_lock_acquire_recursive>
 800eae2:	bf00      	nop
 800eae4:	200000e4 	.word	0x200000e4

0800eae8 <__malloc_unlock>:
 800eae8:	4801      	ldr	r0, [pc, #4]	; (800eaf0 <__malloc_unlock+0x8>)
 800eaea:	f000 b80c 	b.w	800eb06 <__retarget_lock_release_recursive>
 800eaee:	bf00      	nop
 800eaf0:	200000e4 	.word	0x200000e4

0800eaf4 <_malloc_usable_size_r>:
 800eaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaf8:	1f18      	subs	r0, r3, #4
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bfbc      	itt	lt
 800eafe:	580b      	ldrlt	r3, [r1, r0]
 800eb00:	18c0      	addlt	r0, r0, r3
 800eb02:	4770      	bx	lr

0800eb04 <__retarget_lock_acquire_recursive>:
 800eb04:	4770      	bx	lr

0800eb06 <__retarget_lock_release_recursive>:
 800eb06:	4770      	bx	lr

0800eb08 <_init>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	bf00      	nop
 800eb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0e:	bc08      	pop	{r3}
 800eb10:	469e      	mov	lr, r3
 800eb12:	4770      	bx	lr

0800eb14 <_fini>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	bf00      	nop
 800eb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb1a:	bc08      	pop	{r3}
 800eb1c:	469e      	mov	lr, r3
 800eb1e:	4770      	bx	lr
