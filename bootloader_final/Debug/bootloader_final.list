
bootloader_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  080092b8  080092b8  000192b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e8c  08009e8c  00020424  2**0
                  CONTENTS
  4 .ARM          00000008  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e94  08009e94  00020424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08009e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020424  2**0
                  CONTENTS
 10 .bss          0001c174  20000424  20000424  00020424  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001c598  2001c598  00020424  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020424  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b717  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a1  00000000  00000000  0002bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  0002e798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bd2  00000000  00000000  0002f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c189  00000000  00000000  00050c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d94  00000000  00000000  0005cda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121b37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b48  00000000  00000000  00121b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000424 	.word	0x20000424
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a0 	.word	0x080092a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000428 	.word	0x20000428
 80001cc:	080092a0 	.word	0x080092a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <printmsg>:


/*************************Print Message Functions**************************/

void printmsg(char *format,...)
{
 8000ff8:	b40f      	push	{r0, r1, r2, r3}
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b096      	sub	sp, #88	; 0x58
 8000ffe:	af00      	add	r7, sp, #0
	char str[80];
	va_list args;
	va_start(args, format);
 8001000:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001004:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800100e:	4618      	mov	r0, r3
 8001010:	f005 fa28 	bl	8006464 <vsiprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f8d9 	bl	80001d0 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	f107 0108 	add.w	r1, r7, #8
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <printmsg+0x48>)
 800102c:	f002 fbab 	bl	8003786 <HAL_UART_Transmit>
	va_end(args);
}
 8001030:	bf00      	nop
 8001032:	3758      	adds	r7, #88	; 0x58
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800103a:	b004      	add	sp, #16
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2001c518 	.word	0x2001c518

08001044 <bootloader_default_mode>:

/*************************Bootloader Default Mode *************************/

void bootloader_default_mode(void)																//default mode blinky
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	if( myBootloader.mainMenuState == Idle
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <bootloader_default_mode+0x30>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10f      	bne.n	8001070 <bootloader_default_mode+0x2c>
		&& myBootloader.mainMenuActive == yes){
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <bootloader_default_mode+0x30>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10b      	bne.n	8001070 <bootloader_default_mode+0x2c>
		printmsg("BL BOOTLOADER MSG: Hello from the default mode\r\n");
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <bootloader_default_mode+0x34>)
 800105a:	f7ff ffcd 	bl	8000ff8 <printmsg>
		while(1){

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <bootloader_default_mode+0x38>)
 8001064:	f001 fecf 	bl	8002e06 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f000 ff9b 	bl	8001fa4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800106e:	e7f6      	b.n	800105e <bootloader_default_mode+0x1a>
		}
	}
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2001c55c 	.word	0x2001c55c
 8001078:	080092b8 	.word	0x080092b8
 800107c:	40020c00 	.word	0x40020c00

08001080 <bootloader_jump_to_app1>:

/*************************Bootloader Jump to APP1 *************************/

void bootloader_jump_to_app1(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
	// Check if user application is valid by verifying stack pointer

	if ((*(__IO uint32_t*)FLASH_APP_1_START) != 0xFFFFFFFF && myBootloader.mainMenuState == app1
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <bootloader_jump_to_app1+0x54>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108e:	d019      	beq.n	80010c4 <bootloader_jump_to_app1+0x44>
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <bootloader_jump_to_app1+0x58>)
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d115      	bne.n	80010c4 <bootloader_jump_to_app1+0x44>
			&& myBootloader.mainMenuActive == yes)
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <bootloader_jump_to_app1+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d111      	bne.n	80010c4 <bootloader_jump_to_app1+0x44>
	{
		printmsg("BL BOOTLOADER MSG: Hello from the Jump APP1 \r\n");
 80010a0:	480e      	ldr	r0, [pc, #56]	; (80010dc <bootloader_jump_to_app1+0x5c>)
 80010a2:	f7ff ffa9 	bl	8000ff8 <printmsg>

		typedef void (*pFunction)(void);										//1. holding to reset handler address
		pFunction jump_to_app1;

		/* Jump to user application */
		uint32_t reset_handler_addr=*(__IO uint32_t*) (FLASH_APP_1_START + 4);	//2. Reset Handler = msp+4
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <bootloader_jump_to_app1+0x60>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]

		jump_to_app1=(pFunction)reset_handler_addr;								//3. new operation with reset handler
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	60bb      	str	r3, [r7, #8]

		/* Initialize user application's stack pointer */
		__set_MSP(*(__IO uint32_t*) FLASH_APP_1_START);							//4. flash jump adress = msp value
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <bootloader_jump_to_app1+0x54>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f383 8808 	msr	MSP, r3
}
 80010bc:	bf00      	nop

		/* Jump to user application */
		jump_to_app1();
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4798      	blx	r3
	{
 80010c2:	e003      	b.n	80010cc <bootloader_jump_to_app1+0x4c>
	}
	else{
		printmsg("APP1 Error");
 80010c4:	4807      	ldr	r0, [pc, #28]	; (80010e4 <bootloader_jump_to_app1+0x64>)
 80010c6:	f7ff ff97 	bl	8000ff8 <printmsg>
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08008000 	.word	0x08008000
 80010d8:	2001c55c 	.word	0x2001c55c
 80010dc:	080092ec 	.word	0x080092ec
 80010e0:	08008004 	.word	0x08008004
 80010e4:	0800931c 	.word	0x0800931c

080010e8 <bootloader_jump_to_app2>:


/*************************Bootloader Jump to APP2 *************************/

void bootloader_jump_to_app2(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

	// Check if user application is valid by verifying stack pointer

	if ((*(__IO uint32_t*)FLASH_APP_2_START) != 0xFFFFFFFF && myBootloader.mainMenuState == app2
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <bootloader_jump_to_app2+0x54>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	d019      	beq.n	800112c <bootloader_jump_to_app2+0x44>
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <bootloader_jump_to_app2+0x58>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d115      	bne.n	800112c <bootloader_jump_to_app2+0x44>
			&& myBootloader.mainMenuActive == yes)
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <bootloader_jump_to_app2+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d111      	bne.n	800112c <bootloader_jump_to_app2+0x44>
	{
		printmsg("BL BOOTLOADER MSG: Hello from the Jump APP2 \r\n");
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <bootloader_jump_to_app2+0x5c>)
 800110a:	f7ff ff75 	bl	8000ff8 <printmsg>

		typedef void (*pFunction)(void);								//1. holding to reset handler address
		pFunction jump_to_app2;

		/* Jump to user application */
		uint32_t reset_handler_addr=*(__IO uint32_t*) (FLASH_APP_2_START + 4);	//2. Reset Handler = msp+4
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <bootloader_jump_to_app2+0x60>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]

		jump_to_app2=(pFunction)reset_handler_addr;						//3. new operation with reset handler
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	60bb      	str	r3, [r7, #8]

		/* Initialize user application's stack pointer */
		__set_MSP(*(__IO uint32_t*) FLASH_APP_2_START);					//4. flash jump adress = msp value
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <bootloader_jump_to_app2+0x54>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f383 8808 	msr	MSP, r3
}
 8001124:	bf00      	nop

		/* Jump to user application */
		jump_to_app2();
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4798      	blx	r3
	{
 800112a:	e003      	b.n	8001134 <bootloader_jump_to_app2+0x4c>
	}
	else{
		printmsg("APP2 Error");
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <bootloader_jump_to_app2+0x64>)
 800112e:	f7ff ff63 	bl	8000ff8 <printmsg>
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800c000 	.word	0x0800c000
 8001140:	2001c55c 	.word	0x2001c55c
 8001144:	08009328 	.word	0x08009328
 8001148:	0800c004 	.word	0x0800c004
 800114c:	08009358 	.word	0x08009358

08001150 <execute_flash_erase>:


/*************************Bootloader Execute Flash Erase *************************/

uint8_t execute_flash_erase(uint8_t sector_number,uint8_t number_of_sector)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
		uint32_t sectorError;													  //STM32F407 has 11 sectors [0 to 11]
																				  //number_of_sector has to be in the range of 0 to 11
																			      // if sector_number = 0xff , that means mass erase
		HAL_StatusTypeDef status;

		if(number_of_sector>11)
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b0b      	cmp	r3, #11
 8001164:	d901      	bls.n	800116a <execute_flash_erase+0x1a>
			return INVALID_SECTOR;
 8001166:	2304      	movs	r3, #4
 8001168:	e035      	b.n	80011d6 <execute_flash_erase+0x86>
	if((sector_number==0xFF)||sector_number<=11)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2bff      	cmp	r3, #255	; 0xff
 800116e:	d002      	beq.n	8001176 <execute_flash_erase+0x26>
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b0b      	cmp	r3, #11
 8001174:	d82e      	bhi.n	80011d4 <execute_flash_erase+0x84>
	{
		if(sector_number==(uint8_t)0xFF)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2bff      	cmp	r3, #255	; 0xff
 800117a:	d102      	bne.n	8001182 <execute_flash_erase+0x32>
		 {
			flashErase_handle.TypeErase=FLASH_TYPEERASE_MASSERASE;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	e012      	b.n	80011a8 <execute_flash_erase+0x58>
		 }
		else
		 {

			uint8_t remaining_sector = 11 - sector_number;						/*calculating how many sectors needs to erased */
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f1c3 030b 	rsb	r3, r3, #11
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if(number_of_sector>remaining_sector)
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001192:	429a      	cmp	r2, r3
 8001194:	d902      	bls.n	800119c <execute_flash_erase+0x4c>
              {
        	    number_of_sector=remaining_sector;
 8001196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800119a:	71bb      	strb	r3, [r7, #6]
              }

            flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
            flashErase_handle.Sector = sector_number; 							// this is the initial sector
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	61bb      	str	r3, [r7, #24]
            flashErase_handle.NbSectors = number_of_sector;						//this is the number of sector that what you want how many sector to erase
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	61fb      	str	r3, [r7, #28]
	    }
		flashErase_handle.Banks=FLASH_BANK_1;									//*Get access to touch the flash registers
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]

		HAL_FLASH_Unlock();
 80011ac:	f001 f94e 	bl	800244c <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; 				//  mcu will work on this voltage range
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fac2 	bl	8002748 <HAL_FLASHEx_Erase>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 80011ca:	f001 f961 	bl	8002490 <HAL_FLASH_Lock>

		return status;
 80011ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d2:	e000      	b.n	80011d6 <execute_flash_erase+0x86>

	}
	return INVALID_SECTOR;
 80011d4:	2304      	movs	r3, #4


}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <bootloader_erase_flash_sector>:

/*************************Bootloader Erase Flash Sector *************************/

void bootloader_erase_flash_sector(uint8_t sector_number1,uint8_t number_of_sector1)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]

	 uint8_t erase_status=0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
	 printmsg("BL_DEBUG_MSG: bootloader_erase_flash_sector !!\n");
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <bootloader_erase_flash_sector+0x88>)
 80011f6:	f7ff feff 	bl	8000ff8 <printmsg>
	 erase_status=execute_flash_erase(sector_number1,number_of_sector1);
 80011fa:	79ba      	ldrb	r2, [r7, #6]
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ffa5 	bl	8001150 <execute_flash_erase>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
	 printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status); //HARDFAULTA DÜŞÜYOR
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <bootloader_erase_flash_sector+0x8c>)
 8001210:	f7ff fef2 	bl	8000ff8 <printmsg>
	 	 if(erase_status == HAL_OK)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <bootloader_erase_flash_sector+0x42>
	     {
	         printmsg("\n  Erase Status: Success  Code: Flash_HAL_OK\n");
 800121a:	4815      	ldr	r0, [pc, #84]	; (8001270 <bootloader_erase_flash_sector+0x90>)
 800121c:	f7ff feec 	bl	8000ff8 <printmsg>
	     else
	     {
	         printmsg("\n  Erase Status: Fail  Code: UNKNOWN_ERROR_CODE\n");
	     }

}
 8001220:	e01e      	b.n	8001260 <bootloader_erase_flash_sector+0x80>
	     else if(erase_status == HAL_ERROR)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d103      	bne.n	8001230 <bootloader_erase_flash_sector+0x50>
	    	 printmsg("\n  Erase Status: Fail  Code: Flash_HAL_ERROR\n");
 8001228:	4812      	ldr	r0, [pc, #72]	; (8001274 <bootloader_erase_flash_sector+0x94>)
 800122a:	f7ff fee5 	bl	8000ff8 <printmsg>
}
 800122e:	e017      	b.n	8001260 <bootloader_erase_flash_sector+0x80>
	     else if(erase_status == HAL_BUSY)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d103      	bne.n	800123e <bootloader_erase_flash_sector+0x5e>
	    	 printmsg("\n  Erase Status: Fail  Code: Flash_HAL_BUSY\n");
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <bootloader_erase_flash_sector+0x98>)
 8001238:	f7ff fede 	bl	8000ff8 <printmsg>
}
 800123c:	e010      	b.n	8001260 <bootloader_erase_flash_sector+0x80>
	     else if(erase_status == HAL_TIMEOUT)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d103      	bne.n	800124c <bootloader_erase_flash_sector+0x6c>
	    	 printmsg("\n  Erase Status: Fail  Code: Flash_HAL_TIMEOUT\n");
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <bootloader_erase_flash_sector+0x9c>)
 8001246:	f7ff fed7 	bl	8000ff8 <printmsg>
}
 800124a:	e009      	b.n	8001260 <bootloader_erase_flash_sector+0x80>
	      else if(erase_status == INVALID_SECTOR)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d103      	bne.n	800125a <bootloader_erase_flash_sector+0x7a>
	    	  printmsg("\n  Erase Status: Fail  Code: Flash_HAL_INV_SECTOR\n");
 8001252:	480b      	ldr	r0, [pc, #44]	; (8001280 <bootloader_erase_flash_sector+0xa0>)
 8001254:	f7ff fed0 	bl	8000ff8 <printmsg>
}
 8001258:	e002      	b.n	8001260 <bootloader_erase_flash_sector+0x80>
	         printmsg("\n  Erase Status: Fail  Code: UNKNOWN_ERROR_CODE\n");
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <bootloader_erase_flash_sector+0xa4>)
 800125c:	f7ff fecc 	bl	8000ff8 <printmsg>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08009364 	.word	0x08009364
 800126c:	08009394 	.word	0x08009394
 8001270:	080093bc 	.word	0x080093bc
 8001274:	080093ec 	.word	0x080093ec
 8001278:	0800941c 	.word	0x0800941c
 800127c:	0800944c 	.word	0x0800944c
 8001280:	0800947c 	.word	0x0800947c
 8001284:	080094b0 	.word	0x080094b0

08001288 <bootloader_get_mcu_chip_id>:

/*************************Bootloader Get MCU Chip ID *************************/

uint16_t bootloader_get_mcu_chip_id(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0


	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <bootloader_get_mcu_chip_id+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	80fb      	strh	r3, [r7, #6]
	return  cid;
 800129a:	88fb      	ldrh	r3, [r7, #6]

}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e0042000 	.word	0xe0042000

080012ac <bootloader_handle_read_sector_protection_status>:

/*************************Bootloader Read Sector Protection Status *************************/

uint16_t bootloader_handle_read_sector_protection_status(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

		FLASH_OBProgramInitTypeDef OBInit;						//This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
		HAL_FLASH_OB_Unlock();									//First unlock the OB(Option Byte) memory access
 80012b2:	f001 f8fd 	bl	80024b0 <HAL_FLASH_OB_Unlock>

		HAL_FLASHEx_OBGetConfig(&OBInit);						//get the OB configuration details
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fab5 	bl	8002828 <HAL_FLASHEx_OBGetConfig>

		HAL_FLASH_Lock();										//Lock back .
 80012be:	f001 f8e7 	bl	8002490 <HAL_FLASH_Lock>


		return (uint16_t)OBInit.WRPSector;						// r/w protection status of the sectors.
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b29b      	uxth	r3, r3
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <upload_New_App>:

/************************* Uploading BIN File to The Flash Spesific Address *************************/

void upload_New_App(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
		HAL_UART_Receive_IT(&huart3, (uint8_t*)RX_Uploading_Data, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	491e      	ldr	r1, [pc, #120]	; (8001354 <upload_New_App+0x84>)
 80012da:	481f      	ldr	r0, [pc, #124]	; (8001358 <upload_New_App+0x88>)
 80012dc:	f002 fb87 	bl	80039ee <HAL_UART_Receive_IT>
		uint32_t addr;
		uint32_t pageError;
		uint32_t *ptr=(uint32_t*)Temp_RX_Data;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <upload_New_App+0x8c>)
 80012e2:	60bb      	str	r3, [r7, #8]

		if(myBootloader.UploadMode==app1)
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <upload_New_App+0x90>)
 80012e6:	789b      	ldrb	r3, [r3, #2]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <upload_New_App+0x2a>
		{
			bootloader_erase_flash_sector(2,1); 					//flash erase before upload the new app //HARDFAULTA DÜŞÜYOR 2.HAL TRANSMİTTE
 80012ec:	2101      	movs	r1, #1
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff ff76 	bl	80011e0 <bootloader_erase_flash_sector>
			addr=FLASH_APP_1_START;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <upload_New_App+0x94>)
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e009      	b.n	800130e <upload_New_App+0x3e>
		}
		else if(myBootloader.UploadMode==app2)
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <upload_New_App+0x90>)
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d105      	bne.n	800130e <upload_New_App+0x3e>
		{
			bootloader_erase_flash_sector(3,1); 					//flash erase before upload the new app
 8001302:	2101      	movs	r1, #1
 8001304:	2003      	movs	r0, #3
 8001306:	f7ff ff6b 	bl	80011e0 <bootloader_erase_flash_sector>
			addr=FLASH_APP_2_START;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <upload_New_App+0x98>)
 800130c:	60fb      	str	r3, [r7, #12]
		}


		HAL_FLASH_Unlock();
 800130e:	f001 f89d 	bl	800244c <HAL_FLASH_Unlock>
		for(int i=0;i<PAGE_SIZE/4;i++)
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e012      	b.n	800133e <upload_New_App+0x6e>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, *ptr++);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	461c      	mov	r4, r3
 8001324:	4615      	mov	r5, r2
 8001326:	4622      	mov	r2, r4
 8001328:	462b      	mov	r3, r5
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	2002      	movs	r0, #2
 800132e:	f001 f839 	bl	80023a4 <HAL_FLASH_Program>
			    addr += 4;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<PAGE_SIZE/4;i++)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8001344:	dbe8      	blt.n	8001318 <upload_New_App+0x48>
			}
		HAL_FLASH_Lock();
 8001346:	f001 f8a3 	bl	8002490 <HAL_FLASH_Lock>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000440 	.word	0x20000440
 8001358:	2001c518 	.word	0x2001c518
 800135c:	2000e440 	.word	0x2000e440
 8001360:	2001c55c 	.word	0x2001c55c
 8001364:	08008000 	.word	0x08008000
 8001368:	0800c000 	.word	0x0800c000

0800136c <HAL_UART_RxCpltCallback>:

/************************* UART CALLBACK FUNCTION *************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	 if (huart == &huart3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_RxCpltCallback+0x4c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d119      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x44>
	 {
		 bytecount++;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_UART_RxCpltCallback+0x50>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_UART_RxCpltCallback+0x50>)
 8001384:	6013      	str	r3, [r2, #0]

		 HAL_UART_Receive_IT(&huart3, (uint8_t*)RX_Uploading_Data, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	490d      	ldr	r1, [pc, #52]	; (80013c0 <HAL_UART_RxCpltCallback+0x54>)
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_UART_RxCpltCallback+0x4c>)
 800138c:	f002 fb2f 	bl	80039ee <HAL_UART_Receive_IT>


			 if (bytecount == PAGE_SIZE )
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_UART_RxCpltCallback+0x50>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8001398:	d10a      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x44>
			 {
				 size_t data_size = sizeof(RX_Uploading_Data);
 800139a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800139e:	60fb      	str	r3, [r7, #12]
				 memcpy(Temp_RX_Data, RX_Uploading_Data, data_size);
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4907      	ldr	r1, [pc, #28]	; (80013c0 <HAL_UART_RxCpltCallback+0x54>)
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <HAL_UART_RxCpltCallback+0x58>)
 80013a6:	f003 fae5 	bl	8004974 <memcpy>
				 bytecount=0;
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_UART_RxCpltCallback+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			 }
	 }

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2001c518 	.word	0x2001c518
 80013bc:	2001c440 	.word	0x2001c440
 80013c0:	20000440 	.word	0x20000440
 80013c4:	2000e440 	.word	0x2000e440

080013c8 <menuOpenSelectionMonitor>:


/********************* MENU OPEN SELECTION MONITOR ***********************/

uint8_t menuOpenSelectionMonitor(void)
	    {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	    	static uint8_t press_info[] = "-PRESS M or m TO SHOW MENU\n";
	    	static uint8_t menu='\0';
	    	memset(bootloader_rx_buffer,0,200);
 80013cc:	22c8      	movs	r2, #200	; 0xc8
 80013ce:	2100      	movs	r1, #0
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <menuOpenSelectionMonitor+0x3c>)
 80013d2:	f003 fadd 	bl	8004990 <memset>
	    	HAL_UART_Transmit(&huart3, press_info, sizeof(press_info),100);
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	221c      	movs	r2, #28
 80013da:	490b      	ldr	r1, [pc, #44]	; (8001408 <menuOpenSelectionMonitor+0x40>)
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <menuOpenSelectionMonitor+0x44>)
 80013de:	f002 f9d2 	bl	8003786 <HAL_UART_Transmit>
	    	HAL_UART_Receive(&huart3, &menu, sizeof(menu),HAL_MAX_DELAY);
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	2201      	movs	r2, #1
 80013e8:	4909      	ldr	r1, [pc, #36]	; (8001410 <menuOpenSelectionMonitor+0x48>)
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <menuOpenSelectionMonitor+0x44>)
 80013ec:	f002 fa5d 	bl	80038aa <HAL_UART_Receive>
	    	while(!menu);//wait for the users response
 80013f0:	bf00      	nop
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <menuOpenSelectionMonitor+0x48>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0fb      	beq.n	80013f2 <menuOpenSelectionMonitor+0x2a>
	    	return menu;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <menuOpenSelectionMonitor+0x48>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
	    }
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2001c444 	.word	0x2001c444
 8001408:	20000000 	.word	0x20000000
 800140c:	2001c518 	.word	0x2001c518
 8001410:	2001c55f 	.word	0x2001c55f

08001414 <isUserWantToSeeMenu>:

/********************* CONTROL IF THE USER WANTS TO SEE MENU ******************/

bool isUserWantToSeeMenu(uint8_t rxData)
	    {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	    	if(rxData == 'M' || rxData == 'm')
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b4d      	cmp	r3, #77	; 0x4d
 8001422:	d002      	beq.n	800142a <isUserWantToSeeMenu+0x16>
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b6d      	cmp	r3, #109	; 0x6d
 8001428:	d107      	bne.n	800143a <isUserWantToSeeMenu+0x26>
	    	{
	    		myBootloader.mainMenuActive = yes;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <isUserWantToSeeMenu+0x3c>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
	    		myBootloader.mainMenuState = Idle;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <isUserWantToSeeMenu+0x3c>)
 8001432:	2200      	movs	r2, #0
 8001434:	705a      	strb	r2, [r3, #1]
	    		return true;
 8001436:	2301      	movs	r3, #1
 8001438:	e003      	b.n	8001442 <isUserWantToSeeMenu+0x2e>
	    	}
	    	myBootloader.mainMenuActive = no;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <isUserWantToSeeMenu+0x3c>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
	    	return false;
 8001440:	2300      	movs	r3, #0
	    }
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2001c55c 	.word	0x2001c55c

08001454 <SelectedMenu>:

/********************* STATE MACHINE **********************************/

void SelectedMenu(uint8_t selectedMenu)
	    {
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	    	uint8_t uploadModeRx;
	    	if( selectedMenu != 'E' && myBootloader.mainMenuActive == yes && myBootloader.mainMenuState == Idle)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b45      	cmp	r3, #69	; 0x45
 8001462:	f000 80f0 	beq.w	8001646 <SelectedMenu+0x1f2>
 8001466:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <SelectedMenu+0x204>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	f040 80eb 	bne.w	8001646 <SelectedMenu+0x1f2>
 8001470:	4b79      	ldr	r3, [pc, #484]	; (8001658 <SelectedMenu+0x204>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 80e6 	bne.w	8001646 <SelectedMenu+0x1f2>
	    	{
	    		switch(selectedMenu)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	3b30      	subs	r3, #48	; 0x30
 800147e:	2b07      	cmp	r3, #7
 8001480:	f200 80d9 	bhi.w	8001636 <SelectedMenu+0x1e2>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <SelectedMenu+0x38>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	080014ad 	.word	0x080014ad
 8001490:	080014bf 	.word	0x080014bf
 8001494:	080014d1 	.word	0x080014d1
 8001498:	080014e3 	.word	0x080014e3
 800149c:	080014ff 	.word	0x080014ff
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	080015b3 	.word	0x080015b3
 80014a8:	080015f5 	.word	0x080015f5
	    		{
	    			case '0':
	    				printmsg("BL DEBUG MESG: 0 is pressed and going to default boot mode\r\n");
 80014ac:	486b      	ldr	r0, [pc, #428]	; (800165c <SelectedMenu+0x208>)
 80014ae:	f7ff fda3 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState=Idle;
 80014b2:	4b69      	ldr	r3, [pc, #420]	; (8001658 <SelectedMenu+0x204>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	705a      	strb	r2, [r3, #1]
	    				bootloader_default_mode();
 80014b8:	f7ff fdc4 	bl	8001044 <bootloader_default_mode>
	    				break;
 80014bc:	e0c2      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '1':
	    				printmsg("BL DEBUG MESG: 1 is pressed and going to user APP-1\r\n");
 80014be:	4868      	ldr	r0, [pc, #416]	; (8001660 <SelectedMenu+0x20c>)
 80014c0:	f7ff fd9a 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState = jumpApp1;
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <SelectedMenu+0x204>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	705a      	strb	r2, [r3, #1]
	    				bootloader_jump_to_app1();
 80014ca:	f7ff fdd9 	bl	8001080 <bootloader_jump_to_app1>
	    				break;
 80014ce:	e0b9      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '2':
	    				printmsg("BL DEBUG MESG: 2 is pressed and going to user APP-2\r\n");
 80014d0:	4864      	ldr	r0, [pc, #400]	; (8001664 <SelectedMenu+0x210>)
 80014d2:	f7ff fd91 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState = jumpApp2;
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <SelectedMenu+0x204>)
 80014d8:	2202      	movs	r2, #2
 80014da:	705a      	strb	r2, [r3, #1]
	    				bootloader_jump_to_app2();
 80014dc:	f7ff fe04 	bl	80010e8 <bootloader_jump_to_app2>
	    				break;
 80014e0:	e0b0      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '3':
	    				printmsg("BL DEBUG MESG: 3 is pressed and going to delete APP-1\r\n");
 80014e2:	4861      	ldr	r0, [pc, #388]	; (8001668 <SelectedMenu+0x214>)
 80014e4:	f7ff fd88 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState = deleteApp1;
 80014e8:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <SelectedMenu+0x204>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	705a      	strb	r2, [r3, #1]
	    				//app 1 flash erase function
	    				bootloader_erase_flash_sector(2,1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2002      	movs	r0, #2
 80014f2:	f7ff fe75 	bl	80011e0 <bootloader_erase_flash_sector>
	    				printmsg("BL DEBUG MESG: APP-1 is deleted\r\n");
 80014f6:	485d      	ldr	r0, [pc, #372]	; (800166c <SelectedMenu+0x218>)
 80014f8:	f7ff fd7e 	bl	8000ff8 <printmsg>
	    				break;
 80014fc:	e0a2      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '4':
	    				printmsg("BL DEBUG MESG: 4 is pressed and going to delete APP-2\r\n");
 80014fe:	485c      	ldr	r0, [pc, #368]	; (8001670 <SelectedMenu+0x21c>)
 8001500:	f7ff fd7a 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState = deleteApp2;
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <SelectedMenu+0x204>)
 8001506:	2204      	movs	r2, #4
 8001508:	705a      	strb	r2, [r3, #1]
	    				//app 2 flash erase function
	    				bootloader_erase_flash_sector(3,1);
 800150a:	2101      	movs	r1, #1
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fe67 	bl	80011e0 <bootloader_erase_flash_sector>
	    				printmsg("BL DEBUG MESG: APP-2 is deleted\r\n");
 8001512:	4858      	ldr	r0, [pc, #352]	; (8001674 <SelectedMenu+0x220>)
 8001514:	f7ff fd70 	bl	8000ff8 <printmsg>
	    				break;
 8001518:	e094      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '5':
	    				printmsg("BL DEBUG MESG: 5 is pressed and now you can add bin file\r\n");
 800151a:	4857      	ldr	r0, [pc, #348]	; (8001678 <SelectedMenu+0x224>)
 800151c:	f7ff fd6c 	bl	8000ff8 <printmsg>
	    				printmsg("BL DEBUG MESG: Please choose where you want to upload this file\r\n");
 8001520:	4856      	ldr	r0, [pc, #344]	; (800167c <SelectedMenu+0x228>)
 8001522:	f7ff fd69 	bl	8000ff8 <printmsg>
	    				printmsg("BL DEBUG MESG: Click 6 for APP-1\r\n");
 8001526:	4856      	ldr	r0, [pc, #344]	; (8001680 <SelectedMenu+0x22c>)
 8001528:	f7ff fd66 	bl	8000ff8 <printmsg>
	    				printmsg("BL DEBUG MESG: Click 7 for APP-2\r\n");
 800152c:	4855      	ldr	r0, [pc, #340]	; (8001684 <SelectedMenu+0x230>)
 800152e:	f7ff fd63 	bl	8000ff8 <printmsg>
	    				myBootloader.mainMenuState = uploadModeEnable;
 8001532:	4b49      	ldr	r3, [pc, #292]	; (8001658 <SelectedMenu+0x204>)
 8001534:	2205      	movs	r2, #5
 8001536:	705a      	strb	r2, [r3, #1]
	    				myBootloader.UploadMode = enable;
 8001538:	4b47      	ldr	r3, [pc, #284]	; (8001658 <SelectedMenu+0x204>)
 800153a:	2200      	movs	r2, #0
 800153c:	709a      	strb	r2, [r3, #2]
	    				HAL_UART_Receive(&huart3, &uploadModeRx, sizeof(uploadModeRx), HAL_MAX_DELAY);
 800153e:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2201      	movs	r2, #1
 8001548:	484f      	ldr	r0, [pc, #316]	; (8001688 <SelectedMenu+0x234>)
 800154a:	f002 f9ae 	bl	80038aa <HAL_UART_Receive>
	    				while(!uploadModeRx);//wait for the user response
 800154e:	bf00      	nop
 8001550:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0fb      	beq.n	8001550 <SelectedMenu+0xfc>

	    				if(uploadModeRx == '6' && myBootloader.UploadMode == enable)
 8001558:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800155c:	2b36      	cmp	r3, #54	; 0x36
 800155e:	d10f      	bne.n	8001580 <SelectedMenu+0x12c>
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <SelectedMenu+0x204>)
 8001562:	789b      	ldrb	r3, [r3, #2]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10b      	bne.n	8001580 <SelectedMenu+0x12c>
	    				{
	    					myBootloader.UploadMode = app1;
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <SelectedMenu+0x204>)
 800156a:	2201      	movs	r2, #1
 800156c:	709a      	strb	r2, [r3, #2]
	    					printmsg("BL DEBUG MESG: Now you can add your bin file for APP-1\r\n");
 800156e:	4847      	ldr	r0, [pc, #284]	; (800168c <SelectedMenu+0x238>)
 8001570:	f7ff fd42 	bl	8000ff8 <printmsg>

	    					upload_New_App();
 8001574:	f7ff feac 	bl	80012d0 <upload_New_App>
	    						//1.uart receive interrupt
	    						//2.receive edilen her byte volatile uint32_t ReceiveDataArr[14336]; ile rame kaydolur
	    						//3.ramdeki veriler bir volatile uint32_t TempDataArr[14336]; değikenine kopyalanır
	    						//4.volatile uint32_t TempDataArr[14336]; içerisindeki veriler flasha yazılır
	    						//5.chip kendine reset atar ve default olarak app1 i çalıştırır.
	    					printmsg("BL DEBUG MESG: APP-1 is uploaded\r\n");
 8001578:	4845      	ldr	r0, [pc, #276]	; (8001690 <SelectedMenu+0x23c>)
 800157a:	f7ff fd3d 	bl	8000ff8 <printmsg>
 800157e:	e017      	b.n	80015b0 <SelectedMenu+0x15c>
	    				}
	    				else if(uploadModeRx == '7' && myBootloader.UploadMode == enable)
 8001580:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001584:	2b37      	cmp	r3, #55	; 0x37
 8001586:	d10f      	bne.n	80015a8 <SelectedMenu+0x154>
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <SelectedMenu+0x204>)
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10b      	bne.n	80015a8 <SelectedMenu+0x154>
	    				{
	    					myBootloader.UploadMode = app2;
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <SelectedMenu+0x204>)
 8001592:	2202      	movs	r2, #2
 8001594:	709a      	strb	r2, [r3, #2]
	    					printmsg("BL DEBUG MESG: Now you can add your bin file for APP-2\r\n");
 8001596:	483f      	ldr	r0, [pc, #252]	; (8001694 <SelectedMenu+0x240>)
 8001598:	f7ff fd2e 	bl	8000ff8 <printmsg>
	    					//seçilen app in yerine yüklenen uygulamayı flasha yazan fonksiyon
	    					upload_New_App();
 800159c:	f7ff fe98 	bl	80012d0 <upload_New_App>
	    						//1.uart receive interrupt
	    						//2.receive edilen her byte volatile uint32_t ReceiveDataArr[14336]; ile rame kaydolur
	    						//3.ramdeki veriler bir volatile uint32_t TempDataArr[14336]; değikenine kopyalanır
	    						//4.volatile uint32_t TempDataArr[14336]; içerisindeki veriler flasha yazılır
	    						//5.chip kendine reset atar ve default olarak app1 i çalıştırır.
	    					printmsg("BL DEBUG MESG: APP-2 is uploaded\r\n");
 80015a0:	483d      	ldr	r0, [pc, #244]	; (8001698 <SelectedMenu+0x244>)
 80015a2:	f7ff fd29 	bl	8000ff8 <printmsg>
 80015a6:	e003      	b.n	80015b0 <SelectedMenu+0x15c>
	    				}
	    				else
	    				{
	    					printmsg("BL DEBUG MESG: APP upload process is stopped!! \r\n");
 80015a8:	483c      	ldr	r0, [pc, #240]	; (800169c <SelectedMenu+0x248>)
 80015aa:	f7ff fd25 	bl	8000ff8 <printmsg>
	    					break;
 80015ae:	e049      	b.n	8001644 <SelectedMenu+0x1f0>
	    				}
	    				break;
 80015b0:	e048      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '6':
	    				if(myBootloader.UploadMode!=enable )
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <SelectedMenu+0x204>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d141      	bne.n	800163e <SelectedMenu+0x1ea>
	    					break;
	    				else
	    				{
							printmsg("BL DEBUG MESG:6 Is Pressed and Here is Your MCU Chip ID\n\r" );
 80015ba:	4839      	ldr	r0, [pc, #228]	; (80016a0 <SelectedMenu+0x24c>)
 80015bc:	f7ff fd1c 	bl	8000ff8 <printmsg>
							myBootloader.mainMenuState = readIDNumberMCU;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <SelectedMenu+0x204>)
 80015c2:	2206      	movs	r2, #6
 80015c4:	705a      	strb	r2, [r3, #1]
							char buf[15];
							uint16_t id=bootloader_get_mcu_chip_id();
 80015c6:	f7ff fe5f 	bl	8001288 <bootloader_get_mcu_chip_id>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	    				    HAL_UART_Transmit(&huart3, (uint8_t*)buf,sprintf(buf,"MCU CHIP ID: %hu\r\n",id), HAL_MAX_DELAY);
 80015d0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015d8:	4932      	ldr	r1, [pc, #200]	; (80016a4 <SelectedMenu+0x250>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 f860 	bl	80056a0 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	4826      	ldr	r0, [pc, #152]	; (8001688 <SelectedMenu+0x234>)
 80015ee:	f002 f8ca 	bl	8003786 <HAL_UART_Transmit>

	    				}
	    				break;
 80015f2:	e027      	b.n	8001644 <SelectedMenu+0x1f0>

	    			case '7':
	    				if(myBootloader.UploadMode!=enable)
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <SelectedMenu+0x204>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d122      	bne.n	8001642 <SelectedMenu+0x1ee>
	    					break;
	    				else
	    				{
							printmsg("BL DEBUG MESG:7 Is Pressed and Here is Read Sector Protection Status\n\r" );
 80015fc:	482a      	ldr	r0, [pc, #168]	; (80016a8 <SelectedMenu+0x254>)
 80015fe:	f7ff fcfb 	bl	8000ff8 <printmsg>
							myBootloader.mainMenuState = readSectorProtectionStatus;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <SelectedMenu+0x204>)
 8001604:	2207      	movs	r2, #7
 8001606:	705a      	strb	r2, [r3, #1]
							char buf[50];
							uint16_t status=bootloader_handle_read_sector_protection_status();
 8001608:	f7ff fe50 	bl	80012ac <bootloader_handle_read_sector_protection_status>
 800160c:	4603      	mov	r3, r0
 800160e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
							HAL_UART_Transmit(&huart3, (uint8_t*)buf,sprintf(buf,"Sector Protection Status: %hu\r\n",status), HAL_MAX_DELAY);
 8001612:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4924      	ldr	r1, [pc, #144]	; (80016ac <SelectedMenu+0x258>)
 800161c:	4618      	mov	r0, r3
 800161e:	f004 f83f 	bl	80056a0 <siprintf>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	f107 0108 	add.w	r1, r7, #8
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <SelectedMenu+0x234>)
 8001630:	f002 f8a9 	bl	8003786 <HAL_UART_Transmit>
	    				}
	    				break;
 8001634:	e006      	b.n	8001644 <SelectedMenu+0x1f0>
	    			case '8':
	    				//eklenecek
	    			default:
	    				printmsg("BL DEBUG MESG: PLEASE RESET THE CHIP AND SELECT THE MENU WHAT YOU WANT --> SELECTION ERROR DETECTED!!!!!\r\n");
 8001636:	481e      	ldr	r0, [pc, #120]	; (80016b0 <SelectedMenu+0x25c>)
 8001638:	f7ff fcde 	bl	8000ff8 <printmsg>
	    				break;
 800163c:	e002      	b.n	8001644 <SelectedMenu+0x1f0>
	    					break;
 800163e:	bf00      	nop
 8001640:	e005      	b.n	800164e <SelectedMenu+0x1fa>
	    					break;
 8001642:	bf00      	nop
	    		switch(selectedMenu)
 8001644:	e003      	b.n	800164e <SelectedMenu+0x1fa>
	    		}
	    	}
	    	else
	    		printmsg("MENU SELECTION ERROR PLEASE RESET !!");
 8001646:	481b      	ldr	r0, [pc, #108]	; (80016b4 <SelectedMenu+0x260>)
 8001648:	f7ff fcd6 	bl	8000ff8 <printmsg>

 }
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3750      	adds	r7, #80	; 0x50
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2001c55c 	.word	0x2001c55c
 800165c:	080094e4 	.word	0x080094e4
 8001660:	08009524 	.word	0x08009524
 8001664:	0800955c 	.word	0x0800955c
 8001668:	08009594 	.word	0x08009594
 800166c:	080095cc 	.word	0x080095cc
 8001670:	080095f0 	.word	0x080095f0
 8001674:	08009628 	.word	0x08009628
 8001678:	0800964c 	.word	0x0800964c
 800167c:	08009688 	.word	0x08009688
 8001680:	080096cc 	.word	0x080096cc
 8001684:	080096f0 	.word	0x080096f0
 8001688:	2001c518 	.word	0x2001c518
 800168c:	08009714 	.word	0x08009714
 8001690:	08009750 	.word	0x08009750
 8001694:	08009774 	.word	0x08009774
 8001698:	080097b0 	.word	0x080097b0
 800169c:	080097d4 	.word	0x080097d4
 80016a0:	08009808 	.word	0x08009808
 80016a4:	08009844 	.word	0x08009844
 80016a8:	08009858 	.word	0x08009858
 80016ac:	080098a0 	.word	0x080098a0
 80016b0:	080098c0 	.word	0x080098c0
 80016b4:	0800992c 	.word	0x0800992c

080016b8 <host_menu>:

/***************************************** HOST MENU ***************************************************/
void host_menu(void)
	    {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	    	static uint8_t menu_press6[] 		= "******* PRESS 6 FOR READ IDENTIFICATION NUMBER YOUR MCU *******\r\n";
	    	static uint8_t menu_press7[] 		= "******* PRESS 7 FOR READ SECTOR PROTECTION STATUS *******\r\n";
	    	static uint8_t menu_press8[] 		= "******* PRESS 8 FOR GO TO ADDRESS  *******\r\n";
	    	static uint8_t menu_terminator[] 	= "******* ------------------ *******\r\n";
	    	static uint8_t menu_info[] 			= "******* PLEASE SELECT ONE OF THESE OPTION OR PRESS E TO EXIT *******\r\n";
	    	uint8_t menu_rx=0;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]

	    	if(myBootloader.mainMenuActive == yes && myBootloader.mainMenuState == Idle){
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <host_menu+0xcc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d148      	bne.n	800175c <host_menu+0xa4>
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <host_menu+0xcc>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d144      	bne.n	800175c <host_menu+0xa4>
	    		HAL_UART_Transmit(&huart3,menu_title,sizeof(menu_title), 50);
 80016d2:	2332      	movs	r3, #50	; 0x32
 80016d4:	222a      	movs	r2, #42	; 0x2a
 80016d6:	492c      	ldr	r1, [pc, #176]	; (8001788 <host_menu+0xd0>)
 80016d8:	482c      	ldr	r0, [pc, #176]	; (800178c <host_menu+0xd4>)
 80016da:	f002 f854 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press1,sizeof(menu_press1), 50);
 80016de:	2332      	movs	r3, #50	; 0x32
 80016e0:	222b      	movs	r2, #43	; 0x2b
 80016e2:	492b      	ldr	r1, [pc, #172]	; (8001790 <host_menu+0xd8>)
 80016e4:	4829      	ldr	r0, [pc, #164]	; (800178c <host_menu+0xd4>)
 80016e6:	f002 f84e 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press2,sizeof(menu_press2), 50);
 80016ea:	2332      	movs	r3, #50	; 0x32
 80016ec:	222b      	movs	r2, #43	; 0x2b
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <host_menu+0xdc>)
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <host_menu+0xd4>)
 80016f2:	f002 f848 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press3,sizeof(menu_press3), 50);
 80016f6:	2332      	movs	r3, #50	; 0x32
 80016f8:	222a      	movs	r2, #42	; 0x2a
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <host_menu+0xe0>)
 80016fc:	4823      	ldr	r0, [pc, #140]	; (800178c <host_menu+0xd4>)
 80016fe:	f002 f842 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press4,sizeof(menu_press4), 50);
 8001702:	2332      	movs	r3, #50	; 0x32
 8001704:	222a      	movs	r2, #42	; 0x2a
 8001706:	4925      	ldr	r1, [pc, #148]	; (800179c <host_menu+0xe4>)
 8001708:	4820      	ldr	r0, [pc, #128]	; (800178c <host_menu+0xd4>)
 800170a:	f002 f83c 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press5,sizeof(menu_press5), 50);
 800170e:	2332      	movs	r3, #50	; 0x32
 8001710:	2229      	movs	r2, #41	; 0x29
 8001712:	4923      	ldr	r1, [pc, #140]	; (80017a0 <host_menu+0xe8>)
 8001714:	481d      	ldr	r0, [pc, #116]	; (800178c <host_menu+0xd4>)
 8001716:	f002 f836 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press6,sizeof(menu_press6), 50);
 800171a:	2332      	movs	r3, #50	; 0x32
 800171c:	2242      	movs	r2, #66	; 0x42
 800171e:	4921      	ldr	r1, [pc, #132]	; (80017a4 <host_menu+0xec>)
 8001720:	481a      	ldr	r0, [pc, #104]	; (800178c <host_menu+0xd4>)
 8001722:	f002 f830 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press7,sizeof(menu_press7), 50);
 8001726:	2332      	movs	r3, #50	; 0x32
 8001728:	223c      	movs	r2, #60	; 0x3c
 800172a:	491f      	ldr	r1, [pc, #124]	; (80017a8 <host_menu+0xf0>)
 800172c:	4817      	ldr	r0, [pc, #92]	; (800178c <host_menu+0xd4>)
 800172e:	f002 f82a 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_press8,sizeof(menu_press8), 50);
 8001732:	2332      	movs	r3, #50	; 0x32
 8001734:	222d      	movs	r2, #45	; 0x2d
 8001736:	491d      	ldr	r1, [pc, #116]	; (80017ac <host_menu+0xf4>)
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <host_menu+0xd4>)
 800173a:	f002 f824 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_terminator,sizeof(menu_terminator), 50);
 800173e:	2332      	movs	r3, #50	; 0x32
 8001740:	2225      	movs	r2, #37	; 0x25
 8001742:	491b      	ldr	r1, [pc, #108]	; (80017b0 <host_menu+0xf8>)
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <host_menu+0xd4>)
 8001746:	f002 f81e 	bl	8003786 <HAL_UART_Transmit>
	    		HAL_UART_Transmit(&huart3,menu_info,sizeof(menu_info), 50);
 800174a:	2332      	movs	r3, #50	; 0x32
 800174c:	2247      	movs	r2, #71	; 0x47
 800174e:	4919      	ldr	r1, [pc, #100]	; (80017b4 <host_menu+0xfc>)
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <host_menu+0xd4>)
 8001752:	f002 f818 	bl	8003786 <HAL_UART_Transmit>
	    		received_data=0;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <host_menu+0x100>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	    	}
	    	HAL_UART_Receive(&huart3, &menu_rx, sizeof(menu_rx), HAL_MAX_DELAY);
 800175c:	1df9      	adds	r1, r7, #7
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2201      	movs	r2, #1
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <host_menu+0xd4>)
 8001766:	f002 f8a0 	bl	80038aa <HAL_UART_Receive>
	    	while(!menu_rx);//wait for the until menu_rx=1
 800176a:	bf00      	nop
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0fc      	beq.n	800176c <host_menu+0xb4>
	    	SelectedMenu(menu_rx);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe6d 	bl	8001454 <SelectedMenu>
 }
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2001c55c 	.word	0x2001c55c
 8001788:	2000001c 	.word	0x2000001c
 800178c:	2001c518 	.word	0x2001c518
 8001790:	20000048 	.word	0x20000048
 8001794:	20000074 	.word	0x20000074
 8001798:	200000a0 	.word	0x200000a0
 800179c:	200000cc 	.word	0x200000cc
 80017a0:	200000f8 	.word	0x200000f8
 80017a4:	20000124 	.word	0x20000124
 80017a8:	20000168 	.word	0x20000168
 80017ac:	200001a4 	.word	0x200001a4
 80017b0:	200001d4 	.word	0x200001d4
 80017b4:	200001fc 	.word	0x200001fc
 80017b8:	2001c50c 	.word	0x2001c50c

080017bc <main>:




int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	  HAL_Init();
 80017c0:	f000 fb7e 	bl	8001ec0 <HAL_Init>
	  SystemClock_Config();
 80017c4:	f000 f846 	bl	8001854 <SystemClock_Config>
	  MX_GPIO_Init();
 80017c8:	f000 f8ec 	bl	80019a4 <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 80017cc:	f000 f8c0 	bl	8001950 <MX_USART3_UART_Init>
	  MX_CRC_Init();
 80017d0:	f000 f988 	bl	8001ae4 <MX_CRC_Init>


	  /******************Read The User Button For Pass To Bootloader******************/

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80017d4:	2101      	movs	r1, #1
 80017d6:	481a      	ldr	r0, [pc, #104]	; (8001840 <main+0x84>)
 80017d8:	f001 fae4 	bl	8002da4 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <main+0x4c>
	    {
	  	  printmsg("BL_DEBUG_MSG: BUTTON IS PRESSED.. GOING TO BOOTLOADER MODE\n\r");
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <main+0x88>)
 80017e4:	f7ff fc08 	bl	8000ff8 <printmsg>
	  	  if(isUserWantToSeeMenu(menuOpenSelectionMonitor()) && myBootloader.mainMenuState == Idle)
 80017e8:	f7ff fdee 	bl	80013c8 <menuOpenSelectionMonitor>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fe10 	bl	8001414 <isUserWantToSeeMenu>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d021      	beq.n	800183e <main+0x82>
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <main+0x8c>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11d      	bne.n	800183e <main+0x82>
	  	  {
	  		  host_menu();
 8001802:	f7ff ff59 	bl	80016b8 <host_menu>
 8001806:	e01a      	b.n	800183e <main+0x82>
	  	  }
	    }

	    else
	    {
	  	  printmsg("BL_DEBUG_MSG: BUTTON IS NOT PRESSED.. EXECUTE DEFAULT APP\n\r");
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <main+0x90>)
 800180a:	f7ff fbf5 	bl	8000ff8 <printmsg>
	  	  while(1)
	  	  {
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <main+0x94>)
 8001814:	f001 faf7 	bl	8002e06 <HAL_GPIO_TogglePin>
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <main+0x94>)
 800181e:	f001 faf2 	bl	8002e06 <HAL_GPIO_TogglePin>
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001826:	480a      	ldr	r0, [pc, #40]	; (8001850 <main+0x94>)
 8001828:	f001 faed 	bl	8002e06 <HAL_GPIO_TogglePin>
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800182c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <main+0x94>)
 8001832:	f001 fae8 	bl	8002e06 <HAL_GPIO_TogglePin>
	  		HAL_Delay(150);
 8001836:	2096      	movs	r0, #150	; 0x96
 8001838:	f000 fbb4 	bl	8001fa4 <HAL_Delay>
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800183c:	e7e7      	b.n	800180e <main+0x52>
	  	  }
	    }


	while(1)
 800183e:	e7fe      	b.n	800183e <main+0x82>
 8001840:	40020000 	.word	0x40020000
 8001844:	08009954 	.word	0x08009954
 8001848:	2001c55c 	.word	0x2001c55c
 800184c:	08009994 	.word	0x08009994
 8001850:	40020c00 	.word	0x40020c00

08001854 <SystemClock_Config>:


/**************************SYSTEM CLOCK INIT*************************/

void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f003 f894 	bl	8004990 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <SystemClock_Config+0xf0>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <SystemClock_Config+0xf0>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <SystemClock_Config+0xf0>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <SystemClock_Config+0xf4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <SystemClock_Config+0xf4>)
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <SystemClock_Config+0xf4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b0:	2302      	movs	r3, #2
 80018b2:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b8:	2310      	movs	r3, #16
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018bc:	2302      	movs	r3, #2
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80018c4:	2308      	movs	r3, #8
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 84;
 80018c8:	2354      	movs	r3, #84	; 0x54
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018d0:	2304      	movs	r3, #4
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0320 	add.w	r3, r7, #32
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 faaf 	bl	8002e3c <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 80018e4:	f000 f912 	bl	8001b0c <Error_Handler>
	  }

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fd10 	bl	800332c <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xc2>
	  {
	    Error_Handler();
 8001912:	f000 f8fb 	bl	8001b0c <Error_Handler>
	  }



	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);					 //Configure the Systick interrupt time
 8001916:	f001 feb5 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 800191a:	4603      	mov	r3, r0
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <SystemClock_Config+0xf8>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fc66 	bl	80021f6 <HAL_SYSTICK_Config>

	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);				//Configure the Systick
 800192a:	2004      	movs	r0, #4
 800192c:	f000 fc70 	bl	8002210 <HAL_SYSTICK_CLKSourceConfig>

	 HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);							// SysTick_IRQn interrupt configuration
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 fc33 	bl	80021a2 <HAL_NVIC_SetPriority>
}
 800193c:	bf00      	nop
 800193e:	3750      	adds	r7, #80	; 0x50
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <MX_USART3_UART_Init>:

/**************************USART COMMUNICATION INIT*************************/

static void MX_USART3_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	  huart3.Instance = USART3;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_USART3_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001988:	f001 feb0 	bl	80036ec <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART3_UART_Init+0x46>
	  {
	    Error_Handler();
 8001992:	f000 f8bb 	bl	8001b0c <Error_Handler>
	  }
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2001c518 	.word	0x2001c518
 80019a0:	40004800 	.word	0x40004800

080019a4 <MX_GPIO_Init>:

/**************************GPIO INIT*************************/

static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a45      	ldr	r2, [pc, #276]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <MX_GPIO_Init+0x134>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <MX_GPIO_Init+0x134>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a16:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	482e      	ldr	r0, [pc, #184]	; (8001adc <MX_GPIO_Init+0x138>)
 8001a24:	f001 f822 	bl	8002a6c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PD12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4827      	ldr	r0, [pc, #156]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001a42:	f001 f813 	bl	8002a6c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001a4e:	f001 f9c1 	bl	8002dd4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001a6c:	f000 fffe 	bl	8002a6c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001a78:	f001 f9ac 	bl	8002dd4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a80:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001a96:	f000 ffe9 	bl	8002a6c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa0:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001aa2:	f001 f997 	bl	8002dd4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PD13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aaa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001ac0:	f000 ffd4 	bl	8002a6c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001acc:	f001 f982 	bl	8002dd4 <HAL_GPIO_WritePin>

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <MX_CRC_Init>:


/**************************CRC INIT*************************/

static void MX_CRC_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	  hcrc.Instance = CRC;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_CRC_Init+0x20>)
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <MX_CRC_Init+0x24>)
 8001aec:	601a      	str	r2, [r3, #0]
	  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_CRC_Init+0x20>)
 8001af0:	f000 fbaa 	bl	8002248 <HAL_CRC_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_CRC_Init+0x1a>
	  {
	    Error_Handler();
 8001afa:	f000 f807 	bl	8001b0c <Error_Handler>
	  }
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2001c510 	.word	0x2001c510
 8001b08:	40023000 	.word	0x40023000

08001b0c <Error_Handler>:


/**************************ERROR HANDLER*************************/
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
	  __disable_irq();
	  while (1)
 8001b14:	e7fe      	b.n	8001b14 <Error_Handler+0x8>
	...

08001b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_CRC_MspInit+0x3c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10d      	bne.n	8001b96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_CRC_MspInit+0x40>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_CRC_MspInit+0x40>)
 8001b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_CRC_MspInit+0x40>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023000 	.word	0x40023000
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_UART_MspInit+0x94>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d134      	bne.n	8001c38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001c24:	f000 ff22 	bl	8002a6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	f000 fab8 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c32:	2027      	movs	r0, #39	; 0x27
 8001c34:	f000 fad1 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40004800 	.word	0x40004800
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f964 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <USART3_IRQHandler+0x10>)
 8001ca6:	f001 fed3 	bl	8003a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2001c518 	.word	0x2001c518

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cce:	f002 fe27 	bl	8004920 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
	}

return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
	}
	return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f002 fd8c 	bl	8004920 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	2001c560 	.word	0x2001c560
 8001e3c:	2001c598 	.word	0x2001c598

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <SystemInit+0x28>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x28>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SystemInit+0x28>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffd3 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f002 fd47 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff fc8d 	bl	80017bc <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8001eb0:	08009e9c 	.word	0x08009e9c
  ldr r2, =_sbss
 8001eb4:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 8001eb8:	2001c598 	.word	0x2001c598

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f94f 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fe10 	bl	8001b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f967 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f92f 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000244 	.word	0x20000244
 8001f5c:	2000024c 	.word	0x2000024c
 8001f60:	20000248 	.word	0x20000248

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000024c 	.word	0x2000024c
 8001f88:	2001c564 	.word	0x2001c564

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2001c564 	.word	0x2001c564

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_Delay+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000024c 	.word	0x2000024c

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d106      	bne.n	800222c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800222a:	e005      	b.n	8002238 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	795b      	ldrb	r3, [r3, #5]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fc7c 	bl	8001b68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228e:	f7ff fe7d 	bl	8001f8c <HAL_GetTick>
 8002292:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e052      	b.n	8002358 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0216 	bic.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_DMA_Abort+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	e013      	b.n	800232c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002304:	f7ff fe42 	bl	8001f8c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b05      	cmp	r3, #5
 8002310:	d90c      	bls.n	800232c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e015      	b.n	8002358 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	223f      	movs	r2, #63	; 0x3f
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00c      	b.n	8002398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2205      	movs	r2, #5
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_FLASH_Program+0xa0>)
 80023b8:	7e1b      	ldrb	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_FLASH_Program+0x1e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e03b      	b.n	800243a <HAL_FLASH_Program+0x96>
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_FLASH_Program+0xa0>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023cc:	f000 f88c 	bl	80024e8 <FLASH_WaitForLastOperation>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12b      	bne.n	8002432 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023e0:	783b      	ldrb	r3, [r7, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f000 f937 	bl	8002658 <FLASH_Program_Byte>
 80023ea:	e016      	b.n	800241a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023f2:	883b      	ldrh	r3, [r7, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	68b8      	ldr	r0, [r7, #8]
 80023f8:	f000 f90a 	bl	8002610 <FLASH_Program_HalfWord>
 80023fc:	e00d      	b.n	800241a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d105      	bne.n	8002410 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	68b8      	ldr	r0, [r7, #8]
 800240a:	f000 f8df 	bl	80025cc <FLASH_Program_Word>
 800240e:	e004      	b.n	800241a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002414:	68b8      	ldr	r0, [r7, #8]
 8002416:	f000 f8a7 	bl	8002568 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800241a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800241e:	f000 f863 	bl	80024e8 <FLASH_WaitForLastOperation>
 8002422:	4603      	mov	r3, r0
 8002424:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_FLASH_Program+0xa4>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_FLASH_Program+0xa4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_FLASH_Program+0xa0>)
 8002434:	2200      	movs	r2, #0
 8002436:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002438:	7dfb      	ldrb	r3, [r7, #23]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2001c568 	.word	0x2001c568
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_FLASH_Unlock+0x38>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	da0b      	bge.n	8002476 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_FLASH_Unlock+0x38>)
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_FLASH_Unlock+0x3c>)
 8002462:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_FLASH_Unlock+0x38>)
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_FLASH_Unlock+0x40>)
 8002468:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_FLASH_Unlock+0x38>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da01      	bge.n	8002476 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002476:	79fb      	ldrb	r3, [r7, #7]
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40023c00 	.word	0x40023c00
 8002488:	45670123 	.word	0x45670123
 800248c:	cdef89ab 	.word	0xcdef89ab

08002490 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_FLASH_Lock+0x1c>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_FLASH_Lock+0x1c>)
 800249a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800249e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_FLASH_OB_Unlock+0x2c>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_FLASH_OB_Unlock+0x2c>)
 80024c2:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_FLASH_OB_Unlock+0x30>)
 80024c4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_FLASH_OB_Unlock+0x2c>)
 80024c8:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_FLASH_OB_Unlock+0x34>)
 80024ca:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	08192a3b 	.word	0x08192a3b
 80024e4:	4c5d6e7f 	.word	0x4c5d6e7f

080024e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <FLASH_WaitForLastOperation+0x78>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024fa:	f7ff fd47 	bl	8001f8c <HAL_GetTick>
 80024fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002500:	e010      	b.n	8002524 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d00c      	beq.n	8002524 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <FLASH_WaitForLastOperation+0x38>
 8002510:	f7ff fd3c 	bl	8001f8c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	d201      	bcs.n	8002524 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e019      	b.n	8002558 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <FLASH_WaitForLastOperation+0x7c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e8      	bne.n	8002502 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <FLASH_WaitForLastOperation+0x7c>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <FLASH_WaitForLastOperation+0x7c>)
 800253e:	2201      	movs	r2, #1
 8002540:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <FLASH_WaitForLastOperation+0x7c>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800254e:	f000 f8a5 	bl	800269c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
  
}  
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2001c568 	.word	0x2001c568
 8002564:	40023c00 	.word	0x40023c00

08002568 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 800257a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 8002586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800258a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <FLASH_Program_DoubleWord+0x60>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800259e:	f3bf 8f6f 	isb	sy
}
 80025a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	000a      	movs	r2, r1
 80025b2:	2300      	movs	r3, #0
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	3104      	adds	r1, #4
 80025b8:	4613      	mov	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40023c00 	.word	0x40023c00

080025cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <FLASH_Program_Word+0x40>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <FLASH_Program_Word+0x40>)
 80025dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <FLASH_Program_Word+0x40>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <FLASH_Program_Word+0x40>)
 80025e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <FLASH_Program_Word+0x40>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4a06      	ldr	r2, [pc, #24]	; (800260c <FLASH_Program_Word+0x40>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40023c00 	.word	0x40023c00

08002610 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002626:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <FLASH_Program_HalfWord+0x44>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	801a      	strh	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00

08002658 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <FLASH_Program_Byte+0x40>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <FLASH_Program_Byte+0x40>)
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <FLASH_Program_Byte+0x40>)
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <FLASH_Program_Byte+0x40>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <FLASH_Program_Byte+0x40>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <FLASH_Program_Byte+0x40>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	701a      	strb	r2, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00

0800269c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026ba:	2210      	movs	r2, #16
 80026bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f043 0308 	orr.w	r3, r3, #8
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026d8:	2220      	movs	r2, #32
 80026da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 80026f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026f6:	2240      	movs	r2, #64	; 0x40
 80026f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 8002710:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f043 0320 	orr.w	r3, r3, #32
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <FLASH_SetErrorCode+0xa8>)
 800272e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <FLASH_SetErrorCode+0xa4>)
 8002732:	2202      	movs	r2, #2
 8002734:	60da      	str	r2, [r3, #12]
  }
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40023c00 	.word	0x40023c00
 8002744:	2001c568 	.word	0x2001c568

08002748 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800275a:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_FLASHEx_Erase+0xd8>)
 800275c:	7e1b      	ldrb	r3, [r3, #24]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_FLASHEx_Erase+0x1e>
 8002762:	2302      	movs	r3, #2
 8002764:	e058      	b.n	8002818 <HAL_FLASHEx_Erase+0xd0>
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_FLASHEx_Erase+0xd8>)
 8002768:	2201      	movs	r2, #1
 800276a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800276c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002770:	f7ff feba 	bl	80024e8 <FLASH_WaitForLastOperation>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d148      	bne.n	8002810 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d115      	bne.n	80027ba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 f868 	bl	8002870 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027a4:	f7ff fea0 	bl	80024e8 <FLASH_WaitForLastOperation>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_FLASHEx_Erase+0xdc>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_FLASHEx_Erase+0xdc>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6113      	str	r3, [r2, #16]
 80027b8:	e028      	b.n	800280c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	e01c      	b.n	80027fc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4619      	mov	r1, r3
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f000 f874 	bl	80028b8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027d4:	f7ff fe88 	bl	80024e8 <FLASH_WaitForLastOperation>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_FLASHEx_Erase+0xdc>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_FLASHEx_Erase+0xdc>)
 80027e2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80027e6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	601a      	str	r2, [r3, #0]
          break;
 80027f4:	e00a      	b.n	800280c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4413      	add	r3, r2
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d3da      	bcc.n	80027c2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800280c:	f000 f8e8 	bl	80029e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_FLASHEx_Erase+0xd8>)
 8002812:	2200      	movs	r2, #0
 8002814:	761a      	strb	r2, [r3, #24]

  return status;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2001c568 	.word	0x2001c568
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	220f      	movs	r2, #15
 8002834:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002836:	f000 f897 	bl	8002968 <FLASH_OB_GetWRP>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002842:	f000 f89d 	bl	8002980 <FLASH_OB_GetRDP>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800284e:	f000 f87b 	bl	8002948 <FLASH_OB_GetUser>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800285a:	f000 f8b1 	bl	80029c0 <FLASH_OB_GetBOR>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <FLASH_MassErase+0x44>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <FLASH_MassErase+0x44>)
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <FLASH_MassErase+0x44>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <FLASH_MassErase+0x44>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <FLASH_MassErase+0x44>)
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	4313      	orrs	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <FLASH_MassErase+0x44>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6113      	str	r3, [r2, #16]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e010      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d103      	bne.n	80028e2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e009      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d103      	bne.n	80028f0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e002      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	490f      	ldr	r1, [pc, #60]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002914:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4313      	orrs	r3, r2
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6113      	str	r3, [r2, #16]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40023c00 	.word	0x40023c00

08002948 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <FLASH_OB_GetUser+0x1c>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f023 031f 	bic.w	r3, r3, #31
 8002956:	b2db      	uxtb	r3, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <FLASH_OB_GetWRP+0x14>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40023c16 	.word	0x40023c16

08002980 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002986:	23aa      	movs	r3, #170	; 0xaa
 8002988:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <FLASH_OB_GetRDP+0x3c>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2bcc      	cmp	r3, #204	; 0xcc
 8002992:	d102      	bne.n	800299a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002994:	23cc      	movs	r3, #204	; 0xcc
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	e009      	b.n	80029ae <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <FLASH_OB_GetRDP+0x3c>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2baa      	cmp	r3, #170	; 0xaa
 80029a2:	d102      	bne.n	80029aa <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80029a4:	23aa      	movs	r3, #170	; 0xaa
 80029a6:	71fb      	strb	r3, [r7, #7]
 80029a8:	e001      	b.n	80029ae <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80029aa:	2355      	movs	r3, #85	; 0x55
 80029ac:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80029ae:	79fb      	ldrb	r3, [r7, #7]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40023c15 	.word	0x40023c15

080029c0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <FLASH_OB_GetBOR+0x1c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	b2db      	uxtb	r3, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023c14 	.word	0x40023c14

080029e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80029e4:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <FLASH_FlushCaches+0x88>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d017      	beq.n	8002a20 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <FLASH_FlushCaches+0x88>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <FLASH_FlushCaches+0x88>)
 80029f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <FLASH_FlushCaches+0x88>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a12:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a36:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a4e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <FLASH_FlushCaches+0x88>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023c00 	.word	0x40023c00

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e16b      	b.n	8002d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 815a 	bne.w	8002d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80b4 	beq.w	8002d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a5f      	ldr	r2, [pc, #380]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x314>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x318>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x31c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x320>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x328>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x212>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x330>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x20a>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00e      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae90 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40021c00 	.word	0x40021c00
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	041a      	lsls	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	041a      	lsls	r2, r3, #16
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	400b      	ands	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e267      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d075      	beq.n	8002f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d157      	bne.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e242      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x74>
 8002ea2:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a75      	ldr	r2, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x98>
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6f      	ldr	r2, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002ed4:	4b69      	ldr	r3, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a68      	ldr	r2, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f84a 	bl	8001f8c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff f846 	bl	8001f8c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e207      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f836 	bl	8001f8c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff f832 	bl	8001f8c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1f3      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b44      	ldr	r3, [pc, #272]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1c7      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e03a      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCC_OscConfig+0x244>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe ffeb 	bl	8001f8c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe ffe7 	bl	8001f8c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1a8      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4925      	ldr	r1, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x244>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe ffca 	bl	8001f8c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7fe ffc6 	bl	8001f8c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e187      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x248>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe ffaa 	bl	8001f8c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe ffa6 	bl	8001f8c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e167      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x200>
 800305a:	e01b      	b.n	8003094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x248>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe ff93 	bl	8001f8c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	e00e      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe ff8f 	bl	8001f8c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d907      	bls.n	8003088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e150      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
 800307c:	40023800 	.word	0x40023800
 8003080:	42470000 	.word	0x42470000
 8003084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ea      	bne.n	800306a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8097 	beq.w	80031d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b7d      	ldr	r3, [pc, #500]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a7c      	ldr	r2, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030de:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a73      	ldr	r2, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ea:	f7fe ff4f 	bl	8001f8c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f2:	f7fe ff4b 	bl	8001f8c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e10c      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d106      	bne.n	8003126 <HAL_RCC_OscConfig+0x2ea>
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	e01c      	b.n	8003160 <HAL_RCC_OscConfig+0x324>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b05      	cmp	r3, #5
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x30c>
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a5b      	ldr	r2, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0x324>
 8003148:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe ff10 	bl	8001f8c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe ff0c 	bl	8001f8c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0cb      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ee      	beq.n	8003170 <HAL_RCC_OscConfig+0x334>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7fe fefa 	bl	8001f8c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe fef6 	bl	8001f8c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0b5      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ee      	bne.n	800319c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a1 	beq.w	800331c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d05c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d141      	bne.n	8003272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe feca 	bl	8001f8c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fec6 	bl	8001f8c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e087      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	3b01      	subs	r3, #1
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	491b      	ldr	r1, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fe9f 	bl	8001f8c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fe9b 	bl	8001f8c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e05c      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x416>
 8003270:	e054      	b.n	800331c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fe88 	bl	8001f8c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fe84 	bl	8001f8c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e045      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x444>
 800329e:	e03d      	b.n	800331c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e038      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x4ec>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d028      	beq.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d121      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d11a      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d111      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cc      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d90c      	bls.n	8003368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b8      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e067      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe fdb6 	bl	8001f8c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fdb2 	bl	8001f8c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20c      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e032      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b2:	f000 f821 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	5ccb      	ldrb	r3, [r1, r3]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fd16 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	080099d0 	.word	0x080099d0
 80034f0:	20000244 	.word	0x20000244
 80034f4:	20000248 	.word	0x20000248

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b090      	sub	sp, #64	; 0x40
 80034fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d00d      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x40>
 800351c:	2b08      	cmp	r3, #8
 800351e:	f200 80a1 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x34>
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3a>
 800352a:	e09b      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003530:	e09b      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003536:	e098      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	2200      	movs	r2, #0
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	627a      	str	r2, [r7, #36]	; 0x24
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003560:	2100      	movs	r1, #0
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003564:	fb03 f201 	mul.w	r2, r3, r1
 8003568:	2300      	movs	r3, #0
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	4413      	add	r3, r2
 8003570:	4a43      	ldr	r2, [pc, #268]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003572:	fba0 1202 	umull	r1, r2, r0, r2
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	460a      	mov	r2, r1
 800357a:	62ba      	str	r2, [r7, #40]	; 0x28
 800357c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357e:	4413      	add	r3, r2
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	2200      	movs	r2, #0
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	61fa      	str	r2, [r7, #28]
 800358a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003592:	f7fd fb79 	bl	8000c88 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	e053      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	2200      	movs	r2, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	617a      	str	r2, [r7, #20]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035b2:	f04f 0b00 	mov.w	fp, #0
 80035b6:	4652      	mov	r2, sl
 80035b8:	465b      	mov	r3, fp
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	ebb2 080a 	subs.w	r8, r2, sl
 80035d2:	eb63 090b 	sbc.w	r9, r3, fp
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ea:	ebb2 0408 	subs.w	r4, r2, r8
 80035ee:	eb63 0509 	sbc.w	r5, r3, r9
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	00eb      	lsls	r3, r5, #3
 80035fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003600:	00e2      	lsls	r2, r4, #3
 8003602:	4614      	mov	r4, r2
 8003604:	461d      	mov	r5, r3
 8003606:	eb14 030a 	adds.w	r3, r4, sl
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	eb45 030b 	adc.w	r3, r5, fp
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361e:	4629      	mov	r1, r5
 8003620:	028b      	lsls	r3, r1, #10
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003628:	4621      	mov	r1, r4
 800362a:	028a      	lsls	r2, r1, #10
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	2200      	movs	r2, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	60fa      	str	r2, [r7, #12]
 8003638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363c:	f7fd fb24 	bl	8000c88 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800366c:	4618      	mov	r0, r3
 800366e:	3740      	adds	r7, #64	; 0x40
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	017d7840 	.word	0x017d7840

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000244 	.word	0x20000244

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	080099e0 	.word	0x080099e0

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffdc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0b5b      	lsrs	r3, r3, #13
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	080099e0 	.word	0x080099e0

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fa4a 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fe81 	bl	8004438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08a      	sub	sp, #40	; 0x28
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d17c      	bne.n	80038a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Transmit+0x2c>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e075      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x3e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e06e      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fe fbd7 	bl	8001f8c <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x82>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003818:	e02a      	b.n	8003870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fbc1 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e036      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cf      	bne.n	800381a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fb91 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b08a      	sub	sp, #40	; 0x28
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	f040 808c 	bne.w	80039e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_UART_Receive+0x2e>
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e084      	b.n	80039e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Receive+0x40>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e07d      	b.n	80039e6 <HAL_UART_Receive+0x13c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2222      	movs	r2, #34	; 0x22
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fe fb41 	bl	8001f8c <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d108      	bne.n	8003934 <HAL_UART_Receive+0x8a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e003      	b.n	800393c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003944:	e043      	b.n	80039ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2200      	movs	r2, #0
 800394e:	2120      	movs	r1, #32
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fb2b 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e042      	b.n	80039e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	b29a      	uxth	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3302      	adds	r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e01f      	b.n	80039c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d007      	beq.n	800399a <HAL_UART_Receive+0xf0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_UART_Receive+0xfe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e008      	b.n	80039ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1b6      	bne.n	8003946 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d11d      	bne.n	8003a44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Receive_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e016      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Receive_IT+0x38>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e00f      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fb24 	bl	8004088 <UART_Start_Receive_IT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e000      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0ba      	sub	sp, #232	; 0xe8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fc07 	bl	80042c2 <UART_Receive_IT>
      return;
 8003ab4:	e256      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80de 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80d1 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d011      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 81ed 	beq.w	8003f5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb92 	bl	80042c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_UART_IRQHandler+0x17a>
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04f      	beq.n	8003c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa9a 	bl	8004104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d141      	bne.n	8003c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1d9      	bne.n	8003bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_UART_IRQHandler+0x3dc>)
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fb8e 	bl	8002360 <HAL_DMA_Abort_IT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e00e      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f990 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	e00a      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f98c 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e006      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f988 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c76:	e170      	b.n	8003f5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	bf00      	nop
    return;
 8003c7a:	e16e      	b.n	8003f5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 814a 	bne.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8143 	beq.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 813c 	beq.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	f040 80b4 	bne.w	8003e30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8140 	beq.w	8003f5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	f080 8139 	bcs.w	8003f5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	f000 8088 	beq.w	8003e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1d9      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e1      	bne.n	8003d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003df4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fa37 	bl	8002280 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8b6 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e28:	e099      	b.n	8003f5e <HAL_UART_IRQHandler+0x50e>
 8003e2a:	bf00      	nop
 8003e2c:	080041cb 	.word	0x080041cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808b 	beq.w	8003f62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8086 	beq.w	8003f62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3314      	adds	r3, #20
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0310 	bic.w	r3, r3, #16
 8003eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ef8:	61fa      	str	r2, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	69b9      	ldr	r1, [r7, #24]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	617b      	str	r3, [r7, #20]
   return(result);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e3      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f83e 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f18:	e023      	b.n	8003f62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_UART_IRQHandler+0x4ea>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f95d 	bl	80041f2 <UART_Transmit_IT>
    return;
 8003f38:	e014      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <HAL_UART_IRQHandler+0x514>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f99d 	bl	8004292 <UART_EndTransmit_IT>
    return;
 8003f58:	e004      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
    return;
 8003f5a:	bf00      	nop
 8003f5c:	e002      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
      return;
 8003f5e:	bf00      	nop
 8003f60:	e000      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
      return;
 8003f62:	bf00      	nop
  }
}
 8003f64:	37e8      	adds	r7, #232	; 0xe8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b090      	sub	sp, #64	; 0x40
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	e050      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d04c      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fcc:	f7fd ffde 	bl	8001f8c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d241      	bcs.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ffc:	637a      	str	r2, [r7, #52]	; 0x34
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	613b      	str	r3, [r7, #16]
   return(result);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004030:	623a      	str	r2, [r7, #32]
 8004032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	61bb      	str	r3, [r7, #24]
   return(result);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e00f      	b.n	8004080 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d09f      	beq.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3740      	adds	r7, #64	; 0x40
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b095      	sub	sp, #84	; 0x54
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800412c:	643a      	str	r2, [r7, #64]	; 0x40
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3314      	adds	r3, #20
 8004146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	2b01      	cmp	r3, #1
 800417a:	d119      	bne.n	80041b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	60bb      	str	r3, [r7, #8]
   return(result);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 0310 	bic.w	r3, r3, #16
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419c:	61ba      	str	r2, [r7, #24]
 800419e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	613b      	str	r3, [r7, #16]
   return(result);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041be:	bf00      	nop
 80041c0:	3754      	adds	r7, #84	; 0x54
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff fecb 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b21      	cmp	r3, #33	; 0x21
 8004204:	d13e      	bne.n	8004284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	d114      	bne.n	800423a <UART_Transmit_IT+0x48>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d110      	bne.n	800423a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]
 8004238:	e008      	b.n	800424c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6211      	str	r1, [r2, #32]
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4619      	mov	r1, r3
 800425a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800426e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fe5a 	bl	8003f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08c      	sub	sp, #48	; 0x30
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b22      	cmp	r3, #34	; 0x22
 80042d4:	f040 80ab 	bne.w	800442e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d117      	bne.n	8004312 <UART_Receive_IT+0x50>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	b29a      	uxth	r2, r3
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	1c9a      	adds	r2, r3, #2
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
 8004310:	e026      	b.n	8004360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d007      	beq.n	8004336 <UART_Receive_IT+0x74>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <UART_Receive_IT+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e008      	b.n	8004356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004350:	b2da      	uxtb	r2, r3
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29b      	uxth	r3, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4619      	mov	r1, r3
 800436e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004370:	2b00      	cmp	r3, #0
 8004372:	d15a      	bne.n	800442a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0220 	bic.w	r2, r2, #32
 8004382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d135      	bne.n	8004420 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f023 0310 	bic.w	r3, r3, #16
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	623a      	str	r2, [r7, #32]
 80043dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e5      	bne.n	80043ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d10a      	bne.n	8004412 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fdbb 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
 800441e:	e002      	b.n	8004426 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc ffa3 	bl	800136c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e002      	b.n	8004430 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3730      	adds	r7, #48	; 0x30
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b0c0      	sub	sp, #256	; 0x100
 800443e:	af00      	add	r7, sp, #0
 8004440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	68d9      	ldr	r1, [r3, #12]
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	ea40 0301 	orr.w	r3, r0, r1
 8004460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004490:	f021 010c 	bic.w	r1, r1, #12
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800449e:	430b      	orrs	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	6999      	ldr	r1, [r3, #24]
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	ea40 0301 	orr.w	r3, r0, r1
 80044be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b8f      	ldr	r3, [pc, #572]	; (8004704 <UART_SetConfig+0x2cc>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d005      	beq.n	80044d8 <UART_SetConfig+0xa0>
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <UART_SetConfig+0x2d0>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d104      	bne.n	80044e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f8f4 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 80044dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044e0:	e003      	b.n	80044ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e2:	f7ff f8db 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 80044e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	f040 810c 	bne.w	8004710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	1891      	adds	r1, r2, r2
 8004510:	65b9      	str	r1, [r7, #88]	; 0x58
 8004512:	415b      	adcs	r3, r3
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800451a:	4621      	mov	r1, r4
 800451c:	eb12 0801 	adds.w	r8, r2, r1
 8004520:	4629      	mov	r1, r5
 8004522:	eb43 0901 	adc.w	r9, r3, r1
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800453a:	4690      	mov	r8, r2
 800453c:	4699      	mov	r9, r3
 800453e:	4623      	mov	r3, r4
 8004540:	eb18 0303 	adds.w	r3, r8, r3
 8004544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004548:	462b      	mov	r3, r5
 800454a:	eb49 0303 	adc.w	r3, r9, r3
 800454e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004566:	460b      	mov	r3, r1
 8004568:	18db      	adds	r3, r3, r3
 800456a:	653b      	str	r3, [r7, #80]	; 0x50
 800456c:	4613      	mov	r3, r2
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	657b      	str	r3, [r7, #84]	; 0x54
 8004574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800457c:	f7fc fb84 	bl	8000c88 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <UART_SetConfig+0x2d4>)
 8004586:	fba3 2302 	umull	r2, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	011c      	lsls	r4, r3, #4
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800459c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045a8:	415b      	adcs	r3, r3
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045b0:	4641      	mov	r1, r8
 80045b2:	eb12 0a01 	adds.w	sl, r2, r1
 80045b6:	4649      	mov	r1, r9
 80045b8:	eb43 0b01 	adc.w	fp, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d0:	4692      	mov	sl, r2
 80045d2:	469b      	mov	fp, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	eb1a 0303 	adds.w	r3, sl, r3
 80045da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045de:	464b      	mov	r3, r9
 80045e0:	eb4b 0303 	adc.w	r3, fp, r3
 80045e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045fc:	460b      	mov	r3, r1
 80045fe:	18db      	adds	r3, r3, r3
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	4613      	mov	r3, r2
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
 800460a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800460e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004612:	f7fc fb39 	bl	8000c88 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4611      	mov	r1, r2
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <UART_SetConfig+0x2d4>)
 800461e:	fba3 2301 	umull	r2, r3, r3, r1
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2264      	movs	r2, #100	; 0x64
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	1acb      	subs	r3, r1, r3
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <UART_SetConfig+0x2d4>)
 8004634:	fba3 2302 	umull	r2, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004640:	441c      	add	r4, r3
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	63b9      	str	r1, [r7, #56]	; 0x38
 800465c:	415b      	adcs	r3, r3
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004664:	4641      	mov	r1, r8
 8004666:	1851      	adds	r1, r2, r1
 8004668:	6339      	str	r1, [r7, #48]	; 0x30
 800466a:	4649      	mov	r1, r9
 800466c:	414b      	adcs	r3, r1
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800467c:	4659      	mov	r1, fp
 800467e:	00cb      	lsls	r3, r1, #3
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004686:	4651      	mov	r1, sl
 8004688:	00ca      	lsls	r2, r1, #3
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	4603      	mov	r3, r0
 8004690:	4642      	mov	r2, r8
 8004692:	189b      	adds	r3, r3, r2
 8004694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004698:	464b      	mov	r3, r9
 800469a:	460a      	mov	r2, r1
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046b8:	460b      	mov	r3, r1
 80046ba:	18db      	adds	r3, r3, r3
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046ce:	f7fc fadb 	bl	8000c88 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <UART_SetConfig+0x2d4>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <UART_SetConfig+0x2d4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4422      	add	r2, r4
 80046fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004700:	e105      	b.n	800490e <UART_SetConfig+0x4d6>
 8004702:	bf00      	nop
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800471a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800471e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	6239      	str	r1, [r7, #32]
 800472a:	415b      	adcs	r3, r3
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004732:	4641      	mov	r1, r8
 8004734:	1854      	adds	r4, r2, r1
 8004736:	4649      	mov	r1, r9
 8004738:	eb43 0501 	adc.w	r5, r3, r1
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	00eb      	lsls	r3, r5, #3
 8004746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474a:	00e2      	lsls	r2, r4, #3
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	4643      	mov	r3, r8
 8004752:	18e3      	adds	r3, r4, r3
 8004754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004758:	464b      	mov	r3, r9
 800475a:	eb45 0303 	adc.w	r3, r5, r3
 800475e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800476e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800477e:	4629      	mov	r1, r5
 8004780:	008b      	lsls	r3, r1, #2
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004788:	4621      	mov	r1, r4
 800478a:	008a      	lsls	r2, r1, #2
 800478c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004790:	f7fc fa7a 	bl	8000c88 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b60      	ldr	r3, [pc, #384]	; (800491c <UART_SetConfig+0x4e4>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	61b9      	str	r1, [r7, #24]
 80047bc:	415b      	adcs	r3, r3
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6139      	str	r1, [r7, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	67bb      	str	r3, [r7, #120]	; 0x78
 800480e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800481c:	4649      	mov	r1, r9
 800481e:	008b      	lsls	r3, r1, #2
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004826:	4641      	mov	r1, r8
 8004828:	008a      	lsls	r2, r1, #2
 800482a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800482e:	f7fc fa2b 	bl	8000c88 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <UART_SetConfig+0x4e4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <UART_SetConfig+0x4e4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004856:	441c      	add	r4, r3
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	673b      	str	r3, [r7, #112]	; 0x70
 8004860:	677a      	str	r2, [r7, #116]	; 0x74
 8004862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	1891      	adds	r1, r2, r2
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	415b      	adcs	r3, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004876:	4641      	mov	r1, r8
 8004878:	1851      	adds	r1, r2, r1
 800487a:	6039      	str	r1, [r7, #0]
 800487c:	4649      	mov	r1, r9
 800487e:	414b      	adcs	r3, r1
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800488e:	4659      	mov	r1, fp
 8004890:	00cb      	lsls	r3, r1, #3
 8004892:	4651      	mov	r1, sl
 8004894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004898:	4651      	mov	r1, sl
 800489a:	00ca      	lsls	r2, r1, #3
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	4603      	mov	r3, r0
 80048a2:	4642      	mov	r2, r8
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a8:	464b      	mov	r3, r9
 80048aa:	460a      	mov	r2, r1
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	663b      	str	r3, [r7, #96]	; 0x60
 80048bc:	667a      	str	r2, [r7, #100]	; 0x64
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048ca:	4649      	mov	r1, r9
 80048cc:	008b      	lsls	r3, r1, #2
 80048ce:	4641      	mov	r1, r8
 80048d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d4:	4641      	mov	r1, r8
 80048d6:	008a      	lsls	r2, r1, #2
 80048d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048dc:	f7fc f9d4 	bl	8000c88 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x4e4>)
 80048e6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2164      	movs	r1, #100	; 0x64
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x4e4>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4422      	add	r2, r4
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	bf00      	nop
 8004910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <__errno>:
 8004920:	4b01      	ldr	r3, [pc, #4]	; (8004928 <__errno+0x8>)
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000250 	.word	0x20000250

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f004 fcae 	bl	80092a0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08009e94 	.word	0x08009e94
 8004968:	08009e94 	.word	0x08009e94
 800496c:	08009e94 	.word	0x08009e94
 8004970:	08009e98 	.word	0x08009e98

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <__cvt>:
 80049a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	ec55 4b10 	vmov	r4, r5, d0
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	460e      	mov	r6, r1
 80049ac:	4619      	mov	r1, r3
 80049ae:	462b      	mov	r3, r5
 80049b0:	bfbb      	ittet	lt
 80049b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049b6:	461d      	movlt	r5, r3
 80049b8:	2300      	movge	r3, #0
 80049ba:	232d      	movlt	r3, #45	; 0x2d
 80049bc:	700b      	strb	r3, [r1, #0]
 80049be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049c4:	4691      	mov	r9, r2
 80049c6:	f023 0820 	bic.w	r8, r3, #32
 80049ca:	bfbc      	itt	lt
 80049cc:	4622      	movlt	r2, r4
 80049ce:	4614      	movlt	r4, r2
 80049d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d4:	d005      	beq.n	80049e2 <__cvt+0x42>
 80049d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049da:	d100      	bne.n	80049de <__cvt+0x3e>
 80049dc:	3601      	adds	r6, #1
 80049de:	2102      	movs	r1, #2
 80049e0:	e000      	b.n	80049e4 <__cvt+0x44>
 80049e2:	2103      	movs	r1, #3
 80049e4:	ab03      	add	r3, sp, #12
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	ab02      	add	r3, sp, #8
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	ec45 4b10 	vmov	d0, r4, r5
 80049f0:	4653      	mov	r3, sl
 80049f2:	4632      	mov	r2, r6
 80049f4:	f001 fdcc 	bl	8006590 <_dtoa_r>
 80049f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049fc:	4607      	mov	r7, r0
 80049fe:	d102      	bne.n	8004a06 <__cvt+0x66>
 8004a00:	f019 0f01 	tst.w	r9, #1
 8004a04:	d022      	beq.n	8004a4c <__cvt+0xac>
 8004a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a0a:	eb07 0906 	add.w	r9, r7, r6
 8004a0e:	d110      	bne.n	8004a32 <__cvt+0x92>
 8004a10:	783b      	ldrb	r3, [r7, #0]
 8004a12:	2b30      	cmp	r3, #48	; 0x30
 8004a14:	d10a      	bne.n	8004a2c <__cvt+0x8c>
 8004a16:	2200      	movs	r2, #0
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f7fc f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a22:	b918      	cbnz	r0, 8004a2c <__cvt+0x8c>
 8004a24:	f1c6 0601 	rsb	r6, r6, #1
 8004a28:	f8ca 6000 	str.w	r6, [sl]
 8004a2c:	f8da 3000 	ldr.w	r3, [sl]
 8004a30:	4499      	add	r9, r3
 8004a32:	2200      	movs	r2, #0
 8004a34:	2300      	movs	r3, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7fc f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a3e:	b108      	cbz	r0, 8004a44 <__cvt+0xa4>
 8004a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a44:	2230      	movs	r2, #48	; 0x30
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	454b      	cmp	r3, r9
 8004a4a:	d307      	bcc.n	8004a5c <__cvt+0xbc>
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a50:	1bdb      	subs	r3, r3, r7
 8004a52:	4638      	mov	r0, r7
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	b004      	add	sp, #16
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	1c59      	adds	r1, r3, #1
 8004a5e:	9103      	str	r1, [sp, #12]
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e7f0      	b.n	8004a46 <__cvt+0xa6>

08004a64 <__exponent>:
 8004a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a66:	4603      	mov	r3, r0
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	bfb8      	it	lt
 8004a6c:	4249      	neglt	r1, r1
 8004a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a72:	bfb4      	ite	lt
 8004a74:	222d      	movlt	r2, #45	; 0x2d
 8004a76:	222b      	movge	r2, #43	; 0x2b
 8004a78:	2909      	cmp	r1, #9
 8004a7a:	7042      	strb	r2, [r0, #1]
 8004a7c:	dd2a      	ble.n	8004ad4 <__exponent+0x70>
 8004a7e:	f10d 0407 	add.w	r4, sp, #7
 8004a82:	46a4      	mov	ip, r4
 8004a84:	270a      	movs	r7, #10
 8004a86:	46a6      	mov	lr, r4
 8004a88:	460a      	mov	r2, r1
 8004a8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8004a92:	3530      	adds	r5, #48	; 0x30
 8004a94:	2a63      	cmp	r2, #99	; 0x63
 8004a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	dcf1      	bgt.n	8004a86 <__exponent+0x22>
 8004aa2:	3130      	adds	r1, #48	; 0x30
 8004aa4:	f1ae 0502 	sub.w	r5, lr, #2
 8004aa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004aac:	1c44      	adds	r4, r0, #1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4561      	cmp	r1, ip
 8004ab2:	d30a      	bcc.n	8004aca <__exponent+0x66>
 8004ab4:	f10d 0209 	add.w	r2, sp, #9
 8004ab8:	eba2 020e 	sub.w	r2, r2, lr
 8004abc:	4565      	cmp	r5, ip
 8004abe:	bf88      	it	hi
 8004ac0:	2200      	movhi	r2, #0
 8004ac2:	4413      	add	r3, r2
 8004ac4:	1a18      	subs	r0, r3, r0
 8004ac6:	b003      	add	sp, #12
 8004ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ace:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ad2:	e7ed      	b.n	8004ab0 <__exponent+0x4c>
 8004ad4:	2330      	movs	r3, #48	; 0x30
 8004ad6:	3130      	adds	r1, #48	; 0x30
 8004ad8:	7083      	strb	r3, [r0, #2]
 8004ada:	70c1      	strb	r1, [r0, #3]
 8004adc:	1d03      	adds	r3, r0, #4
 8004ade:	e7f1      	b.n	8004ac4 <__exponent+0x60>

08004ae0 <_printf_float>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	ed2d 8b02 	vpush	{d8}
 8004ae8:	b08d      	sub	sp, #52	; 0x34
 8004aea:	460c      	mov	r4, r1
 8004aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004af0:	4616      	mov	r6, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	4605      	mov	r5, r0
 8004af6:	f002 fea9 	bl	800784c <_localeconv_r>
 8004afa:	f8d0 a000 	ldr.w	sl, [r0]
 8004afe:	4650      	mov	r0, sl
 8004b00:	f7fb fb66 	bl	80001d0 <strlen>
 8004b04:	2300      	movs	r3, #0
 8004b06:	930a      	str	r3, [sp, #40]	; 0x28
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b14:	3307      	adds	r3, #7
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	f103 0208 	add.w	r2, r3, #8
 8004b1e:	f8c8 2000 	str.w	r2, [r8]
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b38:	ee08 0a10 	vmov	s16, r0
 8004b3c:	4b9f      	ldr	r3, [pc, #636]	; (8004dbc <_printf_float+0x2dc>)
 8004b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	f7fb fff1 	bl	8000b2c <__aeabi_dcmpun>
 8004b4a:	bb88      	cbnz	r0, 8004bb0 <_printf_float+0xd0>
 8004b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b50:	4b9a      	ldr	r3, [pc, #616]	; (8004dbc <_printf_float+0x2dc>)
 8004b52:	f04f 32ff 	mov.w	r2, #4294967295
 8004b56:	f7fb ffcb 	bl	8000af0 <__aeabi_dcmple>
 8004b5a:	bb48      	cbnz	r0, 8004bb0 <_printf_float+0xd0>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4640      	mov	r0, r8
 8004b62:	4649      	mov	r1, r9
 8004b64:	f7fb ffba 	bl	8000adc <__aeabi_dcmplt>
 8004b68:	b110      	cbz	r0, 8004b70 <_printf_float+0x90>
 8004b6a:	232d      	movs	r3, #45	; 0x2d
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b70:	4b93      	ldr	r3, [pc, #588]	; (8004dc0 <_printf_float+0x2e0>)
 8004b72:	4894      	ldr	r0, [pc, #592]	; (8004dc4 <_printf_float+0x2e4>)
 8004b74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b78:	bf94      	ite	ls
 8004b7a:	4698      	movls	r8, r3
 8004b7c:	4680      	movhi	r8, r0
 8004b7e:	2303      	movs	r3, #3
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	9b05      	ldr	r3, [sp, #20]
 8004b84:	f023 0204 	bic.w	r2, r3, #4
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	f04f 0900 	mov.w	r9, #0
 8004b8e:	9700      	str	r7, [sp, #0]
 8004b90:	4633      	mov	r3, r6
 8004b92:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f9d8 	bl	8004f4c <_printf_common>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f040 8090 	bne.w	8004cc2 <_printf_float+0x1e2>
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	b00d      	add	sp, #52	; 0x34
 8004ba8:	ecbd 8b02 	vpop	{d8}
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	f7fb ffb8 	bl	8000b2c <__aeabi_dcmpun>
 8004bbc:	b140      	cbz	r0, 8004bd0 <_printf_float+0xf0>
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bfbc      	itt	lt
 8004bc4:	232d      	movlt	r3, #45	; 0x2d
 8004bc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bca:	487f      	ldr	r0, [pc, #508]	; (8004dc8 <_printf_float+0x2e8>)
 8004bcc:	4b7f      	ldr	r3, [pc, #508]	; (8004dcc <_printf_float+0x2ec>)
 8004bce:	e7d1      	b.n	8004b74 <_printf_float+0x94>
 8004bd0:	6863      	ldr	r3, [r4, #4]
 8004bd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bd6:	9206      	str	r2, [sp, #24]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	d13f      	bne.n	8004c5c <_printf_float+0x17c>
 8004bdc:	2306      	movs	r3, #6
 8004bde:	6063      	str	r3, [r4, #4]
 8004be0:	9b05      	ldr	r3, [sp, #20]
 8004be2:	6861      	ldr	r1, [r4, #4]
 8004be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004be8:	2300      	movs	r3, #0
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	ab0a      	add	r3, sp, #40	; 0x28
 8004bee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bf2:	ab09      	add	r3, sp, #36	; 0x24
 8004bf4:	ec49 8b10 	vmov	d0, r8, r9
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	6022      	str	r2, [r4, #0]
 8004bfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7ff fecd 	bl	80049a0 <__cvt>
 8004c06:	9b06      	ldr	r3, [sp, #24]
 8004c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c0a:	2b47      	cmp	r3, #71	; 0x47
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	d108      	bne.n	8004c22 <_printf_float+0x142>
 8004c10:	1cc8      	adds	r0, r1, #3
 8004c12:	db02      	blt.n	8004c1a <_printf_float+0x13a>
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	4299      	cmp	r1, r3
 8004c18:	dd41      	ble.n	8004c9e <_printf_float+0x1be>
 8004c1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c1e:	fa5f fb8b 	uxtb.w	fp, fp
 8004c22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c26:	d820      	bhi.n	8004c6a <_printf_float+0x18a>
 8004c28:	3901      	subs	r1, #1
 8004c2a:	465a      	mov	r2, fp
 8004c2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c30:	9109      	str	r1, [sp, #36]	; 0x24
 8004c32:	f7ff ff17 	bl	8004a64 <__exponent>
 8004c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c38:	1813      	adds	r3, r2, r0
 8004c3a:	2a01      	cmp	r2, #1
 8004c3c:	4681      	mov	r9, r0
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	dc02      	bgt.n	8004c48 <_printf_float+0x168>
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	07d2      	lsls	r2, r2, #31
 8004c46:	d501      	bpl.n	8004c4c <_printf_float+0x16c>
 8004c48:	3301      	adds	r3, #1
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d09c      	beq.n	8004b8e <_printf_float+0xae>
 8004c54:	232d      	movs	r3, #45	; 0x2d
 8004c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5a:	e798      	b.n	8004b8e <_printf_float+0xae>
 8004c5c:	9a06      	ldr	r2, [sp, #24]
 8004c5e:	2a47      	cmp	r2, #71	; 0x47
 8004c60:	d1be      	bne.n	8004be0 <_printf_float+0x100>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1bc      	bne.n	8004be0 <_printf_float+0x100>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e7b9      	b.n	8004bde <_printf_float+0xfe>
 8004c6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c6e:	d118      	bne.n	8004ca2 <_printf_float+0x1c2>
 8004c70:	2900      	cmp	r1, #0
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	dd0b      	ble.n	8004c8e <_printf_float+0x1ae>
 8004c76:	6121      	str	r1, [r4, #16]
 8004c78:	b913      	cbnz	r3, 8004c80 <_printf_float+0x1a0>
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	07d0      	lsls	r0, r2, #31
 8004c7e:	d502      	bpl.n	8004c86 <_printf_float+0x1a6>
 8004c80:	3301      	adds	r3, #1
 8004c82:	440b      	add	r3, r1
 8004c84:	6123      	str	r3, [r4, #16]
 8004c86:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c88:	f04f 0900 	mov.w	r9, #0
 8004c8c:	e7de      	b.n	8004c4c <_printf_float+0x16c>
 8004c8e:	b913      	cbnz	r3, 8004c96 <_printf_float+0x1b6>
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	07d2      	lsls	r2, r2, #31
 8004c94:	d501      	bpl.n	8004c9a <_printf_float+0x1ba>
 8004c96:	3302      	adds	r3, #2
 8004c98:	e7f4      	b.n	8004c84 <_printf_float+0x1a4>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e7f2      	b.n	8004c84 <_printf_float+0x1a4>
 8004c9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	db05      	blt.n	8004cb4 <_printf_float+0x1d4>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	6121      	str	r1, [r4, #16]
 8004cac:	07d8      	lsls	r0, r3, #31
 8004cae:	d5ea      	bpl.n	8004c86 <_printf_float+0x1a6>
 8004cb0:	1c4b      	adds	r3, r1, #1
 8004cb2:	e7e7      	b.n	8004c84 <_printf_float+0x1a4>
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	bfd4      	ite	le
 8004cb8:	f1c1 0202 	rsble	r2, r1, #2
 8004cbc:	2201      	movgt	r2, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	e7e0      	b.n	8004c84 <_printf_float+0x1a4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	055a      	lsls	r2, r3, #21
 8004cc6:	d407      	bmi.n	8004cd8 <_printf_float+0x1f8>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	4642      	mov	r2, r8
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d12c      	bne.n	8004d30 <_printf_float+0x250>
 8004cd6:	e764      	b.n	8004ba2 <_printf_float+0xc2>
 8004cd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cdc:	f240 80e0 	bls.w	8004ea0 <_printf_float+0x3c0>
 8004ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f7fb feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d034      	beq.n	8004d5a <_printf_float+0x27a>
 8004cf0:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <_printf_float+0x2f0>)
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f af51 	beq.w	8004ba2 <_printf_float+0xc2>
 8004d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d04:	429a      	cmp	r2, r3
 8004d06:	db02      	blt.n	8004d0e <_printf_float+0x22e>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	07d8      	lsls	r0, r3, #31
 8004d0c:	d510      	bpl.n	8004d30 <_printf_float+0x250>
 8004d0e:	ee18 3a10 	vmov	r3, s16
 8004d12:	4652      	mov	r2, sl
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f af41 	beq.w	8004ba2 <_printf_float+0xc2>
 8004d20:	f04f 0800 	mov.w	r8, #0
 8004d24:	f104 091a 	add.w	r9, r4, #26
 8004d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	dc09      	bgt.n	8004d44 <_printf_float+0x264>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	079b      	lsls	r3, r3, #30
 8004d34:	f100 8105 	bmi.w	8004f42 <_printf_float+0x462>
 8004d38:	68e0      	ldr	r0, [r4, #12]
 8004d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d3c:	4298      	cmp	r0, r3
 8004d3e:	bfb8      	it	lt
 8004d40:	4618      	movlt	r0, r3
 8004d42:	e730      	b.n	8004ba6 <_printf_float+0xc6>
 8004d44:	2301      	movs	r3, #1
 8004d46:	464a      	mov	r2, r9
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f43f af27 	beq.w	8004ba2 <_printf_float+0xc2>
 8004d54:	f108 0801 	add.w	r8, r8, #1
 8004d58:	e7e6      	b.n	8004d28 <_printf_float+0x248>
 8004d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dc39      	bgt.n	8004dd4 <_printf_float+0x2f4>
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <_printf_float+0x2f0>)
 8004d62:	2301      	movs	r3, #1
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af19 	beq.w	8004ba2 <_printf_float+0xc2>
 8004d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d102      	bne.n	8004d7e <_printf_float+0x29e>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	07d9      	lsls	r1, r3, #31
 8004d7c:	d5d8      	bpl.n	8004d30 <_printf_float+0x250>
 8004d7e:	ee18 3a10 	vmov	r3, s16
 8004d82:	4652      	mov	r2, sl
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f af09 	beq.w	8004ba2 <_printf_float+0xc2>
 8004d90:	f04f 0900 	mov.w	r9, #0
 8004d94:	f104 0a1a 	add.w	sl, r4, #26
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	425b      	negs	r3, r3
 8004d9c:	454b      	cmp	r3, r9
 8004d9e:	dc01      	bgt.n	8004da4 <_printf_float+0x2c4>
 8004da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da2:	e792      	b.n	8004cca <_printf_float+0x1ea>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4652      	mov	r2, sl
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	f43f aef7 	beq.w	8004ba2 <_printf_float+0xc2>
 8004db4:	f109 0901 	add.w	r9, r9, #1
 8004db8:	e7ee      	b.n	8004d98 <_printf_float+0x2b8>
 8004dba:	bf00      	nop
 8004dbc:	7fefffff 	.word	0x7fefffff
 8004dc0:	080099ec 	.word	0x080099ec
 8004dc4:	080099f0 	.word	0x080099f0
 8004dc8:	080099f8 	.word	0x080099f8
 8004dcc:	080099f4 	.word	0x080099f4
 8004dd0:	080099fc 	.word	0x080099fc
 8004dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	bfa8      	it	ge
 8004ddc:	461a      	movge	r2, r3
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	4691      	mov	r9, r2
 8004de2:	dc37      	bgt.n	8004e54 <_printf_float+0x374>
 8004de4:	f04f 0b00 	mov.w	fp, #0
 8004de8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dec:	f104 021a 	add.w	r2, r4, #26
 8004df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df2:	9305      	str	r3, [sp, #20]
 8004df4:	eba3 0309 	sub.w	r3, r3, r9
 8004df8:	455b      	cmp	r3, fp
 8004dfa:	dc33      	bgt.n	8004e64 <_printf_float+0x384>
 8004dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e00:	429a      	cmp	r2, r3
 8004e02:	db3b      	blt.n	8004e7c <_printf_float+0x39c>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	07da      	lsls	r2, r3, #31
 8004e08:	d438      	bmi.n	8004e7c <_printf_float+0x39c>
 8004e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0c:	9a05      	ldr	r2, [sp, #20]
 8004e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e10:	1a9a      	subs	r2, r3, r2
 8004e12:	eba3 0901 	sub.w	r9, r3, r1
 8004e16:	4591      	cmp	r9, r2
 8004e18:	bfa8      	it	ge
 8004e1a:	4691      	movge	r9, r2
 8004e1c:	f1b9 0f00 	cmp.w	r9, #0
 8004e20:	dc35      	bgt.n	8004e8e <_printf_float+0x3ae>
 8004e22:	f04f 0800 	mov.w	r8, #0
 8004e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e2a:	f104 0a1a 	add.w	sl, r4, #26
 8004e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	eba3 0309 	sub.w	r3, r3, r9
 8004e38:	4543      	cmp	r3, r8
 8004e3a:	f77f af79 	ble.w	8004d30 <_printf_float+0x250>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f aeaa 	beq.w	8004ba2 <_printf_float+0xc2>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	e7ec      	b.n	8004e2e <_printf_float+0x34e>
 8004e54:	4613      	mov	r3, r2
 8004e56:	4631      	mov	r1, r6
 8004e58:	4642      	mov	r2, r8
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b8      	blx	r7
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d1c0      	bne.n	8004de4 <_printf_float+0x304>
 8004e62:	e69e      	b.n	8004ba2 <_printf_float+0xc2>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	9205      	str	r2, [sp, #20]
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f ae97 	beq.w	8004ba2 <_printf_float+0xc2>
 8004e74:	9a05      	ldr	r2, [sp, #20]
 8004e76:	f10b 0b01 	add.w	fp, fp, #1
 8004e7a:	e7b9      	b.n	8004df0 <_printf_float+0x310>
 8004e7c:	ee18 3a10 	vmov	r3, s16
 8004e80:	4652      	mov	r2, sl
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d1be      	bne.n	8004e0a <_printf_float+0x32a>
 8004e8c:	e689      	b.n	8004ba2 <_printf_float+0xc2>
 8004e8e:	9a05      	ldr	r2, [sp, #20]
 8004e90:	464b      	mov	r3, r9
 8004e92:	4442      	add	r2, r8
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d1c1      	bne.n	8004e22 <_printf_float+0x342>
 8004e9e:	e680      	b.n	8004ba2 <_printf_float+0xc2>
 8004ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ea2:	2a01      	cmp	r2, #1
 8004ea4:	dc01      	bgt.n	8004eaa <_printf_float+0x3ca>
 8004ea6:	07db      	lsls	r3, r3, #31
 8004ea8:	d538      	bpl.n	8004f1c <_printf_float+0x43c>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4642      	mov	r2, r8
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f ae74 	beq.w	8004ba2 <_printf_float+0xc2>
 8004eba:	ee18 3a10 	vmov	r3, s16
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f43f ae6b 	beq.w	8004ba2 <_printf_float+0xc2>
 8004ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f7fb fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed8:	b9d8      	cbnz	r0, 8004f12 <_printf_float+0x432>
 8004eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004edc:	f108 0201 	add.w	r2, r8, #1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d10e      	bne.n	8004f0a <_printf_float+0x42a>
 8004eec:	e659      	b.n	8004ba2 <_printf_float+0xc2>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f ae52 	beq.w	8004ba2 <_printf_float+0xc2>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4543      	cmp	r3, r8
 8004f08:	dcf1      	bgt.n	8004eee <_printf_float+0x40e>
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f10:	e6dc      	b.n	8004ccc <_printf_float+0x1ec>
 8004f12:	f04f 0800 	mov.w	r8, #0
 8004f16:	f104 0a1a 	add.w	sl, r4, #26
 8004f1a:	e7f2      	b.n	8004f02 <_printf_float+0x422>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4642      	mov	r2, r8
 8004f20:	e7df      	b.n	8004ee2 <_printf_float+0x402>
 8004f22:	2301      	movs	r3, #1
 8004f24:	464a      	mov	r2, r9
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	f43f ae38 	beq.w	8004ba2 <_printf_float+0xc2>
 8004f32:	f108 0801 	add.w	r8, r8, #1
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f3a:	1a5b      	subs	r3, r3, r1
 8004f3c:	4543      	cmp	r3, r8
 8004f3e:	dcf0      	bgt.n	8004f22 <_printf_float+0x442>
 8004f40:	e6fa      	b.n	8004d38 <_printf_float+0x258>
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	f104 0919 	add.w	r9, r4, #25
 8004f4a:	e7f4      	b.n	8004f36 <_printf_float+0x456>

08004f4c <_printf_common>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	4616      	mov	r6, r2
 8004f52:	4699      	mov	r9, r3
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	690b      	ldr	r3, [r1, #16]
 8004f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bfb8      	it	lt
 8004f60:	4613      	movlt	r3, r2
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f68:	4607      	mov	r7, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b10a      	cbz	r2, 8004f72 <_printf_common+0x26>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0699      	lsls	r1, r3, #26
 8004f76:	bf42      	ittt	mi
 8004f78:	6833      	ldrmi	r3, [r6, #0]
 8004f7a:	3302      	addmi	r3, #2
 8004f7c:	6033      	strmi	r3, [r6, #0]
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	f015 0506 	ands.w	r5, r5, #6
 8004f84:	d106      	bne.n	8004f94 <_printf_common+0x48>
 8004f86:	f104 0a19 	add.w	sl, r4, #25
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	6832      	ldr	r2, [r6, #0]
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dc26      	bgt.n	8004fe2 <_printf_common+0x96>
 8004f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f98:	1e13      	subs	r3, r2, #0
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	0692      	lsls	r2, r2, #26
 8004fa2:	d42b      	bmi.n	8004ffc <_printf_common+0xb0>
 8004fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d01e      	beq.n	8004ff0 <_printf_common+0xa4>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	68e5      	ldr	r5, [r4, #12]
 8004fb6:	6832      	ldr	r2, [r6, #0]
 8004fb8:	f003 0306 	and.w	r3, r3, #6
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	bf08      	it	eq
 8004fc0:	1aad      	subeq	r5, r5, r2
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	bf0c      	ite	eq
 8004fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fcc:	2500      	movne	r5, #0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfc4      	itt	gt
 8004fd2:	1a9b      	subgt	r3, r3, r2
 8004fd4:	18ed      	addgt	r5, r5, r3
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	341a      	adds	r4, #26
 8004fda:	42b5      	cmp	r5, r6
 8004fdc:	d11a      	bne.n	8005014 <_printf_common+0xc8>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e008      	b.n	8004ff4 <_printf_common+0xa8>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4638      	mov	r0, r7
 8004fea:	47c0      	blx	r8
 8004fec:	3001      	adds	r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_printf_common+0xac>
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	e7c6      	b.n	8004f8a <_printf_common+0x3e>
 8004ffc:	18e1      	adds	r1, r4, r3
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	2030      	movs	r0, #48	; 0x30
 8005002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005006:	4422      	add	r2, r4
 8005008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005010:	3302      	adds	r3, #2
 8005012:	e7c7      	b.n	8004fa4 <_printf_common+0x58>
 8005014:	2301      	movs	r3, #1
 8005016:	4622      	mov	r2, r4
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d0e6      	beq.n	8004ff0 <_printf_common+0xa4>
 8005022:	3601      	adds	r6, #1
 8005024:	e7d9      	b.n	8004fda <_printf_common+0x8e>
	...

08005028 <_printf_i>:
 8005028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	7e0f      	ldrb	r7, [r1, #24]
 800502e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005030:	2f78      	cmp	r7, #120	; 0x78
 8005032:	4691      	mov	r9, r2
 8005034:	4680      	mov	r8, r0
 8005036:	460c      	mov	r4, r1
 8005038:	469a      	mov	sl, r3
 800503a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800503e:	d807      	bhi.n	8005050 <_printf_i+0x28>
 8005040:	2f62      	cmp	r7, #98	; 0x62
 8005042:	d80a      	bhi.n	800505a <_printf_i+0x32>
 8005044:	2f00      	cmp	r7, #0
 8005046:	f000 80d8 	beq.w	80051fa <_printf_i+0x1d2>
 800504a:	2f58      	cmp	r7, #88	; 0x58
 800504c:	f000 80a3 	beq.w	8005196 <_printf_i+0x16e>
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005058:	e03a      	b.n	80050d0 <_printf_i+0xa8>
 800505a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800505e:	2b15      	cmp	r3, #21
 8005060:	d8f6      	bhi.n	8005050 <_printf_i+0x28>
 8005062:	a101      	add	r1, pc, #4	; (adr r1, 8005068 <_printf_i+0x40>)
 8005064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050d5 	.word	0x080050d5
 8005070:	08005051 	.word	0x08005051
 8005074:	08005051 	.word	0x08005051
 8005078:	08005051 	.word	0x08005051
 800507c:	08005051 	.word	0x08005051
 8005080:	080050d5 	.word	0x080050d5
 8005084:	08005051 	.word	0x08005051
 8005088:	08005051 	.word	0x08005051
 800508c:	08005051 	.word	0x08005051
 8005090:	08005051 	.word	0x08005051
 8005094:	080051e1 	.word	0x080051e1
 8005098:	08005105 	.word	0x08005105
 800509c:	080051c3 	.word	0x080051c3
 80050a0:	08005051 	.word	0x08005051
 80050a4:	08005051 	.word	0x08005051
 80050a8:	08005203 	.word	0x08005203
 80050ac:	08005051 	.word	0x08005051
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005051 	.word	0x08005051
 80050b8:	08005051 	.word	0x08005051
 80050bc:	080051cb 	.word	0x080051cb
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0a3      	b.n	800521c <_printf_i+0x1f4>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	6829      	ldr	r1, [r5, #0]
 80050d8:	0606      	lsls	r6, r0, #24
 80050da:	f101 0304 	add.w	r3, r1, #4
 80050de:	d50a      	bpl.n	80050f6 <_printf_i+0xce>
 80050e0:	680e      	ldr	r6, [r1, #0]
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	2e00      	cmp	r6, #0
 80050e6:	da03      	bge.n	80050f0 <_printf_i+0xc8>
 80050e8:	232d      	movs	r3, #45	; 0x2d
 80050ea:	4276      	negs	r6, r6
 80050ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f0:	485e      	ldr	r0, [pc, #376]	; (800526c <_printf_i+0x244>)
 80050f2:	230a      	movs	r3, #10
 80050f4:	e019      	b.n	800512a <_printf_i+0x102>
 80050f6:	680e      	ldr	r6, [r1, #0]
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050fe:	bf18      	it	ne
 8005100:	b236      	sxthne	r6, r6
 8005102:	e7ef      	b.n	80050e4 <_printf_i+0xbc>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	1d19      	adds	r1, r3, #4
 800510a:	6029      	str	r1, [r5, #0]
 800510c:	0601      	lsls	r1, r0, #24
 800510e:	d501      	bpl.n	8005114 <_printf_i+0xec>
 8005110:	681e      	ldr	r6, [r3, #0]
 8005112:	e002      	b.n	800511a <_printf_i+0xf2>
 8005114:	0646      	lsls	r6, r0, #25
 8005116:	d5fb      	bpl.n	8005110 <_printf_i+0xe8>
 8005118:	881e      	ldrh	r6, [r3, #0]
 800511a:	4854      	ldr	r0, [pc, #336]	; (800526c <_printf_i+0x244>)
 800511c:	2f6f      	cmp	r7, #111	; 0x6f
 800511e:	bf0c      	ite	eq
 8005120:	2308      	moveq	r3, #8
 8005122:	230a      	movne	r3, #10
 8005124:	2100      	movs	r1, #0
 8005126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800512a:	6865      	ldr	r5, [r4, #4]
 800512c:	60a5      	str	r5, [r4, #8]
 800512e:	2d00      	cmp	r5, #0
 8005130:	bfa2      	ittt	ge
 8005132:	6821      	ldrge	r1, [r4, #0]
 8005134:	f021 0104 	bicge.w	r1, r1, #4
 8005138:	6021      	strge	r1, [r4, #0]
 800513a:	b90e      	cbnz	r6, 8005140 <_printf_i+0x118>
 800513c:	2d00      	cmp	r5, #0
 800513e:	d04d      	beq.n	80051dc <_printf_i+0x1b4>
 8005140:	4615      	mov	r5, r2
 8005142:	fbb6 f1f3 	udiv	r1, r6, r3
 8005146:	fb03 6711 	mls	r7, r3, r1, r6
 800514a:	5dc7      	ldrb	r7, [r0, r7]
 800514c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005150:	4637      	mov	r7, r6
 8005152:	42bb      	cmp	r3, r7
 8005154:	460e      	mov	r6, r1
 8005156:	d9f4      	bls.n	8005142 <_printf_i+0x11a>
 8005158:	2b08      	cmp	r3, #8
 800515a:	d10b      	bne.n	8005174 <_printf_i+0x14c>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07de      	lsls	r6, r3, #31
 8005160:	d508      	bpl.n	8005174 <_printf_i+0x14c>
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	6861      	ldr	r1, [r4, #4]
 8005166:	4299      	cmp	r1, r3
 8005168:	bfde      	ittt	le
 800516a:	2330      	movle	r3, #48	; 0x30
 800516c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005174:	1b52      	subs	r2, r2, r5
 8005176:	6122      	str	r2, [r4, #16]
 8005178:	f8cd a000 	str.w	sl, [sp]
 800517c:	464b      	mov	r3, r9
 800517e:	aa03      	add	r2, sp, #12
 8005180:	4621      	mov	r1, r4
 8005182:	4640      	mov	r0, r8
 8005184:	f7ff fee2 	bl	8004f4c <_printf_common>
 8005188:	3001      	adds	r0, #1
 800518a:	d14c      	bne.n	8005226 <_printf_i+0x1fe>
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	b004      	add	sp, #16
 8005192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005196:	4835      	ldr	r0, [pc, #212]	; (800526c <_printf_i+0x244>)
 8005198:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800519c:	6829      	ldr	r1, [r5, #0]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80051a4:	6029      	str	r1, [r5, #0]
 80051a6:	061d      	lsls	r5, r3, #24
 80051a8:	d514      	bpl.n	80051d4 <_printf_i+0x1ac>
 80051aa:	07df      	lsls	r7, r3, #31
 80051ac:	bf44      	itt	mi
 80051ae:	f043 0320 	orrmi.w	r3, r3, #32
 80051b2:	6023      	strmi	r3, [r4, #0]
 80051b4:	b91e      	cbnz	r6, 80051be <_printf_i+0x196>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	f023 0320 	bic.w	r3, r3, #32
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	2310      	movs	r3, #16
 80051c0:	e7b0      	b.n	8005124 <_printf_i+0xfc>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	f043 0320 	orr.w	r3, r3, #32
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	2378      	movs	r3, #120	; 0x78
 80051cc:	4828      	ldr	r0, [pc, #160]	; (8005270 <_printf_i+0x248>)
 80051ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051d2:	e7e3      	b.n	800519c <_printf_i+0x174>
 80051d4:	0659      	lsls	r1, r3, #25
 80051d6:	bf48      	it	mi
 80051d8:	b2b6      	uxthmi	r6, r6
 80051da:	e7e6      	b.n	80051aa <_printf_i+0x182>
 80051dc:	4615      	mov	r5, r2
 80051de:	e7bb      	b.n	8005158 <_printf_i+0x130>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	6826      	ldr	r6, [r4, #0]
 80051e4:	6961      	ldr	r1, [r4, #20]
 80051e6:	1d18      	adds	r0, r3, #4
 80051e8:	6028      	str	r0, [r5, #0]
 80051ea:	0635      	lsls	r5, r6, #24
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	d501      	bpl.n	80051f4 <_printf_i+0x1cc>
 80051f0:	6019      	str	r1, [r3, #0]
 80051f2:	e002      	b.n	80051fa <_printf_i+0x1d2>
 80051f4:	0670      	lsls	r0, r6, #25
 80051f6:	d5fb      	bpl.n	80051f0 <_printf_i+0x1c8>
 80051f8:	8019      	strh	r1, [r3, #0]
 80051fa:	2300      	movs	r3, #0
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	4615      	mov	r5, r2
 8005200:	e7ba      	b.n	8005178 <_printf_i+0x150>
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	602a      	str	r2, [r5, #0]
 8005208:	681d      	ldr	r5, [r3, #0]
 800520a:	6862      	ldr	r2, [r4, #4]
 800520c:	2100      	movs	r1, #0
 800520e:	4628      	mov	r0, r5
 8005210:	f7fa ffe6 	bl	80001e0 <memchr>
 8005214:	b108      	cbz	r0, 800521a <_printf_i+0x1f2>
 8005216:	1b40      	subs	r0, r0, r5
 8005218:	6060      	str	r0, [r4, #4]
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	6123      	str	r3, [r4, #16]
 800521e:	2300      	movs	r3, #0
 8005220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005224:	e7a8      	b.n	8005178 <_printf_i+0x150>
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	462a      	mov	r2, r5
 800522a:	4649      	mov	r1, r9
 800522c:	4640      	mov	r0, r8
 800522e:	47d0      	blx	sl
 8005230:	3001      	adds	r0, #1
 8005232:	d0ab      	beq.n	800518c <_printf_i+0x164>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	079b      	lsls	r3, r3, #30
 8005238:	d413      	bmi.n	8005262 <_printf_i+0x23a>
 800523a:	68e0      	ldr	r0, [r4, #12]
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	4298      	cmp	r0, r3
 8005240:	bfb8      	it	lt
 8005242:	4618      	movlt	r0, r3
 8005244:	e7a4      	b.n	8005190 <_printf_i+0x168>
 8005246:	2301      	movs	r3, #1
 8005248:	4632      	mov	r2, r6
 800524a:	4649      	mov	r1, r9
 800524c:	4640      	mov	r0, r8
 800524e:	47d0      	blx	sl
 8005250:	3001      	adds	r0, #1
 8005252:	d09b      	beq.n	800518c <_printf_i+0x164>
 8005254:	3501      	adds	r5, #1
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	9903      	ldr	r1, [sp, #12]
 800525a:	1a5b      	subs	r3, r3, r1
 800525c:	42ab      	cmp	r3, r5
 800525e:	dcf2      	bgt.n	8005246 <_printf_i+0x21e>
 8005260:	e7eb      	b.n	800523a <_printf_i+0x212>
 8005262:	2500      	movs	r5, #0
 8005264:	f104 0619 	add.w	r6, r4, #25
 8005268:	e7f5      	b.n	8005256 <_printf_i+0x22e>
 800526a:	bf00      	nop
 800526c:	080099fe 	.word	0x080099fe
 8005270:	08009a0f 	.word	0x08009a0f

08005274 <_scanf_float>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	b087      	sub	sp, #28
 800527a:	4617      	mov	r7, r2
 800527c:	9303      	str	r3, [sp, #12]
 800527e:	688b      	ldr	r3, [r1, #8]
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005286:	bf83      	ittte	hi
 8005288:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800528c:	195b      	addhi	r3, r3, r5
 800528e:	9302      	strhi	r3, [sp, #8]
 8005290:	2300      	movls	r3, #0
 8005292:	bf86      	itte	hi
 8005294:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005298:	608b      	strhi	r3, [r1, #8]
 800529a:	9302      	strls	r3, [sp, #8]
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	468b      	mov	fp, r1
 80052a0:	2500      	movs	r5, #0
 80052a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80052a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80052aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052ae:	4680      	mov	r8, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	465e      	mov	r6, fp
 80052b4:	46aa      	mov	sl, r5
 80052b6:	46a9      	mov	r9, r5
 80052b8:	9501      	str	r5, [sp, #4]
 80052ba:	68a2      	ldr	r2, [r4, #8]
 80052bc:	b152      	cbz	r2, 80052d4 <_scanf_float+0x60>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b4e      	cmp	r3, #78	; 0x4e
 80052c4:	d864      	bhi.n	8005390 <_scanf_float+0x11c>
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d83c      	bhi.n	8005344 <_scanf_float+0xd0>
 80052ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80052ce:	b2c8      	uxtb	r0, r1
 80052d0:	280e      	cmp	r0, #14
 80052d2:	d93a      	bls.n	800534a <_scanf_float+0xd6>
 80052d4:	f1b9 0f00 	cmp.w	r9, #0
 80052d8:	d003      	beq.n	80052e2 <_scanf_float+0x6e>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052e6:	f1ba 0f01 	cmp.w	sl, #1
 80052ea:	f200 8113 	bhi.w	8005514 <_scanf_float+0x2a0>
 80052ee:	455e      	cmp	r6, fp
 80052f0:	f200 8105 	bhi.w	80054fe <_scanf_float+0x28a>
 80052f4:	2501      	movs	r5, #1
 80052f6:	4628      	mov	r0, r5
 80052f8:	b007      	add	sp, #28
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005302:	2a0d      	cmp	r2, #13
 8005304:	d8e6      	bhi.n	80052d4 <_scanf_float+0x60>
 8005306:	a101      	add	r1, pc, #4	; (adr r1, 800530c <_scanf_float+0x98>)
 8005308:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800530c:	0800544b 	.word	0x0800544b
 8005310:	080052d5 	.word	0x080052d5
 8005314:	080052d5 	.word	0x080052d5
 8005318:	080052d5 	.word	0x080052d5
 800531c:	080054ab 	.word	0x080054ab
 8005320:	08005483 	.word	0x08005483
 8005324:	080052d5 	.word	0x080052d5
 8005328:	080052d5 	.word	0x080052d5
 800532c:	08005459 	.word	0x08005459
 8005330:	080052d5 	.word	0x080052d5
 8005334:	080052d5 	.word	0x080052d5
 8005338:	080052d5 	.word	0x080052d5
 800533c:	080052d5 	.word	0x080052d5
 8005340:	08005411 	.word	0x08005411
 8005344:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005348:	e7db      	b.n	8005302 <_scanf_float+0x8e>
 800534a:	290e      	cmp	r1, #14
 800534c:	d8c2      	bhi.n	80052d4 <_scanf_float+0x60>
 800534e:	a001      	add	r0, pc, #4	; (adr r0, 8005354 <_scanf_float+0xe0>)
 8005350:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005354:	08005403 	.word	0x08005403
 8005358:	080052d5 	.word	0x080052d5
 800535c:	08005403 	.word	0x08005403
 8005360:	08005497 	.word	0x08005497
 8005364:	080052d5 	.word	0x080052d5
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053ed 	.word	0x080053ed
 8005370:	080053ed 	.word	0x080053ed
 8005374:	080053ed 	.word	0x080053ed
 8005378:	080053ed 	.word	0x080053ed
 800537c:	080053ed 	.word	0x080053ed
 8005380:	080053ed 	.word	0x080053ed
 8005384:	080053ed 	.word	0x080053ed
 8005388:	080053ed 	.word	0x080053ed
 800538c:	080053ed 	.word	0x080053ed
 8005390:	2b6e      	cmp	r3, #110	; 0x6e
 8005392:	d809      	bhi.n	80053a8 <_scanf_float+0x134>
 8005394:	2b60      	cmp	r3, #96	; 0x60
 8005396:	d8b2      	bhi.n	80052fe <_scanf_float+0x8a>
 8005398:	2b54      	cmp	r3, #84	; 0x54
 800539a:	d077      	beq.n	800548c <_scanf_float+0x218>
 800539c:	2b59      	cmp	r3, #89	; 0x59
 800539e:	d199      	bne.n	80052d4 <_scanf_float+0x60>
 80053a0:	2d07      	cmp	r5, #7
 80053a2:	d197      	bne.n	80052d4 <_scanf_float+0x60>
 80053a4:	2508      	movs	r5, #8
 80053a6:	e029      	b.n	80053fc <_scanf_float+0x188>
 80053a8:	2b74      	cmp	r3, #116	; 0x74
 80053aa:	d06f      	beq.n	800548c <_scanf_float+0x218>
 80053ac:	2b79      	cmp	r3, #121	; 0x79
 80053ae:	e7f6      	b.n	800539e <_scanf_float+0x12a>
 80053b0:	6821      	ldr	r1, [r4, #0]
 80053b2:	05c8      	lsls	r0, r1, #23
 80053b4:	d51a      	bpl.n	80053ec <_scanf_float+0x178>
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80053bc:	6021      	str	r1, [r4, #0]
 80053be:	f109 0901 	add.w	r9, r9, #1
 80053c2:	b11b      	cbz	r3, 80053cc <_scanf_float+0x158>
 80053c4:	3b01      	subs	r3, #1
 80053c6:	3201      	adds	r2, #1
 80053c8:	9302      	str	r3, [sp, #8]
 80053ca:	60a2      	str	r2, [r4, #8]
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60a3      	str	r3, [r4, #8]
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	3301      	adds	r3, #1
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	f340 8084 	ble.w	80054ec <_scanf_float+0x278>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	e766      	b.n	80052ba <_scanf_float+0x46>
 80053ec:	eb1a 0f05 	cmn.w	sl, r5
 80053f0:	f47f af70 	bne.w	80052d4 <_scanf_float+0x60>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	f806 3b01 	strb.w	r3, [r6], #1
 8005400:	e7e4      	b.n	80053cc <_scanf_float+0x158>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	0610      	lsls	r0, r2, #24
 8005406:	f57f af65 	bpl.w	80052d4 <_scanf_float+0x60>
 800540a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800540e:	e7f4      	b.n	80053fa <_scanf_float+0x186>
 8005410:	f1ba 0f00 	cmp.w	sl, #0
 8005414:	d10e      	bne.n	8005434 <_scanf_float+0x1c0>
 8005416:	f1b9 0f00 	cmp.w	r9, #0
 800541a:	d10e      	bne.n	800543a <_scanf_float+0x1c6>
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005422:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005426:	d108      	bne.n	800543a <_scanf_float+0x1c6>
 8005428:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	f04f 0a01 	mov.w	sl, #1
 8005432:	e7e3      	b.n	80053fc <_scanf_float+0x188>
 8005434:	f1ba 0f02 	cmp.w	sl, #2
 8005438:	d055      	beq.n	80054e6 <_scanf_float+0x272>
 800543a:	2d01      	cmp	r5, #1
 800543c:	d002      	beq.n	8005444 <_scanf_float+0x1d0>
 800543e:	2d04      	cmp	r5, #4
 8005440:	f47f af48 	bne.w	80052d4 <_scanf_float+0x60>
 8005444:	3501      	adds	r5, #1
 8005446:	b2ed      	uxtb	r5, r5
 8005448:	e7d8      	b.n	80053fc <_scanf_float+0x188>
 800544a:	f1ba 0f01 	cmp.w	sl, #1
 800544e:	f47f af41 	bne.w	80052d4 <_scanf_float+0x60>
 8005452:	f04f 0a02 	mov.w	sl, #2
 8005456:	e7d1      	b.n	80053fc <_scanf_float+0x188>
 8005458:	b97d      	cbnz	r5, 800547a <_scanf_float+0x206>
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	f47f af3c 	bne.w	80052da <_scanf_float+0x66>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005468:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800546c:	f47f af39 	bne.w	80052e2 <_scanf_float+0x6e>
 8005470:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005474:	6022      	str	r2, [r4, #0]
 8005476:	2501      	movs	r5, #1
 8005478:	e7c0      	b.n	80053fc <_scanf_float+0x188>
 800547a:	2d03      	cmp	r5, #3
 800547c:	d0e2      	beq.n	8005444 <_scanf_float+0x1d0>
 800547e:	2d05      	cmp	r5, #5
 8005480:	e7de      	b.n	8005440 <_scanf_float+0x1cc>
 8005482:	2d02      	cmp	r5, #2
 8005484:	f47f af26 	bne.w	80052d4 <_scanf_float+0x60>
 8005488:	2503      	movs	r5, #3
 800548a:	e7b7      	b.n	80053fc <_scanf_float+0x188>
 800548c:	2d06      	cmp	r5, #6
 800548e:	f47f af21 	bne.w	80052d4 <_scanf_float+0x60>
 8005492:	2507      	movs	r5, #7
 8005494:	e7b2      	b.n	80053fc <_scanf_float+0x188>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	0591      	lsls	r1, r2, #22
 800549a:	f57f af1b 	bpl.w	80052d4 <_scanf_float+0x60>
 800549e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80054a8:	e7a8      	b.n	80053fc <_scanf_float+0x188>
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80054b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80054b4:	d006      	beq.n	80054c4 <_scanf_float+0x250>
 80054b6:	0550      	lsls	r0, r2, #21
 80054b8:	f57f af0c 	bpl.w	80052d4 <_scanf_float+0x60>
 80054bc:	f1b9 0f00 	cmp.w	r9, #0
 80054c0:	f43f af0f 	beq.w	80052e2 <_scanf_float+0x6e>
 80054c4:	0591      	lsls	r1, r2, #22
 80054c6:	bf58      	it	pl
 80054c8:	9901      	ldrpl	r1, [sp, #4]
 80054ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054ce:	bf58      	it	pl
 80054d0:	eba9 0101 	subpl.w	r1, r9, r1
 80054d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80054d8:	bf58      	it	pl
 80054da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	f04f 0900 	mov.w	r9, #0
 80054e4:	e78a      	b.n	80053fc <_scanf_float+0x188>
 80054e6:	f04f 0a03 	mov.w	sl, #3
 80054ea:	e787      	b.n	80053fc <_scanf_float+0x188>
 80054ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054f0:	4639      	mov	r1, r7
 80054f2:	4640      	mov	r0, r8
 80054f4:	4798      	blx	r3
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f43f aedf 	beq.w	80052ba <_scanf_float+0x46>
 80054fc:	e6ea      	b.n	80052d4 <_scanf_float+0x60>
 80054fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005506:	463a      	mov	r2, r7
 8005508:	4640      	mov	r0, r8
 800550a:	4798      	blx	r3
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	3b01      	subs	r3, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	e6ec      	b.n	80052ee <_scanf_float+0x7a>
 8005514:	1e6b      	subs	r3, r5, #1
 8005516:	2b06      	cmp	r3, #6
 8005518:	d825      	bhi.n	8005566 <_scanf_float+0x2f2>
 800551a:	2d02      	cmp	r5, #2
 800551c:	d836      	bhi.n	800558c <_scanf_float+0x318>
 800551e:	455e      	cmp	r6, fp
 8005520:	f67f aee8 	bls.w	80052f4 <_scanf_float+0x80>
 8005524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005528:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800552c:	463a      	mov	r2, r7
 800552e:	4640      	mov	r0, r8
 8005530:	4798      	blx	r3
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	3b01      	subs	r3, #1
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	e7f1      	b.n	800551e <_scanf_float+0x2aa>
 800553a:	9802      	ldr	r0, [sp, #8]
 800553c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005540:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005544:	9002      	str	r0, [sp, #8]
 8005546:	463a      	mov	r2, r7
 8005548:	4640      	mov	r0, r8
 800554a:	4798      	blx	r3
 800554c:	6923      	ldr	r3, [r4, #16]
 800554e:	3b01      	subs	r3, #1
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005556:	fa5f fa8a 	uxtb.w	sl, sl
 800555a:	f1ba 0f02 	cmp.w	sl, #2
 800555e:	d1ec      	bne.n	800553a <_scanf_float+0x2c6>
 8005560:	3d03      	subs	r5, #3
 8005562:	b2ed      	uxtb	r5, r5
 8005564:	1b76      	subs	r6, r6, r5
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	05da      	lsls	r2, r3, #23
 800556a:	d52f      	bpl.n	80055cc <_scanf_float+0x358>
 800556c:	055b      	lsls	r3, r3, #21
 800556e:	d510      	bpl.n	8005592 <_scanf_float+0x31e>
 8005570:	455e      	cmp	r6, fp
 8005572:	f67f aebf 	bls.w	80052f4 <_scanf_float+0x80>
 8005576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800557a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800557e:	463a      	mov	r2, r7
 8005580:	4640      	mov	r0, r8
 8005582:	4798      	blx	r3
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	3b01      	subs	r3, #1
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	e7f1      	b.n	8005570 <_scanf_float+0x2fc>
 800558c:	46aa      	mov	sl, r5
 800558e:	9602      	str	r6, [sp, #8]
 8005590:	e7df      	b.n	8005552 <_scanf_float+0x2de>
 8005592:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	2965      	cmp	r1, #101	; 0x65
 800559a:	f103 33ff 	add.w	r3, r3, #4294967295
 800559e:	f106 35ff 	add.w	r5, r6, #4294967295
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	d00c      	beq.n	80055c0 <_scanf_float+0x34c>
 80055a6:	2945      	cmp	r1, #69	; 0x45
 80055a8:	d00a      	beq.n	80055c0 <_scanf_float+0x34c>
 80055aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055ae:	463a      	mov	r2, r7
 80055b0:	4640      	mov	r0, r8
 80055b2:	4798      	blx	r3
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	1eb5      	subs	r5, r6, #2
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055c4:	463a      	mov	r2, r7
 80055c6:	4640      	mov	r0, r8
 80055c8:	4798      	blx	r3
 80055ca:	462e      	mov	r6, r5
 80055cc:	6825      	ldr	r5, [r4, #0]
 80055ce:	f015 0510 	ands.w	r5, r5, #16
 80055d2:	d159      	bne.n	8005688 <_scanf_float+0x414>
 80055d4:	7035      	strb	r5, [r6, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d11b      	bne.n	800561a <_scanf_float+0x3a6>
 80055e2:	9b01      	ldr	r3, [sp, #4]
 80055e4:	454b      	cmp	r3, r9
 80055e6:	eba3 0209 	sub.w	r2, r3, r9
 80055ea:	d123      	bne.n	8005634 <_scanf_float+0x3c0>
 80055ec:	2200      	movs	r2, #0
 80055ee:	4659      	mov	r1, fp
 80055f0:	4640      	mov	r0, r8
 80055f2:	f000 fe97 	bl	8006324 <_strtod_r>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	f012 0f02 	tst.w	r2, #2
 80055fe:	ec57 6b10 	vmov	r6, r7, d0
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	d021      	beq.n	800564a <_scanf_float+0x3d6>
 8005606:	9903      	ldr	r1, [sp, #12]
 8005608:	1d1a      	adds	r2, r3, #4
 800560a:	600a      	str	r2, [r1, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	e9c3 6700 	strd	r6, r7, [r3]
 8005612:	68e3      	ldr	r3, [r4, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60e3      	str	r3, [r4, #12]
 8005618:	e66d      	b.n	80052f6 <_scanf_float+0x82>
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0e5      	beq.n	80055ec <_scanf_float+0x378>
 8005620:	9905      	ldr	r1, [sp, #20]
 8005622:	230a      	movs	r3, #10
 8005624:	462a      	mov	r2, r5
 8005626:	3101      	adds	r1, #1
 8005628:	4640      	mov	r0, r8
 800562a:	f000 ff03 	bl	8006434 <_strtol_r>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	9e05      	ldr	r6, [sp, #20]
 8005632:	1ac2      	subs	r2, r0, r3
 8005634:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005638:	429e      	cmp	r6, r3
 800563a:	bf28      	it	cs
 800563c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005640:	4912      	ldr	r1, [pc, #72]	; (800568c <_scanf_float+0x418>)
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f82c 	bl	80056a0 <siprintf>
 8005648:	e7d0      	b.n	80055ec <_scanf_float+0x378>
 800564a:	9903      	ldr	r1, [sp, #12]
 800564c:	f012 0f04 	tst.w	r2, #4
 8005650:	f103 0204 	add.w	r2, r3, #4
 8005654:	600a      	str	r2, [r1, #0]
 8005656:	d1d9      	bne.n	800560c <_scanf_float+0x398>
 8005658:	f8d3 8000 	ldr.w	r8, [r3]
 800565c:	ee10 2a10 	vmov	r2, s0
 8005660:	ee10 0a10 	vmov	r0, s0
 8005664:	463b      	mov	r3, r7
 8005666:	4639      	mov	r1, r7
 8005668:	f7fb fa60 	bl	8000b2c <__aeabi_dcmpun>
 800566c:	b128      	cbz	r0, 800567a <_scanf_float+0x406>
 800566e:	4808      	ldr	r0, [pc, #32]	; (8005690 <_scanf_float+0x41c>)
 8005670:	f000 f810 	bl	8005694 <nanf>
 8005674:	ed88 0a00 	vstr	s0, [r8]
 8005678:	e7cb      	b.n	8005612 <_scanf_float+0x39e>
 800567a:	4630      	mov	r0, r6
 800567c:	4639      	mov	r1, r7
 800567e:	f7fb fab3 	bl	8000be8 <__aeabi_d2f>
 8005682:	f8c8 0000 	str.w	r0, [r8]
 8005686:	e7c4      	b.n	8005612 <_scanf_float+0x39e>
 8005688:	2500      	movs	r5, #0
 800568a:	e634      	b.n	80052f6 <_scanf_float+0x82>
 800568c:	08009a20 	.word	0x08009a20
 8005690:	08009e28 	.word	0x08009e28

08005694 <nanf>:
 8005694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800569c <nanf+0x8>
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	7fc00000 	.word	0x7fc00000

080056a0 <siprintf>:
 80056a0:	b40e      	push	{r1, r2, r3}
 80056a2:	b500      	push	{lr}
 80056a4:	b09c      	sub	sp, #112	; 0x70
 80056a6:	ab1d      	add	r3, sp, #116	; 0x74
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	9006      	str	r0, [sp, #24]
 80056ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056b0:	4809      	ldr	r0, [pc, #36]	; (80056d8 <siprintf+0x38>)
 80056b2:	9107      	str	r1, [sp, #28]
 80056b4:	9104      	str	r1, [sp, #16]
 80056b6:	4909      	ldr	r1, [pc, #36]	; (80056dc <siprintf+0x3c>)
 80056b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056bc:	9105      	str	r1, [sp, #20]
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	f002 fef4 	bl	80084b0 <_svfiprintf_r>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	b01c      	add	sp, #112	; 0x70
 80056d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d4:	b003      	add	sp, #12
 80056d6:	4770      	bx	lr
 80056d8:	20000250 	.word	0x20000250
 80056dc:	ffff0208 	.word	0xffff0208

080056e0 <sulp>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	ec45 4b10 	vmov	d0, r4, r5
 80056ea:	4616      	mov	r6, r2
 80056ec:	f002 fc3e 	bl	8007f6c <__ulp>
 80056f0:	ec51 0b10 	vmov	r0, r1, d0
 80056f4:	b17e      	cbz	r6, 8005716 <sulp+0x36>
 80056f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80056fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd09      	ble.n	8005716 <sulp+0x36>
 8005702:	051b      	lsls	r3, r3, #20
 8005704:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005708:	2400      	movs	r4, #0
 800570a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	f7fa ff71 	bl	80005f8 <__aeabi_dmul>
 8005716:	bd70      	pop	{r4, r5, r6, pc}

08005718 <_strtod_l>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	ed2d 8b02 	vpush	{d8}
 8005720:	b09d      	sub	sp, #116	; 0x74
 8005722:	461f      	mov	r7, r3
 8005724:	2300      	movs	r3, #0
 8005726:	9318      	str	r3, [sp, #96]	; 0x60
 8005728:	4ba2      	ldr	r3, [pc, #648]	; (80059b4 <_strtod_l+0x29c>)
 800572a:	9213      	str	r2, [sp, #76]	; 0x4c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	4604      	mov	r4, r0
 8005732:	4618      	mov	r0, r3
 8005734:	4688      	mov	r8, r1
 8005736:	f7fa fd4b 	bl	80001d0 <strlen>
 800573a:	f04f 0a00 	mov.w	sl, #0
 800573e:	4605      	mov	r5, r0
 8005740:	f04f 0b00 	mov.w	fp, #0
 8005744:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	2a2b      	cmp	r2, #43	; 0x2b
 800574e:	d04e      	beq.n	80057ee <_strtod_l+0xd6>
 8005750:	d83b      	bhi.n	80057ca <_strtod_l+0xb2>
 8005752:	2a0d      	cmp	r2, #13
 8005754:	d834      	bhi.n	80057c0 <_strtod_l+0xa8>
 8005756:	2a08      	cmp	r2, #8
 8005758:	d834      	bhi.n	80057c4 <_strtod_l+0xac>
 800575a:	2a00      	cmp	r2, #0
 800575c:	d03e      	beq.n	80057dc <_strtod_l+0xc4>
 800575e:	2300      	movs	r3, #0
 8005760:	930a      	str	r3, [sp, #40]	; 0x28
 8005762:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005764:	7833      	ldrb	r3, [r6, #0]
 8005766:	2b30      	cmp	r3, #48	; 0x30
 8005768:	f040 80b0 	bne.w	80058cc <_strtod_l+0x1b4>
 800576c:	7873      	ldrb	r3, [r6, #1]
 800576e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005772:	2b58      	cmp	r3, #88	; 0x58
 8005774:	d168      	bne.n	8005848 <_strtod_l+0x130>
 8005776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	ab18      	add	r3, sp, #96	; 0x60
 800577c:	9702      	str	r7, [sp, #8]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4a8d      	ldr	r2, [pc, #564]	; (80059b8 <_strtod_l+0x2a0>)
 8005782:	ab19      	add	r3, sp, #100	; 0x64
 8005784:	a917      	add	r1, sp, #92	; 0x5c
 8005786:	4620      	mov	r0, r4
 8005788:	f001 fd58 	bl	800723c <__gethex>
 800578c:	f010 0707 	ands.w	r7, r0, #7
 8005790:	4605      	mov	r5, r0
 8005792:	d005      	beq.n	80057a0 <_strtod_l+0x88>
 8005794:	2f06      	cmp	r7, #6
 8005796:	d12c      	bne.n	80057f2 <_strtod_l+0xda>
 8005798:	3601      	adds	r6, #1
 800579a:	2300      	movs	r3, #0
 800579c:	9617      	str	r6, [sp, #92]	; 0x5c
 800579e:	930a      	str	r3, [sp, #40]	; 0x28
 80057a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 8590 	bne.w	80062c8 <_strtod_l+0xbb0>
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	b1eb      	cbz	r3, 80057e8 <_strtod_l+0xd0>
 80057ac:	4652      	mov	r2, sl
 80057ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057b2:	ec43 2b10 	vmov	d0, r2, r3
 80057b6:	b01d      	add	sp, #116	; 0x74
 80057b8:	ecbd 8b02 	vpop	{d8}
 80057bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c0:	2a20      	cmp	r2, #32
 80057c2:	d1cc      	bne.n	800575e <_strtod_l+0x46>
 80057c4:	3301      	adds	r3, #1
 80057c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80057c8:	e7be      	b.n	8005748 <_strtod_l+0x30>
 80057ca:	2a2d      	cmp	r2, #45	; 0x2d
 80057cc:	d1c7      	bne.n	800575e <_strtod_l+0x46>
 80057ce:	2201      	movs	r2, #1
 80057d0:	920a      	str	r2, [sp, #40]	; 0x28
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1c2      	bne.n	8005762 <_strtod_l+0x4a>
 80057dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 856e 	bne.w	80062c4 <_strtod_l+0xbac>
 80057e8:	4652      	mov	r2, sl
 80057ea:	465b      	mov	r3, fp
 80057ec:	e7e1      	b.n	80057b2 <_strtod_l+0x9a>
 80057ee:	2200      	movs	r2, #0
 80057f0:	e7ee      	b.n	80057d0 <_strtod_l+0xb8>
 80057f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80057f4:	b13a      	cbz	r2, 8005806 <_strtod_l+0xee>
 80057f6:	2135      	movs	r1, #53	; 0x35
 80057f8:	a81a      	add	r0, sp, #104	; 0x68
 80057fa:	f002 fcc2 	bl	8008182 <__copybits>
 80057fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005800:	4620      	mov	r0, r4
 8005802:	f002 f881 	bl	8007908 <_Bfree>
 8005806:	3f01      	subs	r7, #1
 8005808:	2f04      	cmp	r7, #4
 800580a:	d806      	bhi.n	800581a <_strtod_l+0x102>
 800580c:	e8df f007 	tbb	[pc, r7]
 8005810:	1714030a 	.word	0x1714030a
 8005814:	0a          	.byte	0x0a
 8005815:	00          	.byte	0x00
 8005816:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800581a:	0728      	lsls	r0, r5, #28
 800581c:	d5c0      	bpl.n	80057a0 <_strtod_l+0x88>
 800581e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005822:	e7bd      	b.n	80057a0 <_strtod_l+0x88>
 8005824:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005828:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800582a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800582e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005832:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005836:	e7f0      	b.n	800581a <_strtod_l+0x102>
 8005838:	f8df b180 	ldr.w	fp, [pc, #384]	; 80059bc <_strtod_l+0x2a4>
 800583c:	e7ed      	b.n	800581a <_strtod_l+0x102>
 800583e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005842:	f04f 3aff 	mov.w	sl, #4294967295
 8005846:	e7e8      	b.n	800581a <_strtod_l+0x102>
 8005848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	9217      	str	r2, [sp, #92]	; 0x5c
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d0f9      	beq.n	8005848 <_strtod_l+0x130>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0a3      	beq.n	80057a0 <_strtod_l+0x88>
 8005858:	2301      	movs	r3, #1
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	f8cd 901c 	str.w	r9, [sp, #28]
 8005868:	464f      	mov	r7, r9
 800586a:	220a      	movs	r2, #10
 800586c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800586e:	7806      	ldrb	r6, [r0, #0]
 8005870:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005874:	b2d9      	uxtb	r1, r3
 8005876:	2909      	cmp	r1, #9
 8005878:	d92a      	bls.n	80058d0 <_strtod_l+0x1b8>
 800587a:	9905      	ldr	r1, [sp, #20]
 800587c:	462a      	mov	r2, r5
 800587e:	f002 ff2f 	bl	80086e0 <strncmp>
 8005882:	b398      	cbz	r0, 80058ec <_strtod_l+0x1d4>
 8005884:	2000      	movs	r0, #0
 8005886:	4632      	mov	r2, r6
 8005888:	463d      	mov	r5, r7
 800588a:	9005      	str	r0, [sp, #20]
 800588c:	4603      	mov	r3, r0
 800588e:	2a65      	cmp	r2, #101	; 0x65
 8005890:	d001      	beq.n	8005896 <_strtod_l+0x17e>
 8005892:	2a45      	cmp	r2, #69	; 0x45
 8005894:	d118      	bne.n	80058c8 <_strtod_l+0x1b0>
 8005896:	b91d      	cbnz	r5, 80058a0 <_strtod_l+0x188>
 8005898:	9a04      	ldr	r2, [sp, #16]
 800589a:	4302      	orrs	r2, r0
 800589c:	d09e      	beq.n	80057dc <_strtod_l+0xc4>
 800589e:	2500      	movs	r5, #0
 80058a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80058a4:	f108 0201 	add.w	r2, r8, #1
 80058a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80058aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80058ae:	2a2b      	cmp	r2, #43	; 0x2b
 80058b0:	d075      	beq.n	800599e <_strtod_l+0x286>
 80058b2:	2a2d      	cmp	r2, #45	; 0x2d
 80058b4:	d07b      	beq.n	80059ae <_strtod_l+0x296>
 80058b6:	f04f 0c00 	mov.w	ip, #0
 80058ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80058be:	2909      	cmp	r1, #9
 80058c0:	f240 8082 	bls.w	80059c8 <_strtod_l+0x2b0>
 80058c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80058c8:	2600      	movs	r6, #0
 80058ca:	e09d      	b.n	8005a08 <_strtod_l+0x2f0>
 80058cc:	2300      	movs	r3, #0
 80058ce:	e7c4      	b.n	800585a <_strtod_l+0x142>
 80058d0:	2f08      	cmp	r7, #8
 80058d2:	bfd8      	it	le
 80058d4:	9907      	ldrle	r1, [sp, #28]
 80058d6:	f100 0001 	add.w	r0, r0, #1
 80058da:	bfda      	itte	le
 80058dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80058e0:	9307      	strle	r3, [sp, #28]
 80058e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80058e6:	3701      	adds	r7, #1
 80058e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80058ea:	e7bf      	b.n	800586c <_strtod_l+0x154>
 80058ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ee:	195a      	adds	r2, r3, r5
 80058f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80058f2:	5d5a      	ldrb	r2, [r3, r5]
 80058f4:	2f00      	cmp	r7, #0
 80058f6:	d037      	beq.n	8005968 <_strtod_l+0x250>
 80058f8:	9005      	str	r0, [sp, #20]
 80058fa:	463d      	mov	r5, r7
 80058fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005900:	2b09      	cmp	r3, #9
 8005902:	d912      	bls.n	800592a <_strtod_l+0x212>
 8005904:	2301      	movs	r3, #1
 8005906:	e7c2      	b.n	800588e <_strtod_l+0x176>
 8005908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	9217      	str	r2, [sp, #92]	; 0x5c
 800590e:	785a      	ldrb	r2, [r3, #1]
 8005910:	3001      	adds	r0, #1
 8005912:	2a30      	cmp	r2, #48	; 0x30
 8005914:	d0f8      	beq.n	8005908 <_strtod_l+0x1f0>
 8005916:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800591a:	2b08      	cmp	r3, #8
 800591c:	f200 84d9 	bhi.w	80062d2 <_strtod_l+0xbba>
 8005920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005922:	9005      	str	r0, [sp, #20]
 8005924:	2000      	movs	r0, #0
 8005926:	9308      	str	r3, [sp, #32]
 8005928:	4605      	mov	r5, r0
 800592a:	3a30      	subs	r2, #48	; 0x30
 800592c:	f100 0301 	add.w	r3, r0, #1
 8005930:	d014      	beq.n	800595c <_strtod_l+0x244>
 8005932:	9905      	ldr	r1, [sp, #20]
 8005934:	4419      	add	r1, r3
 8005936:	9105      	str	r1, [sp, #20]
 8005938:	462b      	mov	r3, r5
 800593a:	eb00 0e05 	add.w	lr, r0, r5
 800593e:	210a      	movs	r1, #10
 8005940:	4573      	cmp	r3, lr
 8005942:	d113      	bne.n	800596c <_strtod_l+0x254>
 8005944:	182b      	adds	r3, r5, r0
 8005946:	2b08      	cmp	r3, #8
 8005948:	f105 0501 	add.w	r5, r5, #1
 800594c:	4405      	add	r5, r0
 800594e:	dc1c      	bgt.n	800598a <_strtod_l+0x272>
 8005950:	9907      	ldr	r1, [sp, #28]
 8005952:	230a      	movs	r3, #10
 8005954:	fb03 2301 	mla	r3, r3, r1, r2
 8005958:	9307      	str	r3, [sp, #28]
 800595a:	2300      	movs	r3, #0
 800595c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800595e:	1c51      	adds	r1, r2, #1
 8005960:	9117      	str	r1, [sp, #92]	; 0x5c
 8005962:	7852      	ldrb	r2, [r2, #1]
 8005964:	4618      	mov	r0, r3
 8005966:	e7c9      	b.n	80058fc <_strtod_l+0x1e4>
 8005968:	4638      	mov	r0, r7
 800596a:	e7d2      	b.n	8005912 <_strtod_l+0x1fa>
 800596c:	2b08      	cmp	r3, #8
 800596e:	dc04      	bgt.n	800597a <_strtod_l+0x262>
 8005970:	9e07      	ldr	r6, [sp, #28]
 8005972:	434e      	muls	r6, r1
 8005974:	9607      	str	r6, [sp, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	e7e2      	b.n	8005940 <_strtod_l+0x228>
 800597a:	f103 0c01 	add.w	ip, r3, #1
 800597e:	f1bc 0f10 	cmp.w	ip, #16
 8005982:	bfd8      	it	le
 8005984:	fb01 f909 	mulle.w	r9, r1, r9
 8005988:	e7f5      	b.n	8005976 <_strtod_l+0x25e>
 800598a:	2d10      	cmp	r5, #16
 800598c:	bfdc      	itt	le
 800598e:	230a      	movle	r3, #10
 8005990:	fb03 2909 	mlale	r9, r3, r9, r2
 8005994:	e7e1      	b.n	800595a <_strtod_l+0x242>
 8005996:	2300      	movs	r3, #0
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	2301      	movs	r3, #1
 800599c:	e77c      	b.n	8005898 <_strtod_l+0x180>
 800599e:	f04f 0c00 	mov.w	ip, #0
 80059a2:	f108 0202 	add.w	r2, r8, #2
 80059a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80059a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80059ac:	e785      	b.n	80058ba <_strtod_l+0x1a2>
 80059ae:	f04f 0c01 	mov.w	ip, #1
 80059b2:	e7f6      	b.n	80059a2 <_strtod_l+0x28a>
 80059b4:	08009c70 	.word	0x08009c70
 80059b8:	08009a28 	.word	0x08009a28
 80059bc:	7ff00000 	.word	0x7ff00000
 80059c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059c2:	1c51      	adds	r1, r2, #1
 80059c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80059c6:	7852      	ldrb	r2, [r2, #1]
 80059c8:	2a30      	cmp	r2, #48	; 0x30
 80059ca:	d0f9      	beq.n	80059c0 <_strtod_l+0x2a8>
 80059cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80059d0:	2908      	cmp	r1, #8
 80059d2:	f63f af79 	bhi.w	80058c8 <_strtod_l+0x1b0>
 80059d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80059da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059dc:	9206      	str	r2, [sp, #24]
 80059de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059e0:	1c51      	adds	r1, r2, #1
 80059e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80059e4:	7852      	ldrb	r2, [r2, #1]
 80059e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80059ea:	2e09      	cmp	r6, #9
 80059ec:	d937      	bls.n	8005a5e <_strtod_l+0x346>
 80059ee:	9e06      	ldr	r6, [sp, #24]
 80059f0:	1b89      	subs	r1, r1, r6
 80059f2:	2908      	cmp	r1, #8
 80059f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80059f8:	dc02      	bgt.n	8005a00 <_strtod_l+0x2e8>
 80059fa:	4576      	cmp	r6, lr
 80059fc:	bfa8      	it	ge
 80059fe:	4676      	movge	r6, lr
 8005a00:	f1bc 0f00 	cmp.w	ip, #0
 8005a04:	d000      	beq.n	8005a08 <_strtod_l+0x2f0>
 8005a06:	4276      	negs	r6, r6
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d14d      	bne.n	8005aa8 <_strtod_l+0x390>
 8005a0c:	9904      	ldr	r1, [sp, #16]
 8005a0e:	4301      	orrs	r1, r0
 8005a10:	f47f aec6 	bne.w	80057a0 <_strtod_l+0x88>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f47f aee1 	bne.w	80057dc <_strtod_l+0xc4>
 8005a1a:	2a69      	cmp	r2, #105	; 0x69
 8005a1c:	d027      	beq.n	8005a6e <_strtod_l+0x356>
 8005a1e:	dc24      	bgt.n	8005a6a <_strtod_l+0x352>
 8005a20:	2a49      	cmp	r2, #73	; 0x49
 8005a22:	d024      	beq.n	8005a6e <_strtod_l+0x356>
 8005a24:	2a4e      	cmp	r2, #78	; 0x4e
 8005a26:	f47f aed9 	bne.w	80057dc <_strtod_l+0xc4>
 8005a2a:	499f      	ldr	r1, [pc, #636]	; (8005ca8 <_strtod_l+0x590>)
 8005a2c:	a817      	add	r0, sp, #92	; 0x5c
 8005a2e:	f001 fe5d 	bl	80076ec <__match>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f43f aed2 	beq.w	80057dc <_strtod_l+0xc4>
 8005a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b28      	cmp	r3, #40	; 0x28
 8005a3e:	d12d      	bne.n	8005a9c <_strtod_l+0x384>
 8005a40:	499a      	ldr	r1, [pc, #616]	; (8005cac <_strtod_l+0x594>)
 8005a42:	aa1a      	add	r2, sp, #104	; 0x68
 8005a44:	a817      	add	r0, sp, #92	; 0x5c
 8005a46:	f001 fe65 	bl	8007714 <__hexnan>
 8005a4a:	2805      	cmp	r0, #5
 8005a4c:	d126      	bne.n	8005a9c <_strtod_l+0x384>
 8005a4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005a54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a5c:	e6a0      	b.n	80057a0 <_strtod_l+0x88>
 8005a5e:	210a      	movs	r1, #10
 8005a60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005a64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a68:	e7b9      	b.n	80059de <_strtod_l+0x2c6>
 8005a6a:	2a6e      	cmp	r2, #110	; 0x6e
 8005a6c:	e7db      	b.n	8005a26 <_strtod_l+0x30e>
 8005a6e:	4990      	ldr	r1, [pc, #576]	; (8005cb0 <_strtod_l+0x598>)
 8005a70:	a817      	add	r0, sp, #92	; 0x5c
 8005a72:	f001 fe3b 	bl	80076ec <__match>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f43f aeb0 	beq.w	80057dc <_strtod_l+0xc4>
 8005a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a7e:	498d      	ldr	r1, [pc, #564]	; (8005cb4 <_strtod_l+0x59c>)
 8005a80:	3b01      	subs	r3, #1
 8005a82:	a817      	add	r0, sp, #92	; 0x5c
 8005a84:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a86:	f001 fe31 	bl	80076ec <__match>
 8005a8a:	b910      	cbnz	r0, 8005a92 <_strtod_l+0x37a>
 8005a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a8e:	3301      	adds	r3, #1
 8005a90:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a92:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005cc4 <_strtod_l+0x5ac>
 8005a96:	f04f 0a00 	mov.w	sl, #0
 8005a9a:	e681      	b.n	80057a0 <_strtod_l+0x88>
 8005a9c:	4886      	ldr	r0, [pc, #536]	; (8005cb8 <_strtod_l+0x5a0>)
 8005a9e:	f002 fe07 	bl	80086b0 <nan>
 8005aa2:	ec5b ab10 	vmov	sl, fp, d0
 8005aa6:	e67b      	b.n	80057a0 <_strtod_l+0x88>
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	9807      	ldr	r0, [sp, #28]
 8005aac:	1af3      	subs	r3, r6, r3
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	bf08      	it	eq
 8005ab2:	462f      	moveq	r7, r5
 8005ab4:	2d10      	cmp	r5, #16
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	46a8      	mov	r8, r5
 8005aba:	bfa8      	it	ge
 8005abc:	f04f 0810 	movge.w	r8, #16
 8005ac0:	f7fa fd20 	bl	8000504 <__aeabi_ui2d>
 8005ac4:	2d09      	cmp	r5, #9
 8005ac6:	4682      	mov	sl, r0
 8005ac8:	468b      	mov	fp, r1
 8005aca:	dd13      	ble.n	8005af4 <_strtod_l+0x3dc>
 8005acc:	4b7b      	ldr	r3, [pc, #492]	; (8005cbc <_strtod_l+0x5a4>)
 8005ace:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ad2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005ad6:	f7fa fd8f 	bl	80005f8 <__aeabi_dmul>
 8005ada:	4682      	mov	sl, r0
 8005adc:	4648      	mov	r0, r9
 8005ade:	468b      	mov	fp, r1
 8005ae0:	f7fa fd10 	bl	8000504 <__aeabi_ui2d>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4650      	mov	r0, sl
 8005aea:	4659      	mov	r1, fp
 8005aec:	f7fa fbce 	bl	800028c <__adddf3>
 8005af0:	4682      	mov	sl, r0
 8005af2:	468b      	mov	fp, r1
 8005af4:	2d0f      	cmp	r5, #15
 8005af6:	dc38      	bgt.n	8005b6a <_strtod_l+0x452>
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f43f ae50 	beq.w	80057a0 <_strtod_l+0x88>
 8005b00:	dd24      	ble.n	8005b4c <_strtod_l+0x434>
 8005b02:	2b16      	cmp	r3, #22
 8005b04:	dc0b      	bgt.n	8005b1e <_strtod_l+0x406>
 8005b06:	496d      	ldr	r1, [pc, #436]	; (8005cbc <_strtod_l+0x5a4>)
 8005b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b10:	4652      	mov	r2, sl
 8005b12:	465b      	mov	r3, fp
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4682      	mov	sl, r0
 8005b1a:	468b      	mov	fp, r1
 8005b1c:	e640      	b.n	80057a0 <_strtod_l+0x88>
 8005b1e:	9a06      	ldr	r2, [sp, #24]
 8005b20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005b24:	4293      	cmp	r3, r2
 8005b26:	db20      	blt.n	8005b6a <_strtod_l+0x452>
 8005b28:	4c64      	ldr	r4, [pc, #400]	; (8005cbc <_strtod_l+0x5a4>)
 8005b2a:	f1c5 050f 	rsb	r5, r5, #15
 8005b2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b32:	4652      	mov	r2, sl
 8005b34:	465b      	mov	r3, fp
 8005b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b3a:	f7fa fd5d 	bl	80005f8 <__aeabi_dmul>
 8005b3e:	9b06      	ldr	r3, [sp, #24]
 8005b40:	1b5d      	subs	r5, r3, r5
 8005b42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b4a:	e7e3      	b.n	8005b14 <_strtod_l+0x3fc>
 8005b4c:	9b06      	ldr	r3, [sp, #24]
 8005b4e:	3316      	adds	r3, #22
 8005b50:	db0b      	blt.n	8005b6a <_strtod_l+0x452>
 8005b52:	9b05      	ldr	r3, [sp, #20]
 8005b54:	1b9e      	subs	r6, r3, r6
 8005b56:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <_strtod_l+0x5a4>)
 8005b58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005b5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b60:	4650      	mov	r0, sl
 8005b62:	4659      	mov	r1, fp
 8005b64:	f7fa fe72 	bl	800084c <__aeabi_ddiv>
 8005b68:	e7d6      	b.n	8005b18 <_strtod_l+0x400>
 8005b6a:	9b06      	ldr	r3, [sp, #24]
 8005b6c:	eba5 0808 	sub.w	r8, r5, r8
 8005b70:	4498      	add	r8, r3
 8005b72:	f1b8 0f00 	cmp.w	r8, #0
 8005b76:	dd74      	ble.n	8005c62 <_strtod_l+0x54a>
 8005b78:	f018 030f 	ands.w	r3, r8, #15
 8005b7c:	d00a      	beq.n	8005b94 <_strtod_l+0x47c>
 8005b7e:	494f      	ldr	r1, [pc, #316]	; (8005cbc <_strtod_l+0x5a4>)
 8005b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b84:	4652      	mov	r2, sl
 8005b86:	465b      	mov	r3, fp
 8005b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8c:	f7fa fd34 	bl	80005f8 <__aeabi_dmul>
 8005b90:	4682      	mov	sl, r0
 8005b92:	468b      	mov	fp, r1
 8005b94:	f038 080f 	bics.w	r8, r8, #15
 8005b98:	d04f      	beq.n	8005c3a <_strtod_l+0x522>
 8005b9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b9e:	dd22      	ble.n	8005be6 <_strtod_l+0x4ce>
 8005ba0:	2500      	movs	r5, #0
 8005ba2:	462e      	mov	r6, r5
 8005ba4:	9507      	str	r5, [sp, #28]
 8005ba6:	9505      	str	r5, [sp, #20]
 8005ba8:	2322      	movs	r3, #34	; 0x22
 8005baa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005cc4 <_strtod_l+0x5ac>
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	f04f 0a00 	mov.w	sl, #0
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f43f adf2 	beq.w	80057a0 <_strtod_l+0x88>
 8005bbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f001 fea2 	bl	8007908 <_Bfree>
 8005bc4:	9905      	ldr	r1, [sp, #20]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f001 fe9e 	bl	8007908 <_Bfree>
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f001 fe9a 	bl	8007908 <_Bfree>
 8005bd4:	9907      	ldr	r1, [sp, #28]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f001 fe96 	bl	8007908 <_Bfree>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4620      	mov	r0, r4
 8005be0:	f001 fe92 	bl	8007908 <_Bfree>
 8005be4:	e5dc      	b.n	80057a0 <_strtod_l+0x88>
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <_strtod_l+0x5a8>)
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	2300      	movs	r3, #0
 8005bec:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	f1b8 0f01 	cmp.w	r8, #1
 8005bfa:	dc21      	bgt.n	8005c40 <_strtod_l+0x528>
 8005bfc:	b10b      	cbz	r3, 8005c02 <_strtod_l+0x4ea>
 8005bfe:	4682      	mov	sl, r0
 8005c00:	468b      	mov	fp, r1
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <_strtod_l+0x5a8>)
 8005c04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	465b      	mov	r3, fp
 8005c10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c14:	f7fa fcf0 	bl	80005f8 <__aeabi_dmul>
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <_strtod_l+0x5ac>)
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	492a      	ldr	r1, [pc, #168]	; (8005cc8 <_strtod_l+0x5b0>)
 8005c20:	428b      	cmp	r3, r1
 8005c22:	4682      	mov	sl, r0
 8005c24:	d8bc      	bhi.n	8005ba0 <_strtod_l+0x488>
 8005c26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c2a:	428b      	cmp	r3, r1
 8005c2c:	bf86      	itte	hi
 8005c2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005ccc <_strtod_l+0x5b4>
 8005c32:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9304      	str	r3, [sp, #16]
 8005c3e:	e084      	b.n	8005d4a <_strtod_l+0x632>
 8005c40:	f018 0f01 	tst.w	r8, #1
 8005c44:	d005      	beq.n	8005c52 <_strtod_l+0x53a>
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa fcd4 	bl	80005f8 <__aeabi_dmul>
 8005c50:	2301      	movs	r3, #1
 8005c52:	9a04      	ldr	r2, [sp, #16]
 8005c54:	3208      	adds	r2, #8
 8005c56:	f109 0901 	add.w	r9, r9, #1
 8005c5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c5e:	9204      	str	r2, [sp, #16]
 8005c60:	e7c9      	b.n	8005bf6 <_strtod_l+0x4de>
 8005c62:	d0ea      	beq.n	8005c3a <_strtod_l+0x522>
 8005c64:	f1c8 0800 	rsb	r8, r8, #0
 8005c68:	f018 020f 	ands.w	r2, r8, #15
 8005c6c:	d00a      	beq.n	8005c84 <_strtod_l+0x56c>
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <_strtod_l+0x5a4>)
 8005c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c74:	4650      	mov	r0, sl
 8005c76:	4659      	mov	r1, fp
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fde6 	bl	800084c <__aeabi_ddiv>
 8005c80:	4682      	mov	sl, r0
 8005c82:	468b      	mov	fp, r1
 8005c84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c88:	d0d7      	beq.n	8005c3a <_strtod_l+0x522>
 8005c8a:	f1b8 0f1f 	cmp.w	r8, #31
 8005c8e:	dd1f      	ble.n	8005cd0 <_strtod_l+0x5b8>
 8005c90:	2500      	movs	r5, #0
 8005c92:	462e      	mov	r6, r5
 8005c94:	9507      	str	r5, [sp, #28]
 8005c96:	9505      	str	r5, [sp, #20]
 8005c98:	2322      	movs	r3, #34	; 0x22
 8005c9a:	f04f 0a00 	mov.w	sl, #0
 8005c9e:	f04f 0b00 	mov.w	fp, #0
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	e786      	b.n	8005bb4 <_strtod_l+0x49c>
 8005ca6:	bf00      	nop
 8005ca8:	080099f9 	.word	0x080099f9
 8005cac:	08009a3c 	.word	0x08009a3c
 8005cb0:	080099f1 	.word	0x080099f1
 8005cb4:	08009b7c 	.word	0x08009b7c
 8005cb8:	08009e28 	.word	0x08009e28
 8005cbc:	08009d08 	.word	0x08009d08
 8005cc0:	08009ce0 	.word	0x08009ce0
 8005cc4:	7ff00000 	.word	0x7ff00000
 8005cc8:	7ca00000 	.word	0x7ca00000
 8005ccc:	7fefffff 	.word	0x7fefffff
 8005cd0:	f018 0310 	ands.w	r3, r8, #16
 8005cd4:	bf18      	it	ne
 8005cd6:	236a      	movne	r3, #106	; 0x6a
 8005cd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006088 <_strtod_l+0x970>
 8005cdc:	9304      	str	r3, [sp, #16]
 8005cde:	4650      	mov	r0, sl
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f018 0f01 	tst.w	r8, #1
 8005ce8:	d004      	beq.n	8005cf4 <_strtod_l+0x5dc>
 8005cea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cee:	f7fa fc83 	bl	80005f8 <__aeabi_dmul>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005cf8:	f109 0908 	add.w	r9, r9, #8
 8005cfc:	d1f2      	bne.n	8005ce4 <_strtod_l+0x5cc>
 8005cfe:	b10b      	cbz	r3, 8005d04 <_strtod_l+0x5ec>
 8005d00:	4682      	mov	sl, r0
 8005d02:	468b      	mov	fp, r1
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	b1c3      	cbz	r3, 8005d3a <_strtod_l+0x622>
 8005d08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	4659      	mov	r1, fp
 8005d14:	dd11      	ble.n	8005d3a <_strtod_l+0x622>
 8005d16:	2b1f      	cmp	r3, #31
 8005d18:	f340 8124 	ble.w	8005f64 <_strtod_l+0x84c>
 8005d1c:	2b34      	cmp	r3, #52	; 0x34
 8005d1e:	bfde      	ittt	le
 8005d20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005d24:	f04f 33ff 	movle.w	r3, #4294967295
 8005d28:	fa03 f202 	lslle.w	r2, r3, r2
 8005d2c:	f04f 0a00 	mov.w	sl, #0
 8005d30:	bfcc      	ite	gt
 8005d32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d36:	ea02 0b01 	andle.w	fp, r2, r1
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4650      	mov	r0, sl
 8005d40:	4659      	mov	r1, fp
 8005d42:	f7fa fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d1a2      	bne.n	8005c90 <_strtod_l+0x578>
 8005d4a:	9b07      	ldr	r3, [sp, #28]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	9908      	ldr	r1, [sp, #32]
 8005d50:	462b      	mov	r3, r5
 8005d52:	463a      	mov	r2, r7
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 fe3f 	bl	80079d8 <__s2b>
 8005d5a:	9007      	str	r0, [sp, #28]
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f43f af1f 	beq.w	8005ba0 <_strtod_l+0x488>
 8005d62:	9b05      	ldr	r3, [sp, #20]
 8005d64:	1b9e      	subs	r6, r3, r6
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfb4      	ite	lt
 8005d6c:	4633      	movlt	r3, r6
 8005d6e:	2300      	movge	r3, #0
 8005d70:	930c      	str	r3, [sp, #48]	; 0x30
 8005d72:	9b06      	ldr	r3, [sp, #24]
 8005d74:	2500      	movs	r5, #0
 8005d76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d7c:	462e      	mov	r6, r5
 8005d7e:	9b07      	ldr	r3, [sp, #28]
 8005d80:	4620      	mov	r0, r4
 8005d82:	6859      	ldr	r1, [r3, #4]
 8005d84:	f001 fd80 	bl	8007888 <_Balloc>
 8005d88:	9005      	str	r0, [sp, #20]
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f43f af0c 	beq.w	8005ba8 <_strtod_l+0x490>
 8005d90:	9b07      	ldr	r3, [sp, #28]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	3202      	adds	r2, #2
 8005d96:	f103 010c 	add.w	r1, r3, #12
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	300c      	adds	r0, #12
 8005d9e:	f7fe fde9 	bl	8004974 <memcpy>
 8005da2:	ec4b ab10 	vmov	d0, sl, fp
 8005da6:	aa1a      	add	r2, sp, #104	; 0x68
 8005da8:	a919      	add	r1, sp, #100	; 0x64
 8005daa:	4620      	mov	r0, r4
 8005dac:	f002 f95a 	bl	8008064 <__d2b>
 8005db0:	ec4b ab18 	vmov	d8, sl, fp
 8005db4:	9018      	str	r0, [sp, #96]	; 0x60
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f43f aef6 	beq.w	8005ba8 <_strtod_l+0x490>
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 fea4 	bl	8007b0c <__i2b>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f aeee 	beq.w	8005ba8 <_strtod_l+0x490>
 8005dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dce:	9904      	ldr	r1, [sp, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfab      	itete	ge
 8005dd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005dd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005dd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005dda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005dde:	bfac      	ite	ge
 8005de0:	eb03 0902 	addge.w	r9, r3, r2
 8005de4:	1ad7      	sublt	r7, r2, r3
 8005de6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005de8:	eba3 0801 	sub.w	r8, r3, r1
 8005dec:	4490      	add	r8, r2
 8005dee:	4ba1      	ldr	r3, [pc, #644]	; (8006074 <_strtod_l+0x95c>)
 8005df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005df4:	4598      	cmp	r8, r3
 8005df6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dfa:	f280 80c7 	bge.w	8005f8c <_strtod_l+0x874>
 8005dfe:	eba3 0308 	sub.w	r3, r3, r8
 8005e02:	2b1f      	cmp	r3, #31
 8005e04:	eba2 0203 	sub.w	r2, r2, r3
 8005e08:	f04f 0101 	mov.w	r1, #1
 8005e0c:	f300 80b1 	bgt.w	8005f72 <_strtod_l+0x85a>
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	930d      	str	r3, [sp, #52]	; 0x34
 8005e16:	2300      	movs	r3, #0
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	eb09 0802 	add.w	r8, r9, r2
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	45c1      	cmp	r9, r8
 8005e22:	4417      	add	r7, r2
 8005e24:	441f      	add	r7, r3
 8005e26:	464b      	mov	r3, r9
 8005e28:	bfa8      	it	ge
 8005e2a:	4643      	movge	r3, r8
 8005e2c:	42bb      	cmp	r3, r7
 8005e2e:	bfa8      	it	ge
 8005e30:	463b      	movge	r3, r7
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfc2      	ittt	gt
 8005e36:	eba8 0803 	subgt.w	r8, r8, r3
 8005e3a:	1aff      	subgt	r7, r7, r3
 8005e3c:	eba9 0903 	subgt.w	r9, r9, r3
 8005e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd17      	ble.n	8005e76 <_strtod_l+0x75e>
 8005e46:	4631      	mov	r1, r6
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f001 ff1e 	bl	8007c8c <__pow5mult>
 8005e50:	4606      	mov	r6, r0
 8005e52:	2800      	cmp	r0, #0
 8005e54:	f43f aea8 	beq.w	8005ba8 <_strtod_l+0x490>
 8005e58:	4601      	mov	r1, r0
 8005e5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f001 fe6b 	bl	8007b38 <__multiply>
 8005e62:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f43f ae9f 	beq.w	8005ba8 <_strtod_l+0x490>
 8005e6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f001 fd4b 	bl	8007908 <_Bfree>
 8005e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e74:	9318      	str	r3, [sp, #96]	; 0x60
 8005e76:	f1b8 0f00 	cmp.w	r8, #0
 8005e7a:	f300 808c 	bgt.w	8005f96 <_strtod_l+0x87e>
 8005e7e:	9b06      	ldr	r3, [sp, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dd08      	ble.n	8005e96 <_strtod_l+0x77e>
 8005e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e86:	9905      	ldr	r1, [sp, #20]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f001 feff 	bl	8007c8c <__pow5mult>
 8005e8e:	9005      	str	r0, [sp, #20]
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f43f ae89 	beq.w	8005ba8 <_strtod_l+0x490>
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	dd08      	ble.n	8005eac <_strtod_l+0x794>
 8005e9a:	9905      	ldr	r1, [sp, #20]
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 ff4e 	bl	8007d40 <__lshift>
 8005ea4:	9005      	str	r0, [sp, #20]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f ae7e 	beq.w	8005ba8 <_strtod_l+0x490>
 8005eac:	f1b9 0f00 	cmp.w	r9, #0
 8005eb0:	dd08      	ble.n	8005ec4 <_strtod_l+0x7ac>
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	464a      	mov	r2, r9
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f001 ff42 	bl	8007d40 <__lshift>
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f43f ae72 	beq.w	8005ba8 <_strtod_l+0x490>
 8005ec4:	9a05      	ldr	r2, [sp, #20]
 8005ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f001 ffc5 	bl	8007e58 <__mdiff>
 8005ece:	4605      	mov	r5, r0
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	f43f ae69 	beq.w	8005ba8 <_strtod_l+0x490>
 8005ed6:	68c3      	ldr	r3, [r0, #12]
 8005ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eda:	2300      	movs	r3, #0
 8005edc:	60c3      	str	r3, [r0, #12]
 8005ede:	4631      	mov	r1, r6
 8005ee0:	f001 ff9e 	bl	8007e20 <__mcmp>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	da60      	bge.n	8005faa <_strtod_l+0x892>
 8005ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eea:	ea53 030a 	orrs.w	r3, r3, sl
 8005eee:	f040 8082 	bne.w	8005ff6 <_strtod_l+0x8de>
 8005ef2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d17d      	bne.n	8005ff6 <_strtod_l+0x8de>
 8005efa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005efe:	0d1b      	lsrs	r3, r3, #20
 8005f00:	051b      	lsls	r3, r3, #20
 8005f02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f06:	d976      	bls.n	8005ff6 <_strtod_l+0x8de>
 8005f08:	696b      	ldr	r3, [r5, #20]
 8005f0a:	b913      	cbnz	r3, 8005f12 <_strtod_l+0x7fa>
 8005f0c:	692b      	ldr	r3, [r5, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	dd71      	ble.n	8005ff6 <_strtod_l+0x8de>
 8005f12:	4629      	mov	r1, r5
 8005f14:	2201      	movs	r2, #1
 8005f16:	4620      	mov	r0, r4
 8005f18:	f001 ff12 	bl	8007d40 <__lshift>
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4605      	mov	r5, r0
 8005f20:	f001 ff7e 	bl	8007e20 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	dd66      	ble.n	8005ff6 <_strtod_l+0x8de>
 8005f28:	9904      	ldr	r1, [sp, #16]
 8005f2a:	4a53      	ldr	r2, [pc, #332]	; (8006078 <_strtod_l+0x960>)
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	f000 8081 	beq.w	8006036 <_strtod_l+0x91e>
 8005f34:	ea02 010b 	and.w	r1, r2, fp
 8005f38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005f3c:	dc7b      	bgt.n	8006036 <_strtod_l+0x91e>
 8005f3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005f42:	f77f aea9 	ble.w	8005c98 <_strtod_l+0x580>
 8005f46:	4b4d      	ldr	r3, [pc, #308]	; (800607c <_strtod_l+0x964>)
 8005f48:	4650      	mov	r0, sl
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f7fa fb53 	bl	80005f8 <__aeabi_dmul>
 8005f52:	460b      	mov	r3, r1
 8005f54:	4303      	orrs	r3, r0
 8005f56:	bf08      	it	eq
 8005f58:	2322      	moveq	r3, #34	; 0x22
 8005f5a:	4682      	mov	sl, r0
 8005f5c:	468b      	mov	fp, r1
 8005f5e:	bf08      	it	eq
 8005f60:	6023      	streq	r3, [r4, #0]
 8005f62:	e62b      	b.n	8005bbc <_strtod_l+0x4a4>
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	ea03 0a0a 	and.w	sl, r3, sl
 8005f70:	e6e3      	b.n	8005d3a <_strtod_l+0x622>
 8005f72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005f82:	fa01 f308 	lsl.w	r3, r1, r8
 8005f86:	9308      	str	r3, [sp, #32]
 8005f88:	910d      	str	r1, [sp, #52]	; 0x34
 8005f8a:	e746      	b.n	8005e1a <_strtod_l+0x702>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9308      	str	r3, [sp, #32]
 8005f90:	2301      	movs	r3, #1
 8005f92:	930d      	str	r3, [sp, #52]	; 0x34
 8005f94:	e741      	b.n	8005e1a <_strtod_l+0x702>
 8005f96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f001 fed0 	bl	8007d40 <__lshift>
 8005fa0:	9018      	str	r0, [sp, #96]	; 0x60
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f47f af6b 	bne.w	8005e7e <_strtod_l+0x766>
 8005fa8:	e5fe      	b.n	8005ba8 <_strtod_l+0x490>
 8005faa:	465f      	mov	r7, fp
 8005fac:	d16e      	bne.n	800608c <_strtod_l+0x974>
 8005fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb4:	b342      	cbz	r2, 8006008 <_strtod_l+0x8f0>
 8005fb6:	4a32      	ldr	r2, [pc, #200]	; (8006080 <_strtod_l+0x968>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d128      	bne.n	800600e <_strtod_l+0x8f6>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	4651      	mov	r1, sl
 8005fc0:	b1eb      	cbz	r3, 8005ffe <_strtod_l+0x8e6>
 8005fc2:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <_strtod_l+0x960>)
 8005fc4:	403b      	ands	r3, r7
 8005fc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	d819      	bhi.n	8006004 <_strtod_l+0x8ec>
 8005fd0:	0d1b      	lsrs	r3, r3, #20
 8005fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	d117      	bne.n	800600e <_strtod_l+0x8f6>
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <_strtod_l+0x96c>)
 8005fe0:	429f      	cmp	r7, r3
 8005fe2:	d102      	bne.n	8005fea <_strtod_l+0x8d2>
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	f43f addf 	beq.w	8005ba8 <_strtod_l+0x490>
 8005fea:	4b23      	ldr	r3, [pc, #140]	; (8006078 <_strtod_l+0x960>)
 8005fec:	403b      	ands	r3, r7
 8005fee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005ff2:	f04f 0a00 	mov.w	sl, #0
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1a4      	bne.n	8005f46 <_strtod_l+0x82e>
 8005ffc:	e5de      	b.n	8005bbc <_strtod_l+0x4a4>
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	e7ea      	b.n	8005fda <_strtod_l+0x8c2>
 8006004:	4613      	mov	r3, r2
 8006006:	e7e8      	b.n	8005fda <_strtod_l+0x8c2>
 8006008:	ea53 030a 	orrs.w	r3, r3, sl
 800600c:	d08c      	beq.n	8005f28 <_strtod_l+0x810>
 800600e:	9b08      	ldr	r3, [sp, #32]
 8006010:	b1db      	cbz	r3, 800604a <_strtod_l+0x932>
 8006012:	423b      	tst	r3, r7
 8006014:	d0ef      	beq.n	8005ff6 <_strtod_l+0x8de>
 8006016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006018:	9a04      	ldr	r2, [sp, #16]
 800601a:	4650      	mov	r0, sl
 800601c:	4659      	mov	r1, fp
 800601e:	b1c3      	cbz	r3, 8006052 <_strtod_l+0x93a>
 8006020:	f7ff fb5e 	bl	80056e0 <sulp>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	ec51 0b18 	vmov	r0, r1, d8
 800602c:	f7fa f92e 	bl	800028c <__adddf3>
 8006030:	4682      	mov	sl, r0
 8006032:	468b      	mov	fp, r1
 8006034:	e7df      	b.n	8005ff6 <_strtod_l+0x8de>
 8006036:	4013      	ands	r3, r2
 8006038:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800603c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006040:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006044:	f04f 3aff 	mov.w	sl, #4294967295
 8006048:	e7d5      	b.n	8005ff6 <_strtod_l+0x8de>
 800604a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800604c:	ea13 0f0a 	tst.w	r3, sl
 8006050:	e7e0      	b.n	8006014 <_strtod_l+0x8fc>
 8006052:	f7ff fb45 	bl	80056e0 <sulp>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	ec51 0b18 	vmov	r0, r1, d8
 800605e:	f7fa f913 	bl	8000288 <__aeabi_dsub>
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	4682      	mov	sl, r0
 8006068:	468b      	mov	fp, r1
 800606a:	f7fa fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800606e:	2800      	cmp	r0, #0
 8006070:	d0c1      	beq.n	8005ff6 <_strtod_l+0x8de>
 8006072:	e611      	b.n	8005c98 <_strtod_l+0x580>
 8006074:	fffffc02 	.word	0xfffffc02
 8006078:	7ff00000 	.word	0x7ff00000
 800607c:	39500000 	.word	0x39500000
 8006080:	000fffff 	.word	0x000fffff
 8006084:	7fefffff 	.word	0x7fefffff
 8006088:	08009a50 	.word	0x08009a50
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	f002 f844 	bl	800811c <__ratio>
 8006094:	ec59 8b10 	vmov	r8, r9, d0
 8006098:	ee10 0a10 	vmov	r0, s0
 800609c:	2200      	movs	r2, #0
 800609e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060a2:	4649      	mov	r1, r9
 80060a4:	f7fa fd24 	bl	8000af0 <__aeabi_dcmple>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d07a      	beq.n	80061a2 <_strtod_l+0xa8a>
 80060ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d04a      	beq.n	8006148 <_strtod_l+0xa30>
 80060b2:	4b95      	ldr	r3, [pc, #596]	; (8006308 <_strtod_l+0xbf0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006308 <_strtod_l+0xbf0>
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	4b92      	ldr	r3, [pc, #584]	; (800630c <_strtod_l+0xbf4>)
 80060c4:	403b      	ands	r3, r7
 80060c6:	930d      	str	r3, [sp, #52]	; 0x34
 80060c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060ca:	4b91      	ldr	r3, [pc, #580]	; (8006310 <_strtod_l+0xbf8>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	f040 80b0 	bne.w	8006232 <_strtod_l+0xb1a>
 80060d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80060da:	ec4b ab10 	vmov	d0, sl, fp
 80060de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060e2:	f001 ff43 	bl	8007f6c <__ulp>
 80060e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060ea:	ec53 2b10 	vmov	r2, r3, d0
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	4652      	mov	r2, sl
 80060f4:	465b      	mov	r3, fp
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	460b      	mov	r3, r1
 80060fc:	4983      	ldr	r1, [pc, #524]	; (800630c <_strtod_l+0xbf4>)
 80060fe:	4a85      	ldr	r2, [pc, #532]	; (8006314 <_strtod_l+0xbfc>)
 8006100:	4019      	ands	r1, r3
 8006102:	4291      	cmp	r1, r2
 8006104:	4682      	mov	sl, r0
 8006106:	d960      	bls.n	80061ca <_strtod_l+0xab2>
 8006108:	ee18 3a90 	vmov	r3, s17
 800610c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006110:	4293      	cmp	r3, r2
 8006112:	d104      	bne.n	800611e <_strtod_l+0xa06>
 8006114:	ee18 3a10 	vmov	r3, s16
 8006118:	3301      	adds	r3, #1
 800611a:	f43f ad45 	beq.w	8005ba8 <_strtod_l+0x490>
 800611e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006320 <_strtod_l+0xc08>
 8006122:	f04f 3aff 	mov.w	sl, #4294967295
 8006126:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006128:	4620      	mov	r0, r4
 800612a:	f001 fbed 	bl	8007908 <_Bfree>
 800612e:	9905      	ldr	r1, [sp, #20]
 8006130:	4620      	mov	r0, r4
 8006132:	f001 fbe9 	bl	8007908 <_Bfree>
 8006136:	4631      	mov	r1, r6
 8006138:	4620      	mov	r0, r4
 800613a:	f001 fbe5 	bl	8007908 <_Bfree>
 800613e:	4629      	mov	r1, r5
 8006140:	4620      	mov	r0, r4
 8006142:	f001 fbe1 	bl	8007908 <_Bfree>
 8006146:	e61a      	b.n	8005d7e <_strtod_l+0x666>
 8006148:	f1ba 0f00 	cmp.w	sl, #0
 800614c:	d11b      	bne.n	8006186 <_strtod_l+0xa6e>
 800614e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006152:	b9f3      	cbnz	r3, 8006192 <_strtod_l+0xa7a>
 8006154:	4b6c      	ldr	r3, [pc, #432]	; (8006308 <_strtod_l+0xbf0>)
 8006156:	2200      	movs	r2, #0
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa fcbe 	bl	8000adc <__aeabi_dcmplt>
 8006160:	b9d0      	cbnz	r0, 8006198 <_strtod_l+0xa80>
 8006162:	4640      	mov	r0, r8
 8006164:	4649      	mov	r1, r9
 8006166:	4b6c      	ldr	r3, [pc, #432]	; (8006318 <_strtod_l+0xc00>)
 8006168:	2200      	movs	r2, #0
 800616a:	f7fa fa45 	bl	80005f8 <__aeabi_dmul>
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006176:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800617a:	9315      	str	r3, [sp, #84]	; 0x54
 800617c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006184:	e79d      	b.n	80060c2 <_strtod_l+0x9aa>
 8006186:	f1ba 0f01 	cmp.w	sl, #1
 800618a:	d102      	bne.n	8006192 <_strtod_l+0xa7a>
 800618c:	2f00      	cmp	r7, #0
 800618e:	f43f ad83 	beq.w	8005c98 <_strtod_l+0x580>
 8006192:	4b62      	ldr	r3, [pc, #392]	; (800631c <_strtod_l+0xc04>)
 8006194:	2200      	movs	r2, #0
 8006196:	e78e      	b.n	80060b6 <_strtod_l+0x99e>
 8006198:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006318 <_strtod_l+0xc00>
 800619c:	f04f 0800 	mov.w	r8, #0
 80061a0:	e7e7      	b.n	8006172 <_strtod_l+0xa5a>
 80061a2:	4b5d      	ldr	r3, [pc, #372]	; (8006318 <_strtod_l+0xc00>)
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	2200      	movs	r2, #0
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b0:	4680      	mov	r8, r0
 80061b2:	4689      	mov	r9, r1
 80061b4:	b933      	cbnz	r3, 80061c4 <_strtod_l+0xaac>
 80061b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061ba:	900e      	str	r0, [sp, #56]	; 0x38
 80061bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80061be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80061c2:	e7dd      	b.n	8006180 <_strtod_l+0xa68>
 80061c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80061c8:	e7f9      	b.n	80061be <_strtod_l+0xaa6>
 80061ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80061ce:	9b04      	ldr	r3, [sp, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1a8      	bne.n	8006126 <_strtod_l+0xa0e>
 80061d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061da:	0d1b      	lsrs	r3, r3, #20
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	429a      	cmp	r2, r3
 80061e0:	d1a1      	bne.n	8006126 <_strtod_l+0xa0e>
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa fd67 	bl	8000cb8 <__aeabi_d2lz>
 80061ea:	f7fa f9d7 	bl	800059c <__aeabi_l2d>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f847 	bl	8000288 <__aeabi_dsub>
 80061fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006200:	ea43 030a 	orr.w	r3, r3, sl
 8006204:	4313      	orrs	r3, r2
 8006206:	4680      	mov	r8, r0
 8006208:	4689      	mov	r9, r1
 800620a:	d055      	beq.n	80062b8 <_strtod_l+0xba0>
 800620c:	a336      	add	r3, pc, #216	; (adr r3, 80062e8 <_strtod_l+0xbd0>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7fa fc63 	bl	8000adc <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	f47f acd0 	bne.w	8005bbc <_strtod_l+0x4a4>
 800621c:	a334      	add	r3, pc, #208	; (adr r3, 80062f0 <_strtod_l+0xbd8>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800622a:	2800      	cmp	r0, #0
 800622c:	f43f af7b 	beq.w	8006126 <_strtod_l+0xa0e>
 8006230:	e4c4      	b.n	8005bbc <_strtod_l+0x4a4>
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	b333      	cbz	r3, 8006284 <_strtod_l+0xb6c>
 8006236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006238:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800623c:	d822      	bhi.n	8006284 <_strtod_l+0xb6c>
 800623e:	a32e      	add	r3, pc, #184	; (adr r3, 80062f8 <_strtod_l+0xbe0>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f7fa fc52 	bl	8000af0 <__aeabi_dcmple>
 800624c:	b1a0      	cbz	r0, 8006278 <_strtod_l+0xb60>
 800624e:	4649      	mov	r1, r9
 8006250:	4640      	mov	r0, r8
 8006252:	f7fa fca9 	bl	8000ba8 <__aeabi_d2uiz>
 8006256:	2801      	cmp	r0, #1
 8006258:	bf38      	it	cc
 800625a:	2001      	movcc	r0, #1
 800625c:	f7fa f952 	bl	8000504 <__aeabi_ui2d>
 8006260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006262:	4680      	mov	r8, r0
 8006264:	4689      	mov	r9, r1
 8006266:	bb23      	cbnz	r3, 80062b2 <_strtod_l+0xb9a>
 8006268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800626c:	9010      	str	r0, [sp, #64]	; 0x40
 800626e:	9311      	str	r3, [sp, #68]	; 0x44
 8006270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006274:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800627c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006288:	eeb0 0a48 	vmov.f32	s0, s16
 800628c:	eef0 0a68 	vmov.f32	s1, s17
 8006290:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006294:	f001 fe6a 	bl	8007f6c <__ulp>
 8006298:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800629c:	ec53 2b10 	vmov	r2, r3, d0
 80062a0:	f7fa f9aa 	bl	80005f8 <__aeabi_dmul>
 80062a4:	ec53 2b18 	vmov	r2, r3, d8
 80062a8:	f7f9 fff0 	bl	800028c <__adddf3>
 80062ac:	4682      	mov	sl, r0
 80062ae:	468b      	mov	fp, r1
 80062b0:	e78d      	b.n	80061ce <_strtod_l+0xab6>
 80062b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80062b6:	e7db      	b.n	8006270 <_strtod_l+0xb58>
 80062b8:	a311      	add	r3, pc, #68	; (adr r3, 8006300 <_strtod_l+0xbe8>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa fc0d 	bl	8000adc <__aeabi_dcmplt>
 80062c2:	e7b2      	b.n	800622a <_strtod_l+0xb12>
 80062c4:	2300      	movs	r3, #0
 80062c6:	930a      	str	r3, [sp, #40]	; 0x28
 80062c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	f7ff ba6b 	b.w	80057a8 <_strtod_l+0x90>
 80062d2:	2a65      	cmp	r2, #101	; 0x65
 80062d4:	f43f ab5f 	beq.w	8005996 <_strtod_l+0x27e>
 80062d8:	2a45      	cmp	r2, #69	; 0x45
 80062da:	f43f ab5c 	beq.w	8005996 <_strtod_l+0x27e>
 80062de:	2301      	movs	r3, #1
 80062e0:	f7ff bb94 	b.w	8005a0c <_strtod_l+0x2f4>
 80062e4:	f3af 8000 	nop.w
 80062e8:	94a03595 	.word	0x94a03595
 80062ec:	3fdfffff 	.word	0x3fdfffff
 80062f0:	35afe535 	.word	0x35afe535
 80062f4:	3fe00000 	.word	0x3fe00000
 80062f8:	ffc00000 	.word	0xffc00000
 80062fc:	41dfffff 	.word	0x41dfffff
 8006300:	94a03595 	.word	0x94a03595
 8006304:	3fcfffff 	.word	0x3fcfffff
 8006308:	3ff00000 	.word	0x3ff00000
 800630c:	7ff00000 	.word	0x7ff00000
 8006310:	7fe00000 	.word	0x7fe00000
 8006314:	7c9fffff 	.word	0x7c9fffff
 8006318:	3fe00000 	.word	0x3fe00000
 800631c:	bff00000 	.word	0xbff00000
 8006320:	7fefffff 	.word	0x7fefffff

08006324 <_strtod_r>:
 8006324:	4b01      	ldr	r3, [pc, #4]	; (800632c <_strtod_r+0x8>)
 8006326:	f7ff b9f7 	b.w	8005718 <_strtod_l>
 800632a:	bf00      	nop
 800632c:	200002b8 	.word	0x200002b8

08006330 <_strtol_l.constprop.0>:
 8006330:	2b01      	cmp	r3, #1
 8006332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006336:	d001      	beq.n	800633c <_strtol_l.constprop.0+0xc>
 8006338:	2b24      	cmp	r3, #36	; 0x24
 800633a:	d906      	bls.n	800634a <_strtol_l.constprop.0+0x1a>
 800633c:	f7fe faf0 	bl	8004920 <__errno>
 8006340:	2316      	movs	r3, #22
 8006342:	6003      	str	r3, [r0, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006430 <_strtol_l.constprop.0+0x100>
 800634e:	460d      	mov	r5, r1
 8006350:	462e      	mov	r6, r5
 8006352:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006356:	f814 700c 	ldrb.w	r7, [r4, ip]
 800635a:	f017 0708 	ands.w	r7, r7, #8
 800635e:	d1f7      	bne.n	8006350 <_strtol_l.constprop.0+0x20>
 8006360:	2c2d      	cmp	r4, #45	; 0x2d
 8006362:	d132      	bne.n	80063ca <_strtol_l.constprop.0+0x9a>
 8006364:	782c      	ldrb	r4, [r5, #0]
 8006366:	2701      	movs	r7, #1
 8006368:	1cb5      	adds	r5, r6, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d05b      	beq.n	8006426 <_strtol_l.constprop.0+0xf6>
 800636e:	2b10      	cmp	r3, #16
 8006370:	d109      	bne.n	8006386 <_strtol_l.constprop.0+0x56>
 8006372:	2c30      	cmp	r4, #48	; 0x30
 8006374:	d107      	bne.n	8006386 <_strtol_l.constprop.0+0x56>
 8006376:	782c      	ldrb	r4, [r5, #0]
 8006378:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800637c:	2c58      	cmp	r4, #88	; 0x58
 800637e:	d14d      	bne.n	800641c <_strtol_l.constprop.0+0xec>
 8006380:	786c      	ldrb	r4, [r5, #1]
 8006382:	2310      	movs	r3, #16
 8006384:	3502      	adds	r5, #2
 8006386:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800638a:	f108 38ff 	add.w	r8, r8, #4294967295
 800638e:	f04f 0c00 	mov.w	ip, #0
 8006392:	fbb8 f9f3 	udiv	r9, r8, r3
 8006396:	4666      	mov	r6, ip
 8006398:	fb03 8a19 	mls	sl, r3, r9, r8
 800639c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80063a0:	f1be 0f09 	cmp.w	lr, #9
 80063a4:	d816      	bhi.n	80063d4 <_strtol_l.constprop.0+0xa4>
 80063a6:	4674      	mov	r4, lr
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	dd24      	ble.n	80063f6 <_strtol_l.constprop.0+0xc6>
 80063ac:	f1bc 0f00 	cmp.w	ip, #0
 80063b0:	db1e      	blt.n	80063f0 <_strtol_l.constprop.0+0xc0>
 80063b2:	45b1      	cmp	r9, r6
 80063b4:	d31c      	bcc.n	80063f0 <_strtol_l.constprop.0+0xc0>
 80063b6:	d101      	bne.n	80063bc <_strtol_l.constprop.0+0x8c>
 80063b8:	45a2      	cmp	sl, r4
 80063ba:	db19      	blt.n	80063f0 <_strtol_l.constprop.0+0xc0>
 80063bc:	fb06 4603 	mla	r6, r6, r3, r4
 80063c0:	f04f 0c01 	mov.w	ip, #1
 80063c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063c8:	e7e8      	b.n	800639c <_strtol_l.constprop.0+0x6c>
 80063ca:	2c2b      	cmp	r4, #43	; 0x2b
 80063cc:	bf04      	itt	eq
 80063ce:	782c      	ldrbeq	r4, [r5, #0]
 80063d0:	1cb5      	addeq	r5, r6, #2
 80063d2:	e7ca      	b.n	800636a <_strtol_l.constprop.0+0x3a>
 80063d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80063d8:	f1be 0f19 	cmp.w	lr, #25
 80063dc:	d801      	bhi.n	80063e2 <_strtol_l.constprop.0+0xb2>
 80063de:	3c37      	subs	r4, #55	; 0x37
 80063e0:	e7e2      	b.n	80063a8 <_strtol_l.constprop.0+0x78>
 80063e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80063e6:	f1be 0f19 	cmp.w	lr, #25
 80063ea:	d804      	bhi.n	80063f6 <_strtol_l.constprop.0+0xc6>
 80063ec:	3c57      	subs	r4, #87	; 0x57
 80063ee:	e7db      	b.n	80063a8 <_strtol_l.constprop.0+0x78>
 80063f0:	f04f 3cff 	mov.w	ip, #4294967295
 80063f4:	e7e6      	b.n	80063c4 <_strtol_l.constprop.0+0x94>
 80063f6:	f1bc 0f00 	cmp.w	ip, #0
 80063fa:	da05      	bge.n	8006408 <_strtol_l.constprop.0+0xd8>
 80063fc:	2322      	movs	r3, #34	; 0x22
 80063fe:	6003      	str	r3, [r0, #0]
 8006400:	4646      	mov	r6, r8
 8006402:	b942      	cbnz	r2, 8006416 <_strtol_l.constprop.0+0xe6>
 8006404:	4630      	mov	r0, r6
 8006406:	e79e      	b.n	8006346 <_strtol_l.constprop.0+0x16>
 8006408:	b107      	cbz	r7, 800640c <_strtol_l.constprop.0+0xdc>
 800640a:	4276      	negs	r6, r6
 800640c:	2a00      	cmp	r2, #0
 800640e:	d0f9      	beq.n	8006404 <_strtol_l.constprop.0+0xd4>
 8006410:	f1bc 0f00 	cmp.w	ip, #0
 8006414:	d000      	beq.n	8006418 <_strtol_l.constprop.0+0xe8>
 8006416:	1e69      	subs	r1, r5, #1
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	e7f3      	b.n	8006404 <_strtol_l.constprop.0+0xd4>
 800641c:	2430      	movs	r4, #48	; 0x30
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1b1      	bne.n	8006386 <_strtol_l.constprop.0+0x56>
 8006422:	2308      	movs	r3, #8
 8006424:	e7af      	b.n	8006386 <_strtol_l.constprop.0+0x56>
 8006426:	2c30      	cmp	r4, #48	; 0x30
 8006428:	d0a5      	beq.n	8006376 <_strtol_l.constprop.0+0x46>
 800642a:	230a      	movs	r3, #10
 800642c:	e7ab      	b.n	8006386 <_strtol_l.constprop.0+0x56>
 800642e:	bf00      	nop
 8006430:	08009a79 	.word	0x08009a79

08006434 <_strtol_r>:
 8006434:	f7ff bf7c 	b.w	8006330 <_strtol_l.constprop.0>

08006438 <_vsiprintf_r>:
 8006438:	b500      	push	{lr}
 800643a:	b09b      	sub	sp, #108	; 0x6c
 800643c:	9100      	str	r1, [sp, #0]
 800643e:	9104      	str	r1, [sp, #16]
 8006440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006444:	9105      	str	r1, [sp, #20]
 8006446:	9102      	str	r1, [sp, #8]
 8006448:	4905      	ldr	r1, [pc, #20]	; (8006460 <_vsiprintf_r+0x28>)
 800644a:	9103      	str	r1, [sp, #12]
 800644c:	4669      	mov	r1, sp
 800644e:	f002 f82f 	bl	80084b0 <_svfiprintf_r>
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	b01b      	add	sp, #108	; 0x6c
 800645a:	f85d fb04 	ldr.w	pc, [sp], #4
 800645e:	bf00      	nop
 8006460:	ffff0208 	.word	0xffff0208

08006464 <vsiprintf>:
 8006464:	4613      	mov	r3, r2
 8006466:	460a      	mov	r2, r1
 8006468:	4601      	mov	r1, r0
 800646a:	4802      	ldr	r0, [pc, #8]	; (8006474 <vsiprintf+0x10>)
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	f7ff bfe3 	b.w	8006438 <_vsiprintf_r>
 8006472:	bf00      	nop
 8006474:	20000250 	.word	0x20000250

08006478 <quorem>:
 8006478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	690c      	ldr	r4, [r1, #16]
 8006480:	42a3      	cmp	r3, r4
 8006482:	4607      	mov	r7, r0
 8006484:	f2c0 8081 	blt.w	800658a <quorem+0x112>
 8006488:	3c01      	subs	r4, #1
 800648a:	f101 0814 	add.w	r8, r1, #20
 800648e:	f100 0514 	add.w	r5, r0, #20
 8006492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800649c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a0:	3301      	adds	r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b0:	d331      	bcc.n	8006516 <quorem+0x9e>
 80064b2:	f04f 0e00 	mov.w	lr, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	46ac      	mov	ip, r5
 80064ba:	46f2      	mov	sl, lr
 80064bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c0:	b293      	uxth	r3, r2
 80064c2:	fb06 e303 	mla	r3, r6, r3, lr
 80064c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ebaa 0303 	sub.w	r3, sl, r3
 80064d0:	f8dc a000 	ldr.w	sl, [ip]
 80064d4:	0c12      	lsrs	r2, r2, #16
 80064d6:	fa13 f38a 	uxtah	r3, r3, sl
 80064da:	fb06 e202 	mla	r2, r6, r2, lr
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	9b00      	ldr	r3, [sp, #0]
 80064e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064e6:	b292      	uxth	r2, r2
 80064e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f4:	4581      	cmp	r9, r0
 80064f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fa:	f84c 3b04 	str.w	r3, [ip], #4
 80064fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006502:	d2db      	bcs.n	80064bc <quorem+0x44>
 8006504:	f855 300b 	ldr.w	r3, [r5, fp]
 8006508:	b92b      	cbnz	r3, 8006516 <quorem+0x9e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d32e      	bcc.n	8006572 <quorem+0xfa>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4638      	mov	r0, r7
 8006518:	f001 fc82 	bl	8007e20 <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	db24      	blt.n	800656a <quorem+0xf2>
 8006520:	3601      	adds	r6, #1
 8006522:	4628      	mov	r0, r5
 8006524:	f04f 0c00 	mov.w	ip, #0
 8006528:	f858 2b04 	ldr.w	r2, [r8], #4
 800652c:	f8d0 e000 	ldr.w	lr, [r0]
 8006530:	b293      	uxth	r3, r2
 8006532:	ebac 0303 	sub.w	r3, ip, r3
 8006536:	0c12      	lsrs	r2, r2, #16
 8006538:	fa13 f38e 	uxtah	r3, r3, lr
 800653c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	45c1      	cmp	r9, r8
 800654c:	f840 3b04 	str.w	r3, [r0], #4
 8006550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006554:	d2e8      	bcs.n	8006528 <quorem+0xb0>
 8006556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800655e:	b922      	cbnz	r2, 800656a <quorem+0xf2>
 8006560:	3b04      	subs	r3, #4
 8006562:	429d      	cmp	r5, r3
 8006564:	461a      	mov	r2, r3
 8006566:	d30a      	bcc.n	800657e <quorem+0x106>
 8006568:	613c      	str	r4, [r7, #16]
 800656a:	4630      	mov	r0, r6
 800656c:	b003      	add	sp, #12
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1cc      	bne.n	8006514 <quorem+0x9c>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7c7      	b.n	800650e <quorem+0x96>
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f0      	bne.n	8006568 <quorem+0xf0>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7eb      	b.n	8006562 <quorem+0xea>
 800658a:	2000      	movs	r0, #0
 800658c:	e7ee      	b.n	800656c <quorem+0xf4>
	...

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b04 	vpush	{d8-d9}
 8006598:	ec57 6b10 	vmov	r6, r7, d0
 800659c:	b093      	sub	sp, #76	; 0x4c
 800659e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065a4:	9106      	str	r1, [sp, #24]
 80065a6:	ee10 aa10 	vmov	sl, s0
 80065aa:	4604      	mov	r4, r0
 80065ac:	9209      	str	r2, [sp, #36]	; 0x24
 80065ae:	930c      	str	r3, [sp, #48]	; 0x30
 80065b0:	46bb      	mov	fp, r7
 80065b2:	b975      	cbnz	r5, 80065d2 <_dtoa_r+0x42>
 80065b4:	2010      	movs	r0, #16
 80065b6:	f001 f94d 	bl	8007854 <malloc>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6260      	str	r0, [r4, #36]	; 0x24
 80065be:	b920      	cbnz	r0, 80065ca <_dtoa_r+0x3a>
 80065c0:	4ba7      	ldr	r3, [pc, #668]	; (8006860 <_dtoa_r+0x2d0>)
 80065c2:	21ea      	movs	r1, #234	; 0xea
 80065c4:	48a7      	ldr	r0, [pc, #668]	; (8006864 <_dtoa_r+0x2d4>)
 80065c6:	f002 f8ad 	bl	8008724 <__assert_func>
 80065ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ce:	6005      	str	r5, [r0, #0]
 80065d0:	60c5      	str	r5, [r0, #12]
 80065d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	b151      	cbz	r1, 80065ee <_dtoa_r+0x5e>
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	604a      	str	r2, [r1, #4]
 80065dc:	2301      	movs	r3, #1
 80065de:	4093      	lsls	r3, r2
 80065e0:	608b      	str	r3, [r1, #8]
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 f990 	bl	8007908 <_Bfree>
 80065e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	1e3b      	subs	r3, r7, #0
 80065f0:	bfaa      	itet	ge
 80065f2:	2300      	movge	r3, #0
 80065f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065f8:	f8c8 3000 	strge.w	r3, [r8]
 80065fc:	4b9a      	ldr	r3, [pc, #616]	; (8006868 <_dtoa_r+0x2d8>)
 80065fe:	bfbc      	itt	lt
 8006600:	2201      	movlt	r2, #1
 8006602:	f8c8 2000 	strlt.w	r2, [r8]
 8006606:	ea33 030b 	bics.w	r3, r3, fp
 800660a:	d11b      	bne.n	8006644 <_dtoa_r+0xb4>
 800660c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800660e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006618:	4333      	orrs	r3, r6
 800661a:	f000 8592 	beq.w	8007142 <_dtoa_r+0xbb2>
 800661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006620:	b963      	cbnz	r3, 800663c <_dtoa_r+0xac>
 8006622:	4b92      	ldr	r3, [pc, #584]	; (800686c <_dtoa_r+0x2dc>)
 8006624:	e022      	b.n	800666c <_dtoa_r+0xdc>
 8006626:	4b92      	ldr	r3, [pc, #584]	; (8006870 <_dtoa_r+0x2e0>)
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	3308      	adds	r3, #8
 800662c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	9801      	ldr	r0, [sp, #4]
 8006632:	b013      	add	sp, #76	; 0x4c
 8006634:	ecbd 8b04 	vpop	{d8-d9}
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	4b8b      	ldr	r3, [pc, #556]	; (800686c <_dtoa_r+0x2dc>)
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	3303      	adds	r3, #3
 8006642:	e7f3      	b.n	800662c <_dtoa_r+0x9c>
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7fa fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006650:	ec4b ab19 	vmov	d9, sl, fp
 8006654:	4680      	mov	r8, r0
 8006656:	b158      	cbz	r0, 8006670 <_dtoa_r+0xe0>
 8006658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800665a:	2301      	movs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 856b 	beq.w	800713c <_dtoa_r+0xbac>
 8006666:	4883      	ldr	r0, [pc, #524]	; (8006874 <_dtoa_r+0x2e4>)
 8006668:	6018      	str	r0, [r3, #0]
 800666a:	1e43      	subs	r3, r0, #1
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	e7df      	b.n	8006630 <_dtoa_r+0xa0>
 8006670:	ec4b ab10 	vmov	d0, sl, fp
 8006674:	aa10      	add	r2, sp, #64	; 0x40
 8006676:	a911      	add	r1, sp, #68	; 0x44
 8006678:	4620      	mov	r0, r4
 800667a:	f001 fcf3 	bl	8008064 <__d2b>
 800667e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006682:	ee08 0a10 	vmov	s16, r0
 8006686:	2d00      	cmp	r5, #0
 8006688:	f000 8084 	beq.w	8006794 <_dtoa_r+0x204>
 800668c:	ee19 3a90 	vmov	r3, s19
 8006690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006694:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006698:	4656      	mov	r6, sl
 800669a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800669e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066a6:	4b74      	ldr	r3, [pc, #464]	; (8006878 <_dtoa_r+0x2e8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7f9 fdeb 	bl	8000288 <__aeabi_dsub>
 80066b2:	a365      	add	r3, pc, #404	; (adr r3, 8006848 <_dtoa_r+0x2b8>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80066bc:	a364      	add	r3, pc, #400	; (adr r3, 8006850 <_dtoa_r+0x2c0>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 fde3 	bl	800028c <__adddf3>
 80066c6:	4606      	mov	r6, r0
 80066c8:	4628      	mov	r0, r5
 80066ca:	460f      	mov	r7, r1
 80066cc:	f7f9 ff2a 	bl	8000524 <__aeabi_i2d>
 80066d0:	a361      	add	r3, pc, #388	; (adr r3, 8006858 <_dtoa_r+0x2c8>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 fdd3 	bl	800028c <__adddf3>
 80066e6:	4606      	mov	r6, r0
 80066e8:	460f      	mov	r7, r1
 80066ea:	f7fa fa35 	bl	8000b58 <__aeabi_d2iz>
 80066ee:	2200      	movs	r2, #0
 80066f0:	9000      	str	r0, [sp, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7fa f9f0 	bl	8000adc <__aeabi_dcmplt>
 80066fc:	b150      	cbz	r0, 8006714 <_dtoa_r+0x184>
 80066fe:	9800      	ldr	r0, [sp, #0]
 8006700:	f7f9 ff10 	bl	8000524 <__aeabi_i2d>
 8006704:	4632      	mov	r2, r6
 8006706:	463b      	mov	r3, r7
 8006708:	f7fa f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800670c:	b910      	cbnz	r0, 8006714 <_dtoa_r+0x184>
 800670e:	9b00      	ldr	r3, [sp, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	2b16      	cmp	r3, #22
 8006718:	d85a      	bhi.n	80067d0 <_dtoa_r+0x240>
 800671a:	9a00      	ldr	r2, [sp, #0]
 800671c:	4b57      	ldr	r3, [pc, #348]	; (800687c <_dtoa_r+0x2ec>)
 800671e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	ec51 0b19 	vmov	r0, r1, d9
 800672a:	f7fa f9d7 	bl	8000adc <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d050      	beq.n	80067d4 <_dtoa_r+0x244>
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	3b01      	subs	r3, #1
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	930b      	str	r3, [sp, #44]	; 0x2c
 800673c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800673e:	1b5d      	subs	r5, r3, r5
 8006740:	1e6b      	subs	r3, r5, #1
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	bf45      	ittet	mi
 8006746:	f1c5 0301 	rsbmi	r3, r5, #1
 800674a:	9304      	strmi	r3, [sp, #16]
 800674c:	2300      	movpl	r3, #0
 800674e:	2300      	movmi	r3, #0
 8006750:	bf4c      	ite	mi
 8006752:	9305      	strmi	r3, [sp, #20]
 8006754:	9304      	strpl	r3, [sp, #16]
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db3d      	blt.n	80067d8 <_dtoa_r+0x248>
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	9a00      	ldr	r2, [sp, #0]
 8006760:	920a      	str	r2, [sp, #40]	; 0x28
 8006762:	4413      	add	r3, r2
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	2300      	movs	r3, #0
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	2b09      	cmp	r3, #9
 800676e:	f200 8089 	bhi.w	8006884 <_dtoa_r+0x2f4>
 8006772:	2b05      	cmp	r3, #5
 8006774:	bfc4      	itt	gt
 8006776:	3b04      	subgt	r3, #4
 8006778:	9306      	strgt	r3, [sp, #24]
 800677a:	9b06      	ldr	r3, [sp, #24]
 800677c:	f1a3 0302 	sub.w	r3, r3, #2
 8006780:	bfcc      	ite	gt
 8006782:	2500      	movgt	r5, #0
 8006784:	2501      	movle	r5, #1
 8006786:	2b03      	cmp	r3, #3
 8006788:	f200 8087 	bhi.w	800689a <_dtoa_r+0x30a>
 800678c:	e8df f003 	tbb	[pc, r3]
 8006790:	59383a2d 	.word	0x59383a2d
 8006794:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006798:	441d      	add	r5, r3
 800679a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800679e:	2b20      	cmp	r3, #32
 80067a0:	bfc1      	itttt	gt
 80067a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80067ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067b2:	bfda      	itte	le
 80067b4:	f1c3 0320 	rsble	r3, r3, #32
 80067b8:	fa06 f003 	lslle.w	r0, r6, r3
 80067bc:	4318      	orrgt	r0, r3
 80067be:	f7f9 fea1 	bl	8000504 <__aeabi_ui2d>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4606      	mov	r6, r0
 80067c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067ca:	3d01      	subs	r5, #1
 80067cc:	930e      	str	r3, [sp, #56]	; 0x38
 80067ce:	e76a      	b.n	80066a6 <_dtoa_r+0x116>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e7b2      	b.n	800673a <_dtoa_r+0x1aa>
 80067d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80067d6:	e7b1      	b.n	800673c <_dtoa_r+0x1ac>
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	9a00      	ldr	r2, [sp, #0]
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	4253      	negs	r3, r2
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	2300      	movs	r3, #0
 80067e6:	930a      	str	r3, [sp, #40]	; 0x28
 80067e8:	e7bf      	b.n	800676a <_dtoa_r+0x1da>
 80067ea:	2300      	movs	r3, #0
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc55      	bgt.n	80068a0 <_dtoa_r+0x310>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067fa:	461a      	mov	r2, r3
 80067fc:	9209      	str	r2, [sp, #36]	; 0x24
 80067fe:	e00c      	b.n	800681a <_dtoa_r+0x28a>
 8006800:	2301      	movs	r3, #1
 8006802:	e7f3      	b.n	80067ec <_dtoa_r+0x25c>
 8006804:	2300      	movs	r3, #0
 8006806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	4413      	add	r3, r2
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	3301      	adds	r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	bfb8      	it	lt
 8006818:	2301      	movlt	r3, #1
 800681a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800681c:	2200      	movs	r2, #0
 800681e:	6042      	str	r2, [r0, #4]
 8006820:	2204      	movs	r2, #4
 8006822:	f102 0614 	add.w	r6, r2, #20
 8006826:	429e      	cmp	r6, r3
 8006828:	6841      	ldr	r1, [r0, #4]
 800682a:	d93d      	bls.n	80068a8 <_dtoa_r+0x318>
 800682c:	4620      	mov	r0, r4
 800682e:	f001 f82b 	bl	8007888 <_Balloc>
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2800      	cmp	r0, #0
 8006836:	d13b      	bne.n	80068b0 <_dtoa_r+0x320>
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <_dtoa_r+0x2f0>)
 800683a:	4602      	mov	r2, r0
 800683c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006840:	e6c0      	b.n	80065c4 <_dtoa_r+0x34>
 8006842:	2301      	movs	r3, #1
 8006844:	e7df      	b.n	8006806 <_dtoa_r+0x276>
 8006846:	bf00      	nop
 8006848:	636f4361 	.word	0x636f4361
 800684c:	3fd287a7 	.word	0x3fd287a7
 8006850:	8b60c8b3 	.word	0x8b60c8b3
 8006854:	3fc68a28 	.word	0x3fc68a28
 8006858:	509f79fb 	.word	0x509f79fb
 800685c:	3fd34413 	.word	0x3fd34413
 8006860:	08009b86 	.word	0x08009b86
 8006864:	08009b9d 	.word	0x08009b9d
 8006868:	7ff00000 	.word	0x7ff00000
 800686c:	08009b82 	.word	0x08009b82
 8006870:	08009b79 	.word	0x08009b79
 8006874:	080099fd 	.word	0x080099fd
 8006878:	3ff80000 	.word	0x3ff80000
 800687c:	08009d08 	.word	0x08009d08
 8006880:	08009bf8 	.word	0x08009bf8
 8006884:	2501      	movs	r5, #1
 8006886:	2300      	movs	r3, #0
 8006888:	9306      	str	r3, [sp, #24]
 800688a:	9508      	str	r5, [sp, #32]
 800688c:	f04f 33ff 	mov.w	r3, #4294967295
 8006890:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	2312      	movs	r3, #18
 8006898:	e7b0      	b.n	80067fc <_dtoa_r+0x26c>
 800689a:	2301      	movs	r3, #1
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	e7f5      	b.n	800688c <_dtoa_r+0x2fc>
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068a6:	e7b8      	b.n	800681a <_dtoa_r+0x28a>
 80068a8:	3101      	adds	r1, #1
 80068aa:	6041      	str	r1, [r0, #4]
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	e7b8      	b.n	8006822 <_dtoa_r+0x292>
 80068b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b2:	9a01      	ldr	r2, [sp, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	f200 809d 	bhi.w	80069f8 <_dtoa_r+0x468>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	f000 809a 	beq.w	80069f8 <_dtoa_r+0x468>
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd32      	ble.n	8006930 <_dtoa_r+0x3a0>
 80068ca:	4ab7      	ldr	r2, [pc, #732]	; (8006ba8 <_dtoa_r+0x618>)
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d8:	9b00      	ldr	r3, [sp, #0]
 80068da:	05d8      	lsls	r0, r3, #23
 80068dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068e0:	d516      	bpl.n	8006910 <_dtoa_r+0x380>
 80068e2:	4bb2      	ldr	r3, [pc, #712]	; (8006bac <_dtoa_r+0x61c>)
 80068e4:	ec51 0b19 	vmov	r0, r1, d9
 80068e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ec:	f7f9 ffae 	bl	800084c <__aeabi_ddiv>
 80068f0:	f007 070f 	and.w	r7, r7, #15
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	2503      	movs	r5, #3
 80068fa:	4eac      	ldr	r6, [pc, #688]	; (8006bac <_dtoa_r+0x61c>)
 80068fc:	b957      	cbnz	r7, 8006914 <_dtoa_r+0x384>
 80068fe:	4642      	mov	r2, r8
 8006900:	464b      	mov	r3, r9
 8006902:	4650      	mov	r0, sl
 8006904:	4659      	mov	r1, fp
 8006906:	f7f9 ffa1 	bl	800084c <__aeabi_ddiv>
 800690a:	4682      	mov	sl, r0
 800690c:	468b      	mov	fp, r1
 800690e:	e028      	b.n	8006962 <_dtoa_r+0x3d2>
 8006910:	2502      	movs	r5, #2
 8006912:	e7f2      	b.n	80068fa <_dtoa_r+0x36a>
 8006914:	07f9      	lsls	r1, r7, #31
 8006916:	d508      	bpl.n	800692a <_dtoa_r+0x39a>
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006920:	f7f9 fe6a 	bl	80005f8 <__aeabi_dmul>
 8006924:	3501      	adds	r5, #1
 8006926:	4680      	mov	r8, r0
 8006928:	4689      	mov	r9, r1
 800692a:	107f      	asrs	r7, r7, #1
 800692c:	3608      	adds	r6, #8
 800692e:	e7e5      	b.n	80068fc <_dtoa_r+0x36c>
 8006930:	f000 809b 	beq.w	8006a6a <_dtoa_r+0x4da>
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	4f9d      	ldr	r7, [pc, #628]	; (8006bac <_dtoa_r+0x61c>)
 8006938:	425e      	negs	r6, r3
 800693a:	4b9b      	ldr	r3, [pc, #620]	; (8006ba8 <_dtoa_r+0x618>)
 800693c:	f006 020f 	and.w	r2, r6, #15
 8006940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	ec51 0b19 	vmov	r0, r1, d9
 800694c:	f7f9 fe54 	bl	80005f8 <__aeabi_dmul>
 8006950:	1136      	asrs	r6, r6, #4
 8006952:	4682      	mov	sl, r0
 8006954:	468b      	mov	fp, r1
 8006956:	2300      	movs	r3, #0
 8006958:	2502      	movs	r5, #2
 800695a:	2e00      	cmp	r6, #0
 800695c:	d17a      	bne.n	8006a54 <_dtoa_r+0x4c4>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1d3      	bne.n	800690a <_dtoa_r+0x37a>
 8006962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8082 	beq.w	8006a6e <_dtoa_r+0x4de>
 800696a:	4b91      	ldr	r3, [pc, #580]	; (8006bb0 <_dtoa_r+0x620>)
 800696c:	2200      	movs	r2, #0
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7fa f8b3 	bl	8000adc <__aeabi_dcmplt>
 8006976:	2800      	cmp	r0, #0
 8006978:	d079      	beq.n	8006a6e <_dtoa_r+0x4de>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d076      	beq.n	8006a6e <_dtoa_r+0x4de>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	dd36      	ble.n	80069f4 <_dtoa_r+0x464>
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	4650      	mov	r0, sl
 800698a:	4659      	mov	r1, fp
 800698c:	1e5f      	subs	r7, r3, #1
 800698e:	2200      	movs	r2, #0
 8006990:	4b88      	ldr	r3, [pc, #544]	; (8006bb4 <_dtoa_r+0x624>)
 8006992:	f7f9 fe31 	bl	80005f8 <__aeabi_dmul>
 8006996:	9e02      	ldr	r6, [sp, #8]
 8006998:	4682      	mov	sl, r0
 800699a:	468b      	mov	fp, r1
 800699c:	3501      	adds	r5, #1
 800699e:	4628      	mov	r0, r5
 80069a0:	f7f9 fdc0 	bl	8000524 <__aeabi_i2d>
 80069a4:	4652      	mov	r2, sl
 80069a6:	465b      	mov	r3, fp
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	4b82      	ldr	r3, [pc, #520]	; (8006bb8 <_dtoa_r+0x628>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	f7f9 fc6c 	bl	800028c <__adddf3>
 80069b4:	46d0      	mov	r8, sl
 80069b6:	46d9      	mov	r9, fp
 80069b8:	4682      	mov	sl, r0
 80069ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d158      	bne.n	8006a74 <_dtoa_r+0x4e4>
 80069c2:	4b7e      	ldr	r3, [pc, #504]	; (8006bbc <_dtoa_r+0x62c>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	4640      	mov	r0, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	f7f9 fc5d 	bl	8000288 <__aeabi_dsub>
 80069ce:	4652      	mov	r2, sl
 80069d0:	465b      	mov	r3, fp
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	f7fa f89f 	bl	8000b18 <__aeabi_dcmpgt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 8295 	bne.w	8006f0a <_dtoa_r+0x97a>
 80069e0:	4652      	mov	r2, sl
 80069e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7fa f877 	bl	8000adc <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 8289 	bne.w	8006f06 <_dtoa_r+0x976>
 80069f4:	ec5b ab19 	vmov	sl, fp, d9
 80069f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f2c0 8148 	blt.w	8006c90 <_dtoa_r+0x700>
 8006a00:	9a00      	ldr	r2, [sp, #0]
 8006a02:	2a0e      	cmp	r2, #14
 8006a04:	f300 8144 	bgt.w	8006c90 <_dtoa_r+0x700>
 8006a08:	4b67      	ldr	r3, [pc, #412]	; (8006ba8 <_dtoa_r+0x618>)
 8006a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f280 80d5 	bge.w	8006bc4 <_dtoa_r+0x634>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f300 80d1 	bgt.w	8006bc4 <_dtoa_r+0x634>
 8006a22:	f040 826f 	bne.w	8006f04 <_dtoa_r+0x974>
 8006a26:	4b65      	ldr	r3, [pc, #404]	; (8006bbc <_dtoa_r+0x62c>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	4652      	mov	r2, sl
 8006a34:	465b      	mov	r3, fp
 8006a36:	f7fa f865 	bl	8000b04 <__aeabi_dcmpge>
 8006a3a:	9e03      	ldr	r6, [sp, #12]
 8006a3c:	4637      	mov	r7, r6
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f040 8245 	bne.w	8006ece <_dtoa_r+0x93e>
 8006a44:	9d01      	ldr	r5, [sp, #4]
 8006a46:	2331      	movs	r3, #49	; 0x31
 8006a48:	f805 3b01 	strb.w	r3, [r5], #1
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	e240      	b.n	8006ed6 <_dtoa_r+0x946>
 8006a54:	07f2      	lsls	r2, r6, #31
 8006a56:	d505      	bpl.n	8006a64 <_dtoa_r+0x4d4>
 8006a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	3501      	adds	r5, #1
 8006a62:	2301      	movs	r3, #1
 8006a64:	1076      	asrs	r6, r6, #1
 8006a66:	3708      	adds	r7, #8
 8006a68:	e777      	b.n	800695a <_dtoa_r+0x3ca>
 8006a6a:	2502      	movs	r5, #2
 8006a6c:	e779      	b.n	8006962 <_dtoa_r+0x3d2>
 8006a6e:	9f00      	ldr	r7, [sp, #0]
 8006a70:	9e03      	ldr	r6, [sp, #12]
 8006a72:	e794      	b.n	800699e <_dtoa_r+0x40e>
 8006a74:	9901      	ldr	r1, [sp, #4]
 8006a76:	4b4c      	ldr	r3, [pc, #304]	; (8006ba8 <_dtoa_r+0x618>)
 8006a78:	4431      	add	r1, r6
 8006a7a:	910d      	str	r1, [sp, #52]	; 0x34
 8006a7c:	9908      	ldr	r1, [sp, #32]
 8006a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d043      	beq.n	8006b12 <_dtoa_r+0x582>
 8006a8a:	494d      	ldr	r1, [pc, #308]	; (8006bc0 <_dtoa_r+0x630>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fedd 	bl	800084c <__aeabi_ddiv>
 8006a92:	4652      	mov	r2, sl
 8006a94:	465b      	mov	r3, fp
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	9d01      	ldr	r5, [sp, #4]
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	468b      	mov	fp, r1
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7fa f858 	bl	8000b58 <__aeabi_d2iz>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	f7f9 fd3b 	bl	8000524 <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 fbe7 	bl	8000288 <__aeabi_dsub>
 8006aba:	3630      	adds	r6, #48	; 0x30
 8006abc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	f7fa f808 	bl	8000adc <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d163      	bne.n	8006b98 <_dtoa_r+0x608>
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	4936      	ldr	r1, [pc, #216]	; (8006bb0 <_dtoa_r+0x620>)
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7f9 fbd6 	bl	8000288 <__aeabi_dsub>
 8006adc:	4652      	mov	r2, sl
 8006ade:	465b      	mov	r3, fp
 8006ae0:	f7f9 fffc 	bl	8000adc <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 80b5 	bne.w	8006c54 <_dtoa_r+0x6c4>
 8006aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aec:	429d      	cmp	r5, r3
 8006aee:	d081      	beq.n	80069f4 <_dtoa_r+0x464>
 8006af0:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <_dtoa_r+0x624>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	4650      	mov	r0, sl
 8006af6:	4659      	mov	r1, fp
 8006af8:	f7f9 fd7e 	bl	80005f8 <__aeabi_dmul>
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <_dtoa_r+0x624>)
 8006afe:	4682      	mov	sl, r0
 8006b00:	468b      	mov	fp, r1
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	2200      	movs	r2, #0
 8006b08:	f7f9 fd76 	bl	80005f8 <__aeabi_dmul>
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4689      	mov	r9, r1
 8006b10:	e7c6      	b.n	8006aa0 <_dtoa_r+0x510>
 8006b12:	4650      	mov	r0, sl
 8006b14:	4659      	mov	r1, fp
 8006b16:	f7f9 fd6f 	bl	80005f8 <__aeabi_dmul>
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	9d01      	ldr	r5, [sp, #4]
 8006b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b20:	4682      	mov	sl, r0
 8006b22:	468b      	mov	fp, r1
 8006b24:	4649      	mov	r1, r9
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7fa f816 	bl	8000b58 <__aeabi_d2iz>
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f7f9 fcf9 	bl	8000524 <__aeabi_i2d>
 8006b32:	3630      	adds	r6, #48	; 0x30
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fba4 	bl	8000288 <__aeabi_dsub>
 8006b40:	f805 6b01 	strb.w	r6, [r5], #1
 8006b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b46:	429d      	cmp	r5, r3
 8006b48:	4680      	mov	r8, r0
 8006b4a:	4689      	mov	r9, r1
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	d124      	bne.n	8006b9c <_dtoa_r+0x60c>
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <_dtoa_r+0x630>)
 8006b54:	4650      	mov	r0, sl
 8006b56:	4659      	mov	r1, fp
 8006b58:	f7f9 fb98 	bl	800028c <__adddf3>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7f9 ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d173      	bne.n	8006c54 <_dtoa_r+0x6c4>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4913      	ldr	r1, [pc, #76]	; (8006bc0 <_dtoa_r+0x630>)
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7f9 fb88 	bl	8000288 <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 ffac 	bl	8000adc <__aeabi_dcmplt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f af35 	beq.w	80069f4 <_dtoa_r+0x464>
 8006b8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b8c:	1e6b      	subs	r3, r5, #1
 8006b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b94:	2b30      	cmp	r3, #48	; 0x30
 8006b96:	d0f8      	beq.n	8006b8a <_dtoa_r+0x5fa>
 8006b98:	9700      	str	r7, [sp, #0]
 8006b9a:	e049      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <_dtoa_r+0x624>)
 8006b9e:	f7f9 fd2b 	bl	80005f8 <__aeabi_dmul>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	4689      	mov	r9, r1
 8006ba6:	e7bd      	b.n	8006b24 <_dtoa_r+0x594>
 8006ba8:	08009d08 	.word	0x08009d08
 8006bac:	08009ce0 	.word	0x08009ce0
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	40240000 	.word	0x40240000
 8006bb8:	401c0000 	.word	0x401c0000
 8006bbc:	40140000 	.word	0x40140000
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	9d01      	ldr	r5, [sp, #4]
 8006bc6:	4656      	mov	r6, sl
 8006bc8:	465f      	mov	r7, fp
 8006bca:	4642      	mov	r2, r8
 8006bcc:	464b      	mov	r3, r9
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fe3b 	bl	800084c <__aeabi_ddiv>
 8006bd6:	f7f9 ffbf 	bl	8000b58 <__aeabi_d2iz>
 8006bda:	4682      	mov	sl, r0
 8006bdc:	f7f9 fca2 	bl	8000524 <__aeabi_i2d>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	f7f9 fd08 	bl	80005f8 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bf4:	f7f9 fb48 	bl	8000288 <__aeabi_dsub>
 8006bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bfc:	9e01      	ldr	r6, [sp, #4]
 8006bfe:	9f03      	ldr	r7, [sp, #12]
 8006c00:	1bae      	subs	r6, r5, r6
 8006c02:	42b7      	cmp	r7, r6
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	d135      	bne.n	8006c76 <_dtoa_r+0x6e6>
 8006c0a:	f7f9 fb3f 	bl	800028c <__adddf3>
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	f7f9 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1a:	b9d0      	cbnz	r0, 8006c52 <_dtoa_r+0x6c2>
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c28:	b110      	cbz	r0, 8006c30 <_dtoa_r+0x6a0>
 8006c2a:	f01a 0f01 	tst.w	sl, #1
 8006c2e:	d110      	bne.n	8006c52 <_dtoa_r+0x6c2>
 8006c30:	4620      	mov	r0, r4
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	f000 fe67 	bl	8007908 <_Bfree>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9800      	ldr	r0, [sp, #0]
 8006c3e:	702b      	strb	r3, [r5, #0]
 8006c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c42:	3001      	adds	r0, #1
 8006c44:	6018      	str	r0, [r3, #0]
 8006c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f43f acf1 	beq.w	8006630 <_dtoa_r+0xa0>
 8006c4e:	601d      	str	r5, [r3, #0]
 8006c50:	e4ee      	b.n	8006630 <_dtoa_r+0xa0>
 8006c52:	9f00      	ldr	r7, [sp, #0]
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a39      	cmp	r2, #57	; 0x39
 8006c5e:	d106      	bne.n	8006c6e <_dtoa_r+0x6de>
 8006c60:	9a01      	ldr	r2, [sp, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d1f7      	bne.n	8006c56 <_dtoa_r+0x6c6>
 8006c66:	9901      	ldr	r1, [sp, #4]
 8006c68:	2230      	movs	r2, #48	; 0x30
 8006c6a:	3701      	adds	r7, #1
 8006c6c:	700a      	strb	r2, [r1, #0]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	3201      	adds	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e790      	b.n	8006b98 <_dtoa_r+0x608>
 8006c76:	4ba6      	ldr	r3, [pc, #664]	; (8006f10 <_dtoa_r+0x980>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f7f9 fcbd 	bl	80005f8 <__aeabi_dmul>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	f7f9 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d09d      	beq.n	8006bca <_dtoa_r+0x63a>
 8006c8e:	e7cf      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006c90:	9a08      	ldr	r2, [sp, #32]
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	f000 80d7 	beq.w	8006e46 <_dtoa_r+0x8b6>
 8006c98:	9a06      	ldr	r2, [sp, #24]
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	f300 80ba 	bgt.w	8006e14 <_dtoa_r+0x884>
 8006ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	f000 80b2 	beq.w	8006e0c <_dtoa_r+0x87c>
 8006ca8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cac:	9e07      	ldr	r6, [sp, #28]
 8006cae:	9d04      	ldr	r5, [sp, #16]
 8006cb0:	9a04      	ldr	r2, [sp, #16]
 8006cb2:	441a      	add	r2, r3
 8006cb4:	9204      	str	r2, [sp, #16]
 8006cb6:	9a05      	ldr	r2, [sp, #20]
 8006cb8:	2101      	movs	r1, #1
 8006cba:	441a      	add	r2, r3
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	f000 ff24 	bl	8007b0c <__i2b>
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	dd0c      	ble.n	8006ce4 <_dtoa_r+0x754>
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <_dtoa_r+0x754>
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	bfa8      	it	ge
 8006cd6:	462b      	movge	r3, r5
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	9204      	str	r2, [sp, #16]
 8006cdc:	9a05      	ldr	r2, [sp, #20]
 8006cde:	1aed      	subs	r5, r5, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	b31b      	cbz	r3, 8006d30 <_dtoa_r+0x7a0>
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80af 	beq.w	8006e4e <_dtoa_r+0x8be>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	dd13      	ble.n	8006d1c <_dtoa_r+0x78c>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 ffc7 	bl	8007c8c <__pow5mult>
 8006cfe:	ee18 2a10 	vmov	r2, s16
 8006d02:	4601      	mov	r1, r0
 8006d04:	4607      	mov	r7, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 ff16 	bl	8007b38 <__multiply>
 8006d0c:	ee18 1a10 	vmov	r1, s16
 8006d10:	4680      	mov	r8, r0
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 fdf8 	bl	8007908 <_Bfree>
 8006d18:	ee08 8a10 	vmov	s16, r8
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	1b9a      	subs	r2, r3, r6
 8006d20:	d006      	beq.n	8006d30 <_dtoa_r+0x7a0>
 8006d22:	ee18 1a10 	vmov	r1, s16
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 ffb0 	bl	8007c8c <__pow5mult>
 8006d2c:	ee08 0a10 	vmov	s16, r0
 8006d30:	2101      	movs	r1, #1
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 feea 	bl	8007b0c <__i2b>
 8006d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	f340 8088 	ble.w	8006e52 <_dtoa_r+0x8c2>
 8006d42:	461a      	mov	r2, r3
 8006d44:	4601      	mov	r1, r0
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 ffa0 	bl	8007c8c <__pow5mult>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	4606      	mov	r6, r0
 8006d52:	f340 8081 	ble.w	8006e58 <_dtoa_r+0x8c8>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	6933      	ldr	r3, [r6, #16]
 8006d5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d60:	6918      	ldr	r0, [r3, #16]
 8006d62:	f000 fe83 	bl	8007a6c <__hi0bits>
 8006d66:	f1c0 0020 	rsb	r0, r0, #32
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	4418      	add	r0, r3
 8006d6e:	f010 001f 	ands.w	r0, r0, #31
 8006d72:	f000 8092 	beq.w	8006e9a <_dtoa_r+0x90a>
 8006d76:	f1c0 0320 	rsb	r3, r0, #32
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	f340 808a 	ble.w	8006e94 <_dtoa_r+0x904>
 8006d80:	f1c0 001c 	rsb	r0, r0, #28
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	4403      	add	r3, r0
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	4403      	add	r3, r0
 8006d8e:	4405      	add	r5, r0
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd07      	ble.n	8006da8 <_dtoa_r+0x818>
 8006d98:	ee18 1a10 	vmov	r1, s16
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 ffce 	bl	8007d40 <__lshift>
 8006da4:	ee08 0a10 	vmov	s16, r0
 8006da8:	9b05      	ldr	r3, [sp, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dd05      	ble.n	8006dba <_dtoa_r+0x82a>
 8006dae:	4631      	mov	r1, r6
 8006db0:	461a      	mov	r2, r3
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 ffc4 	bl	8007d40 <__lshift>
 8006db8:	4606      	mov	r6, r0
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06e      	beq.n	8006e9e <_dtoa_r+0x90e>
 8006dc0:	ee18 0a10 	vmov	r0, s16
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	f001 f82b 	bl	8007e20 <__mcmp>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	da67      	bge.n	8006e9e <_dtoa_r+0x90e>
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	ee18 1a10 	vmov	r1, s16
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	220a      	movs	r2, #10
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fdb5 	bl	800794c <__multadd>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	ee08 0a10 	vmov	s16, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 81b1 	beq.w	8007150 <_dtoa_r+0xbc0>
 8006dee:	2300      	movs	r3, #0
 8006df0:	4639      	mov	r1, r7
 8006df2:	220a      	movs	r2, #10
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fda9 	bl	800794c <__multadd>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	4607      	mov	r7, r0
 8006e00:	f300 808e 	bgt.w	8006f20 <_dtoa_r+0x990>
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	dc51      	bgt.n	8006eae <_dtoa_r+0x91e>
 8006e0a:	e089      	b.n	8006f20 <_dtoa_r+0x990>
 8006e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e12:	e74b      	b.n	8006cac <_dtoa_r+0x71c>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	1e5e      	subs	r6, r3, #1
 8006e18:	9b07      	ldr	r3, [sp, #28]
 8006e1a:	42b3      	cmp	r3, r6
 8006e1c:	bfbf      	itttt	lt
 8006e1e:	9b07      	ldrlt	r3, [sp, #28]
 8006e20:	9607      	strlt	r6, [sp, #28]
 8006e22:	1af2      	sublt	r2, r6, r3
 8006e24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e26:	bfb6      	itet	lt
 8006e28:	189b      	addlt	r3, r3, r2
 8006e2a:	1b9e      	subge	r6, r3, r6
 8006e2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	bfb8      	it	lt
 8006e32:	2600      	movlt	r6, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfb7      	itett	lt
 8006e38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e40:	1a9d      	sublt	r5, r3, r2
 8006e42:	2300      	movlt	r3, #0
 8006e44:	e734      	b.n	8006cb0 <_dtoa_r+0x720>
 8006e46:	9e07      	ldr	r6, [sp, #28]
 8006e48:	9d04      	ldr	r5, [sp, #16]
 8006e4a:	9f08      	ldr	r7, [sp, #32]
 8006e4c:	e73b      	b.n	8006cc6 <_dtoa_r+0x736>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	e767      	b.n	8006d22 <_dtoa_r+0x792>
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	dc18      	bgt.n	8006e8a <_dtoa_r+0x8fa>
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d115      	bne.n	8006e8a <_dtoa_r+0x8fa>
 8006e5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e62:	b993      	cbnz	r3, 8006e8a <_dtoa_r+0x8fa>
 8006e64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e68:	0d1b      	lsrs	r3, r3, #20
 8006e6a:	051b      	lsls	r3, r3, #20
 8006e6c:	b183      	cbz	r3, 8006e90 <_dtoa_r+0x900>
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	9b05      	ldr	r3, [sp, #20]
 8006e76:	3301      	adds	r3, #1
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	f04f 0801 	mov.w	r8, #1
 8006e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af6a 	bne.w	8006d5a <_dtoa_r+0x7ca>
 8006e86:	2001      	movs	r0, #1
 8006e88:	e76f      	b.n	8006d6a <_dtoa_r+0x7da>
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	e7f6      	b.n	8006e7e <_dtoa_r+0x8ee>
 8006e90:	4698      	mov	r8, r3
 8006e92:	e7f4      	b.n	8006e7e <_dtoa_r+0x8ee>
 8006e94:	f43f af7d 	beq.w	8006d92 <_dtoa_r+0x802>
 8006e98:	4618      	mov	r0, r3
 8006e9a:	301c      	adds	r0, #28
 8006e9c:	e772      	b.n	8006d84 <_dtoa_r+0x7f4>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc37      	bgt.n	8006f14 <_dtoa_r+0x984>
 8006ea4:	9b06      	ldr	r3, [sp, #24]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	dd34      	ble.n	8006f14 <_dtoa_r+0x984>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	9302      	str	r3, [sp, #8]
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	b96b      	cbnz	r3, 8006ece <_dtoa_r+0x93e>
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 fd48 	bl	800794c <__multadd>
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	ee18 0a10 	vmov	r0, s16
 8006ec4:	f000 ffac 	bl	8007e20 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f73f adbb 	bgt.w	8006a44 <_dtoa_r+0x4b4>
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	9d01      	ldr	r5, [sp, #4]
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	4631      	mov	r1, r6
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fd13 	bl	8007908 <_Bfree>
 8006ee2:	2f00      	cmp	r7, #0
 8006ee4:	f43f aea4 	beq.w	8006c30 <_dtoa_r+0x6a0>
 8006ee8:	f1b8 0f00 	cmp.w	r8, #0
 8006eec:	d005      	beq.n	8006efa <_dtoa_r+0x96a>
 8006eee:	45b8      	cmp	r8, r7
 8006ef0:	d003      	beq.n	8006efa <_dtoa_r+0x96a>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fd07 	bl	8007908 <_Bfree>
 8006efa:	4639      	mov	r1, r7
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fd03 	bl	8007908 <_Bfree>
 8006f02:	e695      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006f04:	2600      	movs	r6, #0
 8006f06:	4637      	mov	r7, r6
 8006f08:	e7e1      	b.n	8006ece <_dtoa_r+0x93e>
 8006f0a:	9700      	str	r7, [sp, #0]
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	e599      	b.n	8006a44 <_dtoa_r+0x4b4>
 8006f10:	40240000 	.word	0x40240000
 8006f14:	9b08      	ldr	r3, [sp, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80ca 	beq.w	80070b0 <_dtoa_r+0xb20>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	dd05      	ble.n	8006f30 <_dtoa_r+0x9a0>
 8006f24:	4639      	mov	r1, r7
 8006f26:	462a      	mov	r2, r5
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 ff09 	bl	8007d40 <__lshift>
 8006f2e:	4607      	mov	r7, r0
 8006f30:	f1b8 0f00 	cmp.w	r8, #0
 8006f34:	d05b      	beq.n	8006fee <_dtoa_r+0xa5e>
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fca5 	bl	8007888 <_Balloc>
 8006f3e:	4605      	mov	r5, r0
 8006f40:	b928      	cbnz	r0, 8006f4e <_dtoa_r+0x9be>
 8006f42:	4b87      	ldr	r3, [pc, #540]	; (8007160 <_dtoa_r+0xbd0>)
 8006f44:	4602      	mov	r2, r0
 8006f46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f4a:	f7ff bb3b 	b.w	80065c4 <_dtoa_r+0x34>
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	3202      	adds	r2, #2
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	f107 010c 	add.w	r1, r7, #12
 8006f58:	300c      	adds	r0, #12
 8006f5a:	f7fd fd0b 	bl	8004974 <memcpy>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4629      	mov	r1, r5
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 feec 	bl	8007d40 <__lshift>
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	f103 0901 	add.w	r9, r3, #1
 8006f6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	f00a 0301 	and.w	r3, sl, #1
 8006f7a:	46b8      	mov	r8, r7
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4631      	mov	r1, r6
 8006f82:	ee18 0a10 	vmov	r0, s16
 8006f86:	f7ff fa77 	bl	8006478 <quorem>
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f92:	ee18 0a10 	vmov	r0, s16
 8006f96:	f000 ff43 	bl	8007e20 <__mcmp>
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	9003      	str	r0, [sp, #12]
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 ff59 	bl	8007e58 <__mdiff>
 8006fa6:	68c2      	ldr	r2, [r0, #12]
 8006fa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006fac:	4605      	mov	r5, r0
 8006fae:	bb02      	cbnz	r2, 8006ff2 <_dtoa_r+0xa62>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	ee18 0a10 	vmov	r0, s16
 8006fb6:	f000 ff33 	bl	8007e20 <__mcmp>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	9207      	str	r2, [sp, #28]
 8006fc2:	f000 fca1 	bl	8007908 <_Bfree>
 8006fc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fca:	ea43 0102 	orr.w	r1, r3, r2
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	464d      	mov	r5, r9
 8006fd4:	d10f      	bne.n	8006ff6 <_dtoa_r+0xa66>
 8006fd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fda:	d02a      	beq.n	8007032 <_dtoa_r+0xaa2>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dd02      	ble.n	8006fe8 <_dtoa_r+0xa58>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fe8:	f88b a000 	strb.w	sl, [fp]
 8006fec:	e775      	b.n	8006eda <_dtoa_r+0x94a>
 8006fee:	4638      	mov	r0, r7
 8006ff0:	e7ba      	b.n	8006f68 <_dtoa_r+0x9d8>
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	e7e2      	b.n	8006fbc <_dtoa_r+0xa2c>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db04      	blt.n	8007006 <_dtoa_r+0xa76>
 8006ffc:	9906      	ldr	r1, [sp, #24]
 8006ffe:	430b      	orrs	r3, r1
 8007000:	9904      	ldr	r1, [sp, #16]
 8007002:	430b      	orrs	r3, r1
 8007004:	d122      	bne.n	800704c <_dtoa_r+0xabc>
 8007006:	2a00      	cmp	r2, #0
 8007008:	ddee      	ble.n	8006fe8 <_dtoa_r+0xa58>
 800700a:	ee18 1a10 	vmov	r1, s16
 800700e:	2201      	movs	r2, #1
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fe95 	bl	8007d40 <__lshift>
 8007016:	4631      	mov	r1, r6
 8007018:	ee08 0a10 	vmov	s16, r0
 800701c:	f000 ff00 	bl	8007e20 <__mcmp>
 8007020:	2800      	cmp	r0, #0
 8007022:	dc03      	bgt.n	800702c <_dtoa_r+0xa9c>
 8007024:	d1e0      	bne.n	8006fe8 <_dtoa_r+0xa58>
 8007026:	f01a 0f01 	tst.w	sl, #1
 800702a:	d0dd      	beq.n	8006fe8 <_dtoa_r+0xa58>
 800702c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007030:	d1d7      	bne.n	8006fe2 <_dtoa_r+0xa52>
 8007032:	2339      	movs	r3, #57	; 0x39
 8007034:	f88b 3000 	strb.w	r3, [fp]
 8007038:	462b      	mov	r3, r5
 800703a:	461d      	mov	r5, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007042:	2a39      	cmp	r2, #57	; 0x39
 8007044:	d071      	beq.n	800712a <_dtoa_r+0xb9a>
 8007046:	3201      	adds	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e746      	b.n	8006eda <_dtoa_r+0x94a>
 800704c:	2a00      	cmp	r2, #0
 800704e:	dd07      	ble.n	8007060 <_dtoa_r+0xad0>
 8007050:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007054:	d0ed      	beq.n	8007032 <_dtoa_r+0xaa2>
 8007056:	f10a 0301 	add.w	r3, sl, #1
 800705a:	f88b 3000 	strb.w	r3, [fp]
 800705e:	e73c      	b.n	8006eda <_dtoa_r+0x94a>
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007066:	4599      	cmp	r9, r3
 8007068:	d047      	beq.n	80070fa <_dtoa_r+0xb6a>
 800706a:	ee18 1a10 	vmov	r1, s16
 800706e:	2300      	movs	r3, #0
 8007070:	220a      	movs	r2, #10
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fc6a 	bl	800794c <__multadd>
 8007078:	45b8      	cmp	r8, r7
 800707a:	ee08 0a10 	vmov	s16, r0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	f04f 020a 	mov.w	r2, #10
 8007086:	4641      	mov	r1, r8
 8007088:	4620      	mov	r0, r4
 800708a:	d106      	bne.n	800709a <_dtoa_r+0xb0a>
 800708c:	f000 fc5e 	bl	800794c <__multadd>
 8007090:	4680      	mov	r8, r0
 8007092:	4607      	mov	r7, r0
 8007094:	f109 0901 	add.w	r9, r9, #1
 8007098:	e772      	b.n	8006f80 <_dtoa_r+0x9f0>
 800709a:	f000 fc57 	bl	800794c <__multadd>
 800709e:	4639      	mov	r1, r7
 80070a0:	4680      	mov	r8, r0
 80070a2:	2300      	movs	r3, #0
 80070a4:	220a      	movs	r2, #10
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fc50 	bl	800794c <__multadd>
 80070ac:	4607      	mov	r7, r0
 80070ae:	e7f1      	b.n	8007094 <_dtoa_r+0xb04>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	9d01      	ldr	r5, [sp, #4]
 80070b6:	ee18 0a10 	vmov	r0, s16
 80070ba:	4631      	mov	r1, r6
 80070bc:	f7ff f9dc 	bl	8006478 <quorem>
 80070c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	f805 ab01 	strb.w	sl, [r5], #1
 80070ca:	1aea      	subs	r2, r5, r3
 80070cc:	9b02      	ldr	r3, [sp, #8]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	dd09      	ble.n	80070e6 <_dtoa_r+0xb56>
 80070d2:	ee18 1a10 	vmov	r1, s16
 80070d6:	2300      	movs	r3, #0
 80070d8:	220a      	movs	r2, #10
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fc36 	bl	800794c <__multadd>
 80070e0:	ee08 0a10 	vmov	s16, r0
 80070e4:	e7e7      	b.n	80070b6 <_dtoa_r+0xb26>
 80070e6:	9b02      	ldr	r3, [sp, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfc8      	it	gt
 80070ec:	461d      	movgt	r5, r3
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	bfd8      	it	le
 80070f2:	2501      	movle	r5, #1
 80070f4:	441d      	add	r5, r3
 80070f6:	f04f 0800 	mov.w	r8, #0
 80070fa:	ee18 1a10 	vmov	r1, s16
 80070fe:	2201      	movs	r2, #1
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fe1d 	bl	8007d40 <__lshift>
 8007106:	4631      	mov	r1, r6
 8007108:	ee08 0a10 	vmov	s16, r0
 800710c:	f000 fe88 	bl	8007e20 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	dc91      	bgt.n	8007038 <_dtoa_r+0xaa8>
 8007114:	d102      	bne.n	800711c <_dtoa_r+0xb8c>
 8007116:	f01a 0f01 	tst.w	sl, #1
 800711a:	d18d      	bne.n	8007038 <_dtoa_r+0xaa8>
 800711c:	462b      	mov	r3, r5
 800711e:	461d      	mov	r5, r3
 8007120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007124:	2a30      	cmp	r2, #48	; 0x30
 8007126:	d0fa      	beq.n	800711e <_dtoa_r+0xb8e>
 8007128:	e6d7      	b.n	8006eda <_dtoa_r+0x94a>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d184      	bne.n	800703a <_dtoa_r+0xaaa>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2331      	movs	r3, #49	; 0x31
 8007138:	7013      	strb	r3, [r2, #0]
 800713a:	e6ce      	b.n	8006eda <_dtoa_r+0x94a>
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <_dtoa_r+0xbd4>)
 800713e:	f7ff ba95 	b.w	800666c <_dtoa_r+0xdc>
 8007142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007144:	2b00      	cmp	r3, #0
 8007146:	f47f aa6e 	bne.w	8006626 <_dtoa_r+0x96>
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <_dtoa_r+0xbd8>)
 800714c:	f7ff ba8e 	b.w	800666c <_dtoa_r+0xdc>
 8007150:	9b02      	ldr	r3, [sp, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dcae      	bgt.n	80070b4 <_dtoa_r+0xb24>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f73f aea8 	bgt.w	8006eae <_dtoa_r+0x91e>
 800715e:	e7a9      	b.n	80070b4 <_dtoa_r+0xb24>
 8007160:	08009bf8 	.word	0x08009bf8
 8007164:	080099fc 	.word	0x080099fc
 8007168:	08009b79 	.word	0x08009b79

0800716c <rshift>:
 800716c:	6903      	ldr	r3, [r0, #16]
 800716e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007172:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007176:	ea4f 1261 	mov.w	r2, r1, asr #5
 800717a:	f100 0414 	add.w	r4, r0, #20
 800717e:	dd45      	ble.n	800720c <rshift+0xa0>
 8007180:	f011 011f 	ands.w	r1, r1, #31
 8007184:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007188:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800718c:	d10c      	bne.n	80071a8 <rshift+0x3c>
 800718e:	f100 0710 	add.w	r7, r0, #16
 8007192:	4629      	mov	r1, r5
 8007194:	42b1      	cmp	r1, r6
 8007196:	d334      	bcc.n	8007202 <rshift+0x96>
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	1eea      	subs	r2, r5, #3
 800719e:	4296      	cmp	r6, r2
 80071a0:	bf38      	it	cc
 80071a2:	2300      	movcc	r3, #0
 80071a4:	4423      	add	r3, r4
 80071a6:	e015      	b.n	80071d4 <rshift+0x68>
 80071a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ac:	f1c1 0820 	rsb	r8, r1, #32
 80071b0:	40cf      	lsrs	r7, r1
 80071b2:	f105 0e04 	add.w	lr, r5, #4
 80071b6:	46a1      	mov	r9, r4
 80071b8:	4576      	cmp	r6, lr
 80071ba:	46f4      	mov	ip, lr
 80071bc:	d815      	bhi.n	80071ea <rshift+0x7e>
 80071be:	1a9a      	subs	r2, r3, r2
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	3a04      	subs	r2, #4
 80071c4:	3501      	adds	r5, #1
 80071c6:	42ae      	cmp	r6, r5
 80071c8:	bf38      	it	cc
 80071ca:	2200      	movcc	r2, #0
 80071cc:	18a3      	adds	r3, r4, r2
 80071ce:	50a7      	str	r7, [r4, r2]
 80071d0:	b107      	cbz	r7, 80071d4 <rshift+0x68>
 80071d2:	3304      	adds	r3, #4
 80071d4:	1b1a      	subs	r2, r3, r4
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071dc:	bf08      	it	eq
 80071de:	2300      	moveq	r3, #0
 80071e0:	6102      	str	r2, [r0, #16]
 80071e2:	bf08      	it	eq
 80071e4:	6143      	streq	r3, [r0, #20]
 80071e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ea:	f8dc c000 	ldr.w	ip, [ip]
 80071ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80071f2:	ea4c 0707 	orr.w	r7, ip, r7
 80071f6:	f849 7b04 	str.w	r7, [r9], #4
 80071fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071fe:	40cf      	lsrs	r7, r1
 8007200:	e7da      	b.n	80071b8 <rshift+0x4c>
 8007202:	f851 cb04 	ldr.w	ip, [r1], #4
 8007206:	f847 cf04 	str.w	ip, [r7, #4]!
 800720a:	e7c3      	b.n	8007194 <rshift+0x28>
 800720c:	4623      	mov	r3, r4
 800720e:	e7e1      	b.n	80071d4 <rshift+0x68>

08007210 <__hexdig_fun>:
 8007210:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007214:	2b09      	cmp	r3, #9
 8007216:	d802      	bhi.n	800721e <__hexdig_fun+0xe>
 8007218:	3820      	subs	r0, #32
 800721a:	b2c0      	uxtb	r0, r0
 800721c:	4770      	bx	lr
 800721e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007222:	2b05      	cmp	r3, #5
 8007224:	d801      	bhi.n	800722a <__hexdig_fun+0x1a>
 8007226:	3847      	subs	r0, #71	; 0x47
 8007228:	e7f7      	b.n	800721a <__hexdig_fun+0xa>
 800722a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800722e:	2b05      	cmp	r3, #5
 8007230:	d801      	bhi.n	8007236 <__hexdig_fun+0x26>
 8007232:	3827      	subs	r0, #39	; 0x27
 8007234:	e7f1      	b.n	800721a <__hexdig_fun+0xa>
 8007236:	2000      	movs	r0, #0
 8007238:	4770      	bx	lr
	...

0800723c <__gethex>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	ed2d 8b02 	vpush	{d8}
 8007244:	b089      	sub	sp, #36	; 0x24
 8007246:	ee08 0a10 	vmov	s16, r0
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	4bb4      	ldr	r3, [pc, #720]	; (8007520 <__gethex+0x2e4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	468b      	mov	fp, r1
 8007256:	4690      	mov	r8, r2
 8007258:	f7f8 ffba 	bl	80001d0 <strlen>
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	f8db 2000 	ldr.w	r2, [fp]
 8007262:	4403      	add	r3, r0
 8007264:	4682      	mov	sl, r0
 8007266:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	1c93      	adds	r3, r2, #2
 800726e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007272:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007276:	32fe      	adds	r2, #254	; 0xfe
 8007278:	18d1      	adds	r1, r2, r3
 800727a:	461f      	mov	r7, r3
 800727c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007280:	9100      	str	r1, [sp, #0]
 8007282:	2830      	cmp	r0, #48	; 0x30
 8007284:	d0f8      	beq.n	8007278 <__gethex+0x3c>
 8007286:	f7ff ffc3 	bl	8007210 <__hexdig_fun>
 800728a:	4604      	mov	r4, r0
 800728c:	2800      	cmp	r0, #0
 800728e:	d13a      	bne.n	8007306 <__gethex+0xca>
 8007290:	9901      	ldr	r1, [sp, #4]
 8007292:	4652      	mov	r2, sl
 8007294:	4638      	mov	r0, r7
 8007296:	f001 fa23 	bl	80086e0 <strncmp>
 800729a:	4605      	mov	r5, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	d168      	bne.n	8007372 <__gethex+0x136>
 80072a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80072a4:	eb07 060a 	add.w	r6, r7, sl
 80072a8:	f7ff ffb2 	bl	8007210 <__hexdig_fun>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d062      	beq.n	8007376 <__gethex+0x13a>
 80072b0:	4633      	mov	r3, r6
 80072b2:	7818      	ldrb	r0, [r3, #0]
 80072b4:	2830      	cmp	r0, #48	; 0x30
 80072b6:	461f      	mov	r7, r3
 80072b8:	f103 0301 	add.w	r3, r3, #1
 80072bc:	d0f9      	beq.n	80072b2 <__gethex+0x76>
 80072be:	f7ff ffa7 	bl	8007210 <__hexdig_fun>
 80072c2:	2301      	movs	r3, #1
 80072c4:	fab0 f480 	clz	r4, r0
 80072c8:	0964      	lsrs	r4, r4, #5
 80072ca:	4635      	mov	r5, r6
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	463a      	mov	r2, r7
 80072d0:	4616      	mov	r6, r2
 80072d2:	3201      	adds	r2, #1
 80072d4:	7830      	ldrb	r0, [r6, #0]
 80072d6:	f7ff ff9b 	bl	8007210 <__hexdig_fun>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d1f8      	bne.n	80072d0 <__gethex+0x94>
 80072de:	9901      	ldr	r1, [sp, #4]
 80072e0:	4652      	mov	r2, sl
 80072e2:	4630      	mov	r0, r6
 80072e4:	f001 f9fc 	bl	80086e0 <strncmp>
 80072e8:	b980      	cbnz	r0, 800730c <__gethex+0xd0>
 80072ea:	b94d      	cbnz	r5, 8007300 <__gethex+0xc4>
 80072ec:	eb06 050a 	add.w	r5, r6, sl
 80072f0:	462a      	mov	r2, r5
 80072f2:	4616      	mov	r6, r2
 80072f4:	3201      	adds	r2, #1
 80072f6:	7830      	ldrb	r0, [r6, #0]
 80072f8:	f7ff ff8a 	bl	8007210 <__hexdig_fun>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d1f8      	bne.n	80072f2 <__gethex+0xb6>
 8007300:	1bad      	subs	r5, r5, r6
 8007302:	00ad      	lsls	r5, r5, #2
 8007304:	e004      	b.n	8007310 <__gethex+0xd4>
 8007306:	2400      	movs	r4, #0
 8007308:	4625      	mov	r5, r4
 800730a:	e7e0      	b.n	80072ce <__gethex+0x92>
 800730c:	2d00      	cmp	r5, #0
 800730e:	d1f7      	bne.n	8007300 <__gethex+0xc4>
 8007310:	7833      	ldrb	r3, [r6, #0]
 8007312:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007316:	2b50      	cmp	r3, #80	; 0x50
 8007318:	d13b      	bne.n	8007392 <__gethex+0x156>
 800731a:	7873      	ldrb	r3, [r6, #1]
 800731c:	2b2b      	cmp	r3, #43	; 0x2b
 800731e:	d02c      	beq.n	800737a <__gethex+0x13e>
 8007320:	2b2d      	cmp	r3, #45	; 0x2d
 8007322:	d02e      	beq.n	8007382 <__gethex+0x146>
 8007324:	1c71      	adds	r1, r6, #1
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	7808      	ldrb	r0, [r1, #0]
 800732c:	f7ff ff70 	bl	8007210 <__hexdig_fun>
 8007330:	1e43      	subs	r3, r0, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b18      	cmp	r3, #24
 8007336:	d82c      	bhi.n	8007392 <__gethex+0x156>
 8007338:	f1a0 0210 	sub.w	r2, r0, #16
 800733c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007340:	f7ff ff66 	bl	8007210 <__hexdig_fun>
 8007344:	1e43      	subs	r3, r0, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b18      	cmp	r3, #24
 800734a:	d91d      	bls.n	8007388 <__gethex+0x14c>
 800734c:	f1b9 0f00 	cmp.w	r9, #0
 8007350:	d000      	beq.n	8007354 <__gethex+0x118>
 8007352:	4252      	negs	r2, r2
 8007354:	4415      	add	r5, r2
 8007356:	f8cb 1000 	str.w	r1, [fp]
 800735a:	b1e4      	cbz	r4, 8007396 <__gethex+0x15a>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	bf14      	ite	ne
 8007362:	2700      	movne	r7, #0
 8007364:	2706      	moveq	r7, #6
 8007366:	4638      	mov	r0, r7
 8007368:	b009      	add	sp, #36	; 0x24
 800736a:	ecbd 8b02 	vpop	{d8}
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	463e      	mov	r6, r7
 8007374:	4625      	mov	r5, r4
 8007376:	2401      	movs	r4, #1
 8007378:	e7ca      	b.n	8007310 <__gethex+0xd4>
 800737a:	f04f 0900 	mov.w	r9, #0
 800737e:	1cb1      	adds	r1, r6, #2
 8007380:	e7d3      	b.n	800732a <__gethex+0xee>
 8007382:	f04f 0901 	mov.w	r9, #1
 8007386:	e7fa      	b.n	800737e <__gethex+0x142>
 8007388:	230a      	movs	r3, #10
 800738a:	fb03 0202 	mla	r2, r3, r2, r0
 800738e:	3a10      	subs	r2, #16
 8007390:	e7d4      	b.n	800733c <__gethex+0x100>
 8007392:	4631      	mov	r1, r6
 8007394:	e7df      	b.n	8007356 <__gethex+0x11a>
 8007396:	1bf3      	subs	r3, r6, r7
 8007398:	3b01      	subs	r3, #1
 800739a:	4621      	mov	r1, r4
 800739c:	2b07      	cmp	r3, #7
 800739e:	dc0b      	bgt.n	80073b8 <__gethex+0x17c>
 80073a0:	ee18 0a10 	vmov	r0, s16
 80073a4:	f000 fa70 	bl	8007888 <_Balloc>
 80073a8:	4604      	mov	r4, r0
 80073aa:	b940      	cbnz	r0, 80073be <__gethex+0x182>
 80073ac:	4b5d      	ldr	r3, [pc, #372]	; (8007524 <__gethex+0x2e8>)
 80073ae:	4602      	mov	r2, r0
 80073b0:	21de      	movs	r1, #222	; 0xde
 80073b2:	485d      	ldr	r0, [pc, #372]	; (8007528 <__gethex+0x2ec>)
 80073b4:	f001 f9b6 	bl	8008724 <__assert_func>
 80073b8:	3101      	adds	r1, #1
 80073ba:	105b      	asrs	r3, r3, #1
 80073bc:	e7ee      	b.n	800739c <__gethex+0x160>
 80073be:	f100 0914 	add.w	r9, r0, #20
 80073c2:	f04f 0b00 	mov.w	fp, #0
 80073c6:	f1ca 0301 	rsb	r3, sl, #1
 80073ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80073ce:	f8cd b000 	str.w	fp, [sp]
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	42b7      	cmp	r7, r6
 80073d6:	d340      	bcc.n	800745a <__gethex+0x21e>
 80073d8:	9802      	ldr	r0, [sp, #8]
 80073da:	9b00      	ldr	r3, [sp, #0]
 80073dc:	f840 3b04 	str.w	r3, [r0], #4
 80073e0:	eba0 0009 	sub.w	r0, r0, r9
 80073e4:	1080      	asrs	r0, r0, #2
 80073e6:	0146      	lsls	r6, r0, #5
 80073e8:	6120      	str	r0, [r4, #16]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fb3e 	bl	8007a6c <__hi0bits>
 80073f0:	1a30      	subs	r0, r6, r0
 80073f2:	f8d8 6000 	ldr.w	r6, [r8]
 80073f6:	42b0      	cmp	r0, r6
 80073f8:	dd63      	ble.n	80074c2 <__gethex+0x286>
 80073fa:	1b87      	subs	r7, r0, r6
 80073fc:	4639      	mov	r1, r7
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 fee2 	bl	80081c8 <__any_on>
 8007404:	4682      	mov	sl, r0
 8007406:	b1a8      	cbz	r0, 8007434 <__gethex+0x1f8>
 8007408:	1e7b      	subs	r3, r7, #1
 800740a:	1159      	asrs	r1, r3, #5
 800740c:	f003 021f 	and.w	r2, r3, #31
 8007410:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007414:	f04f 0a01 	mov.w	sl, #1
 8007418:	fa0a f202 	lsl.w	r2, sl, r2
 800741c:	420a      	tst	r2, r1
 800741e:	d009      	beq.n	8007434 <__gethex+0x1f8>
 8007420:	4553      	cmp	r3, sl
 8007422:	dd05      	ble.n	8007430 <__gethex+0x1f4>
 8007424:	1eb9      	subs	r1, r7, #2
 8007426:	4620      	mov	r0, r4
 8007428:	f000 fece 	bl	80081c8 <__any_on>
 800742c:	2800      	cmp	r0, #0
 800742e:	d145      	bne.n	80074bc <__gethex+0x280>
 8007430:	f04f 0a02 	mov.w	sl, #2
 8007434:	4639      	mov	r1, r7
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff fe98 	bl	800716c <rshift>
 800743c:	443d      	add	r5, r7
 800743e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007442:	42ab      	cmp	r3, r5
 8007444:	da4c      	bge.n	80074e0 <__gethex+0x2a4>
 8007446:	ee18 0a10 	vmov	r0, s16
 800744a:	4621      	mov	r1, r4
 800744c:	f000 fa5c 	bl	8007908 <_Bfree>
 8007450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007452:	2300      	movs	r3, #0
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	27a3      	movs	r7, #163	; 0xa3
 8007458:	e785      	b.n	8007366 <__gethex+0x12a>
 800745a:	1e73      	subs	r3, r6, #1
 800745c:	9a05      	ldr	r2, [sp, #20]
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007464:	4293      	cmp	r3, r2
 8007466:	d019      	beq.n	800749c <__gethex+0x260>
 8007468:	f1bb 0f20 	cmp.w	fp, #32
 800746c:	d107      	bne.n	800747e <__gethex+0x242>
 800746e:	9b02      	ldr	r3, [sp, #8]
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	f843 2b04 	str.w	r2, [r3], #4
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	469b      	mov	fp, r3
 800747e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007482:	f7ff fec5 	bl	8007210 <__hexdig_fun>
 8007486:	9b00      	ldr	r3, [sp, #0]
 8007488:	f000 000f 	and.w	r0, r0, #15
 800748c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007490:	4303      	orrs	r3, r0
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	f10b 0b04 	add.w	fp, fp, #4
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	e00d      	b.n	80074b8 <__gethex+0x27c>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	9a06      	ldr	r2, [sp, #24]
 80074a0:	4413      	add	r3, r2
 80074a2:	42bb      	cmp	r3, r7
 80074a4:	d3e0      	bcc.n	8007468 <__gethex+0x22c>
 80074a6:	4618      	mov	r0, r3
 80074a8:	9901      	ldr	r1, [sp, #4]
 80074aa:	9307      	str	r3, [sp, #28]
 80074ac:	4652      	mov	r2, sl
 80074ae:	f001 f917 	bl	80086e0 <strncmp>
 80074b2:	9b07      	ldr	r3, [sp, #28]
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d1d7      	bne.n	8007468 <__gethex+0x22c>
 80074b8:	461e      	mov	r6, r3
 80074ba:	e78b      	b.n	80073d4 <__gethex+0x198>
 80074bc:	f04f 0a03 	mov.w	sl, #3
 80074c0:	e7b8      	b.n	8007434 <__gethex+0x1f8>
 80074c2:	da0a      	bge.n	80074da <__gethex+0x29e>
 80074c4:	1a37      	subs	r7, r6, r0
 80074c6:	4621      	mov	r1, r4
 80074c8:	ee18 0a10 	vmov	r0, s16
 80074cc:	463a      	mov	r2, r7
 80074ce:	f000 fc37 	bl	8007d40 <__lshift>
 80074d2:	1bed      	subs	r5, r5, r7
 80074d4:	4604      	mov	r4, r0
 80074d6:	f100 0914 	add.w	r9, r0, #20
 80074da:	f04f 0a00 	mov.w	sl, #0
 80074de:	e7ae      	b.n	800743e <__gethex+0x202>
 80074e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074e4:	42a8      	cmp	r0, r5
 80074e6:	dd72      	ble.n	80075ce <__gethex+0x392>
 80074e8:	1b45      	subs	r5, r0, r5
 80074ea:	42ae      	cmp	r6, r5
 80074ec:	dc36      	bgt.n	800755c <__gethex+0x320>
 80074ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d02a      	beq.n	800754c <__gethex+0x310>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d02c      	beq.n	8007554 <__gethex+0x318>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d11c      	bne.n	8007538 <__gethex+0x2fc>
 80074fe:	42ae      	cmp	r6, r5
 8007500:	d11a      	bne.n	8007538 <__gethex+0x2fc>
 8007502:	2e01      	cmp	r6, #1
 8007504:	d112      	bne.n	800752c <__gethex+0x2f0>
 8007506:	9a04      	ldr	r2, [sp, #16]
 8007508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	2301      	movs	r3, #1
 8007510:	6123      	str	r3, [r4, #16]
 8007512:	f8c9 3000 	str.w	r3, [r9]
 8007516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007518:	2762      	movs	r7, #98	; 0x62
 800751a:	601c      	str	r4, [r3, #0]
 800751c:	e723      	b.n	8007366 <__gethex+0x12a>
 800751e:	bf00      	nop
 8007520:	08009c70 	.word	0x08009c70
 8007524:	08009bf8 	.word	0x08009bf8
 8007528:	08009c09 	.word	0x08009c09
 800752c:	1e71      	subs	r1, r6, #1
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fe4a 	bl	80081c8 <__any_on>
 8007534:	2800      	cmp	r0, #0
 8007536:	d1e6      	bne.n	8007506 <__gethex+0x2ca>
 8007538:	ee18 0a10 	vmov	r0, s16
 800753c:	4621      	mov	r1, r4
 800753e:	f000 f9e3 	bl	8007908 <_Bfree>
 8007542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007544:	2300      	movs	r3, #0
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	2750      	movs	r7, #80	; 0x50
 800754a:	e70c      	b.n	8007366 <__gethex+0x12a>
 800754c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f2      	bne.n	8007538 <__gethex+0x2fc>
 8007552:	e7d8      	b.n	8007506 <__gethex+0x2ca>
 8007554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1d5      	bne.n	8007506 <__gethex+0x2ca>
 800755a:	e7ed      	b.n	8007538 <__gethex+0x2fc>
 800755c:	1e6f      	subs	r7, r5, #1
 800755e:	f1ba 0f00 	cmp.w	sl, #0
 8007562:	d131      	bne.n	80075c8 <__gethex+0x38c>
 8007564:	b127      	cbz	r7, 8007570 <__gethex+0x334>
 8007566:	4639      	mov	r1, r7
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe2d 	bl	80081c8 <__any_on>
 800756e:	4682      	mov	sl, r0
 8007570:	117b      	asrs	r3, r7, #5
 8007572:	2101      	movs	r1, #1
 8007574:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007578:	f007 071f 	and.w	r7, r7, #31
 800757c:	fa01 f707 	lsl.w	r7, r1, r7
 8007580:	421f      	tst	r7, r3
 8007582:	4629      	mov	r1, r5
 8007584:	4620      	mov	r0, r4
 8007586:	bf18      	it	ne
 8007588:	f04a 0a02 	orrne.w	sl, sl, #2
 800758c:	1b76      	subs	r6, r6, r5
 800758e:	f7ff fded 	bl	800716c <rshift>
 8007592:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007596:	2702      	movs	r7, #2
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	d048      	beq.n	8007630 <__gethex+0x3f4>
 800759e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d015      	beq.n	80075d2 <__gethex+0x396>
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d017      	beq.n	80075da <__gethex+0x39e>
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d109      	bne.n	80075c2 <__gethex+0x386>
 80075ae:	f01a 0f02 	tst.w	sl, #2
 80075b2:	d006      	beq.n	80075c2 <__gethex+0x386>
 80075b4:	f8d9 0000 	ldr.w	r0, [r9]
 80075b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80075bc:	f01a 0f01 	tst.w	sl, #1
 80075c0:	d10e      	bne.n	80075e0 <__gethex+0x3a4>
 80075c2:	f047 0710 	orr.w	r7, r7, #16
 80075c6:	e033      	b.n	8007630 <__gethex+0x3f4>
 80075c8:	f04f 0a01 	mov.w	sl, #1
 80075cc:	e7d0      	b.n	8007570 <__gethex+0x334>
 80075ce:	2701      	movs	r7, #1
 80075d0:	e7e2      	b.n	8007598 <__gethex+0x35c>
 80075d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d4:	f1c3 0301 	rsb	r3, r3, #1
 80075d8:	9315      	str	r3, [sp, #84]	; 0x54
 80075da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f0      	beq.n	80075c2 <__gethex+0x386>
 80075e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075e4:	f104 0314 	add.w	r3, r4, #20
 80075e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075f0:	f04f 0c00 	mov.w	ip, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075fe:	d01c      	beq.n	800763a <__gethex+0x3fe>
 8007600:	3201      	adds	r2, #1
 8007602:	6002      	str	r2, [r0, #0]
 8007604:	2f02      	cmp	r7, #2
 8007606:	f104 0314 	add.w	r3, r4, #20
 800760a:	d13f      	bne.n	800768c <__gethex+0x450>
 800760c:	f8d8 2000 	ldr.w	r2, [r8]
 8007610:	3a01      	subs	r2, #1
 8007612:	42b2      	cmp	r2, r6
 8007614:	d10a      	bne.n	800762c <__gethex+0x3f0>
 8007616:	1171      	asrs	r1, r6, #5
 8007618:	2201      	movs	r2, #1
 800761a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800761e:	f006 061f 	and.w	r6, r6, #31
 8007622:	fa02 f606 	lsl.w	r6, r2, r6
 8007626:	421e      	tst	r6, r3
 8007628:	bf18      	it	ne
 800762a:	4617      	movne	r7, r2
 800762c:	f047 0720 	orr.w	r7, r7, #32
 8007630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007632:	601c      	str	r4, [r3, #0]
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	601d      	str	r5, [r3, #0]
 8007638:	e695      	b.n	8007366 <__gethex+0x12a>
 800763a:	4299      	cmp	r1, r3
 800763c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007640:	d8d8      	bhi.n	80075f4 <__gethex+0x3b8>
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	459b      	cmp	fp, r3
 8007646:	db19      	blt.n	800767c <__gethex+0x440>
 8007648:	6861      	ldr	r1, [r4, #4]
 800764a:	ee18 0a10 	vmov	r0, s16
 800764e:	3101      	adds	r1, #1
 8007650:	f000 f91a 	bl	8007888 <_Balloc>
 8007654:	4681      	mov	r9, r0
 8007656:	b918      	cbnz	r0, 8007660 <__gethex+0x424>
 8007658:	4b1a      	ldr	r3, [pc, #104]	; (80076c4 <__gethex+0x488>)
 800765a:	4602      	mov	r2, r0
 800765c:	2184      	movs	r1, #132	; 0x84
 800765e:	e6a8      	b.n	80073b2 <__gethex+0x176>
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	3202      	adds	r2, #2
 8007664:	f104 010c 	add.w	r1, r4, #12
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	300c      	adds	r0, #12
 800766c:	f7fd f982 	bl	8004974 <memcpy>
 8007670:	4621      	mov	r1, r4
 8007672:	ee18 0a10 	vmov	r0, s16
 8007676:	f000 f947 	bl	8007908 <_Bfree>
 800767a:	464c      	mov	r4, r9
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007684:	6122      	str	r2, [r4, #16]
 8007686:	2201      	movs	r2, #1
 8007688:	615a      	str	r2, [r3, #20]
 800768a:	e7bb      	b.n	8007604 <__gethex+0x3c8>
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	455a      	cmp	r2, fp
 8007690:	dd0b      	ble.n	80076aa <__gethex+0x46e>
 8007692:	2101      	movs	r1, #1
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff fd69 	bl	800716c <rshift>
 800769a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800769e:	3501      	adds	r5, #1
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	f6ff aed0 	blt.w	8007446 <__gethex+0x20a>
 80076a6:	2701      	movs	r7, #1
 80076a8:	e7c0      	b.n	800762c <__gethex+0x3f0>
 80076aa:	f016 061f 	ands.w	r6, r6, #31
 80076ae:	d0fa      	beq.n	80076a6 <__gethex+0x46a>
 80076b0:	4453      	add	r3, sl
 80076b2:	f1c6 0620 	rsb	r6, r6, #32
 80076b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80076ba:	f000 f9d7 	bl	8007a6c <__hi0bits>
 80076be:	42b0      	cmp	r0, r6
 80076c0:	dbe7      	blt.n	8007692 <__gethex+0x456>
 80076c2:	e7f0      	b.n	80076a6 <__gethex+0x46a>
 80076c4:	08009bf8 	.word	0x08009bf8

080076c8 <L_shift>:
 80076c8:	f1c2 0208 	rsb	r2, r2, #8
 80076cc:	0092      	lsls	r2, r2, #2
 80076ce:	b570      	push	{r4, r5, r6, lr}
 80076d0:	f1c2 0620 	rsb	r6, r2, #32
 80076d4:	6843      	ldr	r3, [r0, #4]
 80076d6:	6804      	ldr	r4, [r0, #0]
 80076d8:	fa03 f506 	lsl.w	r5, r3, r6
 80076dc:	432c      	orrs	r4, r5
 80076de:	40d3      	lsrs	r3, r2
 80076e0:	6004      	str	r4, [r0, #0]
 80076e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80076e6:	4288      	cmp	r0, r1
 80076e8:	d3f4      	bcc.n	80076d4 <L_shift+0xc>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}

080076ec <__match>:
 80076ec:	b530      	push	{r4, r5, lr}
 80076ee:	6803      	ldr	r3, [r0, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f6:	b914      	cbnz	r4, 80076fe <__match+0x12>
 80076f8:	6003      	str	r3, [r0, #0]
 80076fa:	2001      	movs	r0, #1
 80076fc:	bd30      	pop	{r4, r5, pc}
 80076fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007702:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007706:	2d19      	cmp	r5, #25
 8007708:	bf98      	it	ls
 800770a:	3220      	addls	r2, #32
 800770c:	42a2      	cmp	r2, r4
 800770e:	d0f0      	beq.n	80076f2 <__match+0x6>
 8007710:	2000      	movs	r0, #0
 8007712:	e7f3      	b.n	80076fc <__match+0x10>

08007714 <__hexnan>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	680b      	ldr	r3, [r1, #0]
 800771a:	115e      	asrs	r6, r3, #5
 800771c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007720:	f013 031f 	ands.w	r3, r3, #31
 8007724:	b087      	sub	sp, #28
 8007726:	bf18      	it	ne
 8007728:	3604      	addne	r6, #4
 800772a:	2500      	movs	r5, #0
 800772c:	1f37      	subs	r7, r6, #4
 800772e:	4690      	mov	r8, r2
 8007730:	6802      	ldr	r2, [r0, #0]
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	4682      	mov	sl, r0
 8007736:	f846 5c04 	str.w	r5, [r6, #-4]
 800773a:	46b9      	mov	r9, r7
 800773c:	463c      	mov	r4, r7
 800773e:	9502      	str	r5, [sp, #8]
 8007740:	46ab      	mov	fp, r5
 8007742:	7851      	ldrb	r1, [r2, #1]
 8007744:	1c53      	adds	r3, r2, #1
 8007746:	9303      	str	r3, [sp, #12]
 8007748:	b341      	cbz	r1, 800779c <__hexnan+0x88>
 800774a:	4608      	mov	r0, r1
 800774c:	9205      	str	r2, [sp, #20]
 800774e:	9104      	str	r1, [sp, #16]
 8007750:	f7ff fd5e 	bl	8007210 <__hexdig_fun>
 8007754:	2800      	cmp	r0, #0
 8007756:	d14f      	bne.n	80077f8 <__hexnan+0xe4>
 8007758:	9904      	ldr	r1, [sp, #16]
 800775a:	9a05      	ldr	r2, [sp, #20]
 800775c:	2920      	cmp	r1, #32
 800775e:	d818      	bhi.n	8007792 <__hexnan+0x7e>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	459b      	cmp	fp, r3
 8007764:	dd13      	ble.n	800778e <__hexnan+0x7a>
 8007766:	454c      	cmp	r4, r9
 8007768:	d206      	bcs.n	8007778 <__hexnan+0x64>
 800776a:	2d07      	cmp	r5, #7
 800776c:	dc04      	bgt.n	8007778 <__hexnan+0x64>
 800776e:	462a      	mov	r2, r5
 8007770:	4649      	mov	r1, r9
 8007772:	4620      	mov	r0, r4
 8007774:	f7ff ffa8 	bl	80076c8 <L_shift>
 8007778:	4544      	cmp	r4, r8
 800777a:	d950      	bls.n	800781e <__hexnan+0x10a>
 800777c:	2300      	movs	r3, #0
 800777e:	f1a4 0904 	sub.w	r9, r4, #4
 8007782:	f844 3c04 	str.w	r3, [r4, #-4]
 8007786:	f8cd b008 	str.w	fp, [sp, #8]
 800778a:	464c      	mov	r4, r9
 800778c:	461d      	mov	r5, r3
 800778e:	9a03      	ldr	r2, [sp, #12]
 8007790:	e7d7      	b.n	8007742 <__hexnan+0x2e>
 8007792:	2929      	cmp	r1, #41	; 0x29
 8007794:	d156      	bne.n	8007844 <__hexnan+0x130>
 8007796:	3202      	adds	r2, #2
 8007798:	f8ca 2000 	str.w	r2, [sl]
 800779c:	f1bb 0f00 	cmp.w	fp, #0
 80077a0:	d050      	beq.n	8007844 <__hexnan+0x130>
 80077a2:	454c      	cmp	r4, r9
 80077a4:	d206      	bcs.n	80077b4 <__hexnan+0xa0>
 80077a6:	2d07      	cmp	r5, #7
 80077a8:	dc04      	bgt.n	80077b4 <__hexnan+0xa0>
 80077aa:	462a      	mov	r2, r5
 80077ac:	4649      	mov	r1, r9
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff ff8a 	bl	80076c8 <L_shift>
 80077b4:	4544      	cmp	r4, r8
 80077b6:	d934      	bls.n	8007822 <__hexnan+0x10e>
 80077b8:	f1a8 0204 	sub.w	r2, r8, #4
 80077bc:	4623      	mov	r3, r4
 80077be:	f853 1b04 	ldr.w	r1, [r3], #4
 80077c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80077c6:	429f      	cmp	r7, r3
 80077c8:	d2f9      	bcs.n	80077be <__hexnan+0xaa>
 80077ca:	1b3b      	subs	r3, r7, r4
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	3304      	adds	r3, #4
 80077d2:	3401      	adds	r4, #1
 80077d4:	3e03      	subs	r6, #3
 80077d6:	42b4      	cmp	r4, r6
 80077d8:	bf88      	it	hi
 80077da:	2304      	movhi	r3, #4
 80077dc:	4443      	add	r3, r8
 80077de:	2200      	movs	r2, #0
 80077e0:	f843 2b04 	str.w	r2, [r3], #4
 80077e4:	429f      	cmp	r7, r3
 80077e6:	d2fb      	bcs.n	80077e0 <__hexnan+0xcc>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	b91b      	cbnz	r3, 80077f4 <__hexnan+0xe0>
 80077ec:	4547      	cmp	r7, r8
 80077ee:	d127      	bne.n	8007840 <__hexnan+0x12c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	2005      	movs	r0, #5
 80077f6:	e026      	b.n	8007846 <__hexnan+0x132>
 80077f8:	3501      	adds	r5, #1
 80077fa:	2d08      	cmp	r5, #8
 80077fc:	f10b 0b01 	add.w	fp, fp, #1
 8007800:	dd06      	ble.n	8007810 <__hexnan+0xfc>
 8007802:	4544      	cmp	r4, r8
 8007804:	d9c3      	bls.n	800778e <__hexnan+0x7a>
 8007806:	2300      	movs	r3, #0
 8007808:	f844 3c04 	str.w	r3, [r4, #-4]
 800780c:	2501      	movs	r5, #1
 800780e:	3c04      	subs	r4, #4
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	f000 000f 	and.w	r0, r0, #15
 8007816:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	e7b7      	b.n	800778e <__hexnan+0x7a>
 800781e:	2508      	movs	r5, #8
 8007820:	e7b5      	b.n	800778e <__hexnan+0x7a>
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0df      	beq.n	80077e8 <__hexnan+0xd4>
 8007828:	f04f 32ff 	mov.w	r2, #4294967295
 800782c:	f1c3 0320 	rsb	r3, r3, #32
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
 8007834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007838:	401a      	ands	r2, r3
 800783a:	f846 2c04 	str.w	r2, [r6, #-4]
 800783e:	e7d3      	b.n	80077e8 <__hexnan+0xd4>
 8007840:	3f04      	subs	r7, #4
 8007842:	e7d1      	b.n	80077e8 <__hexnan+0xd4>
 8007844:	2004      	movs	r0, #4
 8007846:	b007      	add	sp, #28
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800784c <_localeconv_r>:
 800784c:	4800      	ldr	r0, [pc, #0]	; (8007850 <_localeconv_r+0x4>)
 800784e:	4770      	bx	lr
 8007850:	200003a8 	.word	0x200003a8

08007854 <malloc>:
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <malloc+0xc>)
 8007856:	4601      	mov	r1, r0
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f000 bd59 	b.w	8008310 <_malloc_r>
 800785e:	bf00      	nop
 8007860:	20000250 	.word	0x20000250

08007864 <__ascii_mbtowc>:
 8007864:	b082      	sub	sp, #8
 8007866:	b901      	cbnz	r1, 800786a <__ascii_mbtowc+0x6>
 8007868:	a901      	add	r1, sp, #4
 800786a:	b142      	cbz	r2, 800787e <__ascii_mbtowc+0x1a>
 800786c:	b14b      	cbz	r3, 8007882 <__ascii_mbtowc+0x1e>
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	600b      	str	r3, [r1, #0]
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	1e10      	subs	r0, r2, #0
 8007876:	bf18      	it	ne
 8007878:	2001      	movne	r0, #1
 800787a:	b002      	add	sp, #8
 800787c:	4770      	bx	lr
 800787e:	4610      	mov	r0, r2
 8007880:	e7fb      	b.n	800787a <__ascii_mbtowc+0x16>
 8007882:	f06f 0001 	mvn.w	r0, #1
 8007886:	e7f8      	b.n	800787a <__ascii_mbtowc+0x16>

08007888 <_Balloc>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	b976      	cbnz	r6, 80078b0 <_Balloc+0x28>
 8007892:	2010      	movs	r0, #16
 8007894:	f7ff ffde 	bl	8007854 <malloc>
 8007898:	4602      	mov	r2, r0
 800789a:	6260      	str	r0, [r4, #36]	; 0x24
 800789c:	b920      	cbnz	r0, 80078a8 <_Balloc+0x20>
 800789e:	4b18      	ldr	r3, [pc, #96]	; (8007900 <_Balloc+0x78>)
 80078a0:	4818      	ldr	r0, [pc, #96]	; (8007904 <_Balloc+0x7c>)
 80078a2:	2166      	movs	r1, #102	; 0x66
 80078a4:	f000 ff3e 	bl	8008724 <__assert_func>
 80078a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078ac:	6006      	str	r6, [r0, #0]
 80078ae:	60c6      	str	r6, [r0, #12]
 80078b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078b2:	68f3      	ldr	r3, [r6, #12]
 80078b4:	b183      	cbz	r3, 80078d8 <_Balloc+0x50>
 80078b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078be:	b9b8      	cbnz	r0, 80078f0 <_Balloc+0x68>
 80078c0:	2101      	movs	r1, #1
 80078c2:	fa01 f605 	lsl.w	r6, r1, r5
 80078c6:	1d72      	adds	r2, r6, #5
 80078c8:	0092      	lsls	r2, r2, #2
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fc9d 	bl	800820a <_calloc_r>
 80078d0:	b160      	cbz	r0, 80078ec <_Balloc+0x64>
 80078d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078d6:	e00e      	b.n	80078f6 <_Balloc+0x6e>
 80078d8:	2221      	movs	r2, #33	; 0x21
 80078da:	2104      	movs	r1, #4
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fc94 	bl	800820a <_calloc_r>
 80078e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e4:	60f0      	str	r0, [r6, #12]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e4      	bne.n	80078b6 <_Balloc+0x2e>
 80078ec:	2000      	movs	r0, #0
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	6802      	ldr	r2, [r0, #0]
 80078f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078f6:	2300      	movs	r3, #0
 80078f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078fc:	e7f7      	b.n	80078ee <_Balloc+0x66>
 80078fe:	bf00      	nop
 8007900:	08009b86 	.word	0x08009b86
 8007904:	08009c84 	.word	0x08009c84

08007908 <_Bfree>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800790c:	4605      	mov	r5, r0
 800790e:	460c      	mov	r4, r1
 8007910:	b976      	cbnz	r6, 8007930 <_Bfree+0x28>
 8007912:	2010      	movs	r0, #16
 8007914:	f7ff ff9e 	bl	8007854 <malloc>
 8007918:	4602      	mov	r2, r0
 800791a:	6268      	str	r0, [r5, #36]	; 0x24
 800791c:	b920      	cbnz	r0, 8007928 <_Bfree+0x20>
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <_Bfree+0x3c>)
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <_Bfree+0x40>)
 8007922:	218a      	movs	r1, #138	; 0x8a
 8007924:	f000 fefe 	bl	8008724 <__assert_func>
 8007928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800792c:	6006      	str	r6, [r0, #0]
 800792e:	60c6      	str	r6, [r0, #12]
 8007930:	b13c      	cbz	r4, 8007942 <_Bfree+0x3a>
 8007932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007934:	6862      	ldr	r2, [r4, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800793c:	6021      	str	r1, [r4, #0]
 800793e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	08009b86 	.word	0x08009b86
 8007948:	08009c84 	.word	0x08009c84

0800794c <__multadd>:
 800794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	690d      	ldr	r5, [r1, #16]
 8007952:	4607      	mov	r7, r0
 8007954:	460c      	mov	r4, r1
 8007956:	461e      	mov	r6, r3
 8007958:	f101 0c14 	add.w	ip, r1, #20
 800795c:	2000      	movs	r0, #0
 800795e:	f8dc 3000 	ldr.w	r3, [ip]
 8007962:	b299      	uxth	r1, r3
 8007964:	fb02 6101 	mla	r1, r2, r1, r6
 8007968:	0c1e      	lsrs	r6, r3, #16
 800796a:	0c0b      	lsrs	r3, r1, #16
 800796c:	fb02 3306 	mla	r3, r2, r6, r3
 8007970:	b289      	uxth	r1, r1
 8007972:	3001      	adds	r0, #1
 8007974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007978:	4285      	cmp	r5, r0
 800797a:	f84c 1b04 	str.w	r1, [ip], #4
 800797e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007982:	dcec      	bgt.n	800795e <__multadd+0x12>
 8007984:	b30e      	cbz	r6, 80079ca <__multadd+0x7e>
 8007986:	68a3      	ldr	r3, [r4, #8]
 8007988:	42ab      	cmp	r3, r5
 800798a:	dc19      	bgt.n	80079c0 <__multadd+0x74>
 800798c:	6861      	ldr	r1, [r4, #4]
 800798e:	4638      	mov	r0, r7
 8007990:	3101      	adds	r1, #1
 8007992:	f7ff ff79 	bl	8007888 <_Balloc>
 8007996:	4680      	mov	r8, r0
 8007998:	b928      	cbnz	r0, 80079a6 <__multadd+0x5a>
 800799a:	4602      	mov	r2, r0
 800799c:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <__multadd+0x84>)
 800799e:	480d      	ldr	r0, [pc, #52]	; (80079d4 <__multadd+0x88>)
 80079a0:	21b5      	movs	r1, #181	; 0xb5
 80079a2:	f000 febf 	bl	8008724 <__assert_func>
 80079a6:	6922      	ldr	r2, [r4, #16]
 80079a8:	3202      	adds	r2, #2
 80079aa:	f104 010c 	add.w	r1, r4, #12
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	300c      	adds	r0, #12
 80079b2:	f7fc ffdf 	bl	8004974 <memcpy>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ffa5 	bl	8007908 <_Bfree>
 80079be:	4644      	mov	r4, r8
 80079c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079c4:	3501      	adds	r5, #1
 80079c6:	615e      	str	r6, [r3, #20]
 80079c8:	6125      	str	r5, [r4, #16]
 80079ca:	4620      	mov	r0, r4
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d0:	08009bf8 	.word	0x08009bf8
 80079d4:	08009c84 	.word	0x08009c84

080079d8 <__s2b>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	4615      	mov	r5, r2
 80079e0:	461f      	mov	r7, r3
 80079e2:	2209      	movs	r2, #9
 80079e4:	3308      	adds	r3, #8
 80079e6:	4606      	mov	r6, r0
 80079e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ec:	2100      	movs	r1, #0
 80079ee:	2201      	movs	r2, #1
 80079f0:	429a      	cmp	r2, r3
 80079f2:	db09      	blt.n	8007a08 <__s2b+0x30>
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7ff ff47 	bl	8007888 <_Balloc>
 80079fa:	b940      	cbnz	r0, 8007a0e <__s2b+0x36>
 80079fc:	4602      	mov	r2, r0
 80079fe:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <__s2b+0x8c>)
 8007a00:	4819      	ldr	r0, [pc, #100]	; (8007a68 <__s2b+0x90>)
 8007a02:	21ce      	movs	r1, #206	; 0xce
 8007a04:	f000 fe8e 	bl	8008724 <__assert_func>
 8007a08:	0052      	lsls	r2, r2, #1
 8007a0a:	3101      	adds	r1, #1
 8007a0c:	e7f0      	b.n	80079f0 <__s2b+0x18>
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	6143      	str	r3, [r0, #20]
 8007a12:	2d09      	cmp	r5, #9
 8007a14:	f04f 0301 	mov.w	r3, #1
 8007a18:	6103      	str	r3, [r0, #16]
 8007a1a:	dd16      	ble.n	8007a4a <__s2b+0x72>
 8007a1c:	f104 0909 	add.w	r9, r4, #9
 8007a20:	46c8      	mov	r8, r9
 8007a22:	442c      	add	r4, r5
 8007a24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a28:	4601      	mov	r1, r0
 8007a2a:	3b30      	subs	r3, #48	; 0x30
 8007a2c:	220a      	movs	r2, #10
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff ff8c 	bl	800794c <__multadd>
 8007a34:	45a0      	cmp	r8, r4
 8007a36:	d1f5      	bne.n	8007a24 <__s2b+0x4c>
 8007a38:	f1a5 0408 	sub.w	r4, r5, #8
 8007a3c:	444c      	add	r4, r9
 8007a3e:	1b2d      	subs	r5, r5, r4
 8007a40:	1963      	adds	r3, r4, r5
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	db04      	blt.n	8007a50 <__s2b+0x78>
 8007a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	340a      	adds	r4, #10
 8007a4c:	2509      	movs	r5, #9
 8007a4e:	e7f6      	b.n	8007a3e <__s2b+0x66>
 8007a50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a54:	4601      	mov	r1, r0
 8007a56:	3b30      	subs	r3, #48	; 0x30
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff ff76 	bl	800794c <__multadd>
 8007a60:	e7ee      	b.n	8007a40 <__s2b+0x68>
 8007a62:	bf00      	nop
 8007a64:	08009bf8 	.word	0x08009bf8
 8007a68:	08009c84 	.word	0x08009c84

08007a6c <__hi0bits>:
 8007a6c:	0c03      	lsrs	r3, r0, #16
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	b9d3      	cbnz	r3, 8007aa8 <__hi0bits+0x3c>
 8007a72:	0400      	lsls	r0, r0, #16
 8007a74:	2310      	movs	r3, #16
 8007a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a7a:	bf04      	itt	eq
 8007a7c:	0200      	lsleq	r0, r0, #8
 8007a7e:	3308      	addeq	r3, #8
 8007a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a84:	bf04      	itt	eq
 8007a86:	0100      	lsleq	r0, r0, #4
 8007a88:	3304      	addeq	r3, #4
 8007a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a8e:	bf04      	itt	eq
 8007a90:	0080      	lsleq	r0, r0, #2
 8007a92:	3302      	addeq	r3, #2
 8007a94:	2800      	cmp	r0, #0
 8007a96:	db05      	blt.n	8007aa4 <__hi0bits+0x38>
 8007a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a9c:	f103 0301 	add.w	r3, r3, #1
 8007aa0:	bf08      	it	eq
 8007aa2:	2320      	moveq	r3, #32
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	4770      	bx	lr
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e7e4      	b.n	8007a76 <__hi0bits+0xa>

08007aac <__lo0bits>:
 8007aac:	6803      	ldr	r3, [r0, #0]
 8007aae:	f013 0207 	ands.w	r2, r3, #7
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	d00b      	beq.n	8007ace <__lo0bits+0x22>
 8007ab6:	07da      	lsls	r2, r3, #31
 8007ab8:	d423      	bmi.n	8007b02 <__lo0bits+0x56>
 8007aba:	0798      	lsls	r0, r3, #30
 8007abc:	bf49      	itett	mi
 8007abe:	085b      	lsrmi	r3, r3, #1
 8007ac0:	089b      	lsrpl	r3, r3, #2
 8007ac2:	2001      	movmi	r0, #1
 8007ac4:	600b      	strmi	r3, [r1, #0]
 8007ac6:	bf5c      	itt	pl
 8007ac8:	600b      	strpl	r3, [r1, #0]
 8007aca:	2002      	movpl	r0, #2
 8007acc:	4770      	bx	lr
 8007ace:	b298      	uxth	r0, r3
 8007ad0:	b9a8      	cbnz	r0, 8007afe <__lo0bits+0x52>
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	2010      	movs	r0, #16
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	b90a      	cbnz	r2, 8007ade <__lo0bits+0x32>
 8007ada:	3008      	adds	r0, #8
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	071a      	lsls	r2, r3, #28
 8007ae0:	bf04      	itt	eq
 8007ae2:	091b      	lsreq	r3, r3, #4
 8007ae4:	3004      	addeq	r0, #4
 8007ae6:	079a      	lsls	r2, r3, #30
 8007ae8:	bf04      	itt	eq
 8007aea:	089b      	lsreq	r3, r3, #2
 8007aec:	3002      	addeq	r0, #2
 8007aee:	07da      	lsls	r2, r3, #31
 8007af0:	d403      	bmi.n	8007afa <__lo0bits+0x4e>
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	f100 0001 	add.w	r0, r0, #1
 8007af8:	d005      	beq.n	8007b06 <__lo0bits+0x5a>
 8007afa:	600b      	str	r3, [r1, #0]
 8007afc:	4770      	bx	lr
 8007afe:	4610      	mov	r0, r2
 8007b00:	e7e9      	b.n	8007ad6 <__lo0bits+0x2a>
 8007b02:	2000      	movs	r0, #0
 8007b04:	4770      	bx	lr
 8007b06:	2020      	movs	r0, #32
 8007b08:	4770      	bx	lr
	...

08007b0c <__i2b>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	460c      	mov	r4, r1
 8007b10:	2101      	movs	r1, #1
 8007b12:	f7ff feb9 	bl	8007888 <_Balloc>
 8007b16:	4602      	mov	r2, r0
 8007b18:	b928      	cbnz	r0, 8007b26 <__i2b+0x1a>
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <__i2b+0x24>)
 8007b1c:	4805      	ldr	r0, [pc, #20]	; (8007b34 <__i2b+0x28>)
 8007b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b22:	f000 fdff 	bl	8008724 <__assert_func>
 8007b26:	2301      	movs	r3, #1
 8007b28:	6144      	str	r4, [r0, #20]
 8007b2a:	6103      	str	r3, [r0, #16]
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	bf00      	nop
 8007b30:	08009bf8 	.word	0x08009bf8
 8007b34:	08009c84 	.word	0x08009c84

08007b38 <__multiply>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	4691      	mov	r9, r2
 8007b3e:	690a      	ldr	r2, [r1, #16]
 8007b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	bfb8      	it	lt
 8007b48:	460b      	movlt	r3, r1
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	bfbc      	itt	lt
 8007b4e:	464c      	movlt	r4, r9
 8007b50:	4699      	movlt	r9, r3
 8007b52:	6927      	ldr	r7, [r4, #16]
 8007b54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	6861      	ldr	r1, [r4, #4]
 8007b5c:	eb07 060a 	add.w	r6, r7, sl
 8007b60:	42b3      	cmp	r3, r6
 8007b62:	b085      	sub	sp, #20
 8007b64:	bfb8      	it	lt
 8007b66:	3101      	addlt	r1, #1
 8007b68:	f7ff fe8e 	bl	8007888 <_Balloc>
 8007b6c:	b930      	cbnz	r0, 8007b7c <__multiply+0x44>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	4b44      	ldr	r3, [pc, #272]	; (8007c84 <__multiply+0x14c>)
 8007b72:	4845      	ldr	r0, [pc, #276]	; (8007c88 <__multiply+0x150>)
 8007b74:	f240 115d 	movw	r1, #349	; 0x15d
 8007b78:	f000 fdd4 	bl	8008724 <__assert_func>
 8007b7c:	f100 0514 	add.w	r5, r0, #20
 8007b80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b84:	462b      	mov	r3, r5
 8007b86:	2200      	movs	r2, #0
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	d321      	bcc.n	8007bd0 <__multiply+0x98>
 8007b8c:	f104 0314 	add.w	r3, r4, #20
 8007b90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b94:	f109 0314 	add.w	r3, r9, #20
 8007b98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	1b3a      	subs	r2, r7, r4
 8007ba0:	3a15      	subs	r2, #21
 8007ba2:	f022 0203 	bic.w	r2, r2, #3
 8007ba6:	3204      	adds	r2, #4
 8007ba8:	f104 0115 	add.w	r1, r4, #21
 8007bac:	428f      	cmp	r7, r1
 8007bae:	bf38      	it	cc
 8007bb0:	2204      	movcc	r2, #4
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	9a02      	ldr	r2, [sp, #8]
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d80c      	bhi.n	8007bd6 <__multiply+0x9e>
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	dd03      	ble.n	8007bc8 <__multiply+0x90>
 8007bc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d05a      	beq.n	8007c7e <__multiply+0x146>
 8007bc8:	6106      	str	r6, [r0, #16]
 8007bca:	b005      	add	sp, #20
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	f843 2b04 	str.w	r2, [r3], #4
 8007bd4:	e7d8      	b.n	8007b88 <__multiply+0x50>
 8007bd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bda:	f1ba 0f00 	cmp.w	sl, #0
 8007bde:	d024      	beq.n	8007c2a <__multiply+0xf2>
 8007be0:	f104 0e14 	add.w	lr, r4, #20
 8007be4:	46a9      	mov	r9, r5
 8007be6:	f04f 0c00 	mov.w	ip, #0
 8007bea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bee:	f8d9 1000 	ldr.w	r1, [r9]
 8007bf2:	fa1f fb82 	uxth.w	fp, r2
 8007bf6:	b289      	uxth	r1, r1
 8007bf8:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c00:	f8d9 2000 	ldr.w	r2, [r9]
 8007c04:	4461      	add	r1, ip
 8007c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c12:	b289      	uxth	r1, r1
 8007c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c18:	4577      	cmp	r7, lr
 8007c1a:	f849 1b04 	str.w	r1, [r9], #4
 8007c1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c22:	d8e2      	bhi.n	8007bea <__multiply+0xb2>
 8007c24:	9a01      	ldr	r2, [sp, #4]
 8007c26:	f845 c002 	str.w	ip, [r5, r2]
 8007c2a:	9a03      	ldr	r2, [sp, #12]
 8007c2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c30:	3304      	adds	r3, #4
 8007c32:	f1b9 0f00 	cmp.w	r9, #0
 8007c36:	d020      	beq.n	8007c7a <__multiply+0x142>
 8007c38:	6829      	ldr	r1, [r5, #0]
 8007c3a:	f104 0c14 	add.w	ip, r4, #20
 8007c3e:	46ae      	mov	lr, r5
 8007c40:	f04f 0a00 	mov.w	sl, #0
 8007c44:	f8bc b000 	ldrh.w	fp, [ip]
 8007c48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c4c:	fb09 220b 	mla	r2, r9, fp, r2
 8007c50:	4492      	add	sl, r2
 8007c52:	b289      	uxth	r1, r1
 8007c54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c58:	f84e 1b04 	str.w	r1, [lr], #4
 8007c5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c60:	f8be 1000 	ldrh.w	r1, [lr]
 8007c64:	0c12      	lsrs	r2, r2, #16
 8007c66:	fb09 1102 	mla	r1, r9, r2, r1
 8007c6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c6e:	4567      	cmp	r7, ip
 8007c70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c74:	d8e6      	bhi.n	8007c44 <__multiply+0x10c>
 8007c76:	9a01      	ldr	r2, [sp, #4]
 8007c78:	50a9      	str	r1, [r5, r2]
 8007c7a:	3504      	adds	r5, #4
 8007c7c:	e79a      	b.n	8007bb4 <__multiply+0x7c>
 8007c7e:	3e01      	subs	r6, #1
 8007c80:	e79c      	b.n	8007bbc <__multiply+0x84>
 8007c82:	bf00      	nop
 8007c84:	08009bf8 	.word	0x08009bf8
 8007c88:	08009c84 	.word	0x08009c84

08007c8c <__pow5mult>:
 8007c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c90:	4615      	mov	r5, r2
 8007c92:	f012 0203 	ands.w	r2, r2, #3
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	d007      	beq.n	8007cac <__pow5mult+0x20>
 8007c9c:	4c25      	ldr	r4, [pc, #148]	; (8007d34 <__pow5mult+0xa8>)
 8007c9e:	3a01      	subs	r2, #1
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ca6:	f7ff fe51 	bl	800794c <__multadd>
 8007caa:	4607      	mov	r7, r0
 8007cac:	10ad      	asrs	r5, r5, #2
 8007cae:	d03d      	beq.n	8007d2c <__pow5mult+0xa0>
 8007cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cb2:	b97c      	cbnz	r4, 8007cd4 <__pow5mult+0x48>
 8007cb4:	2010      	movs	r0, #16
 8007cb6:	f7ff fdcd 	bl	8007854 <malloc>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8007cbe:	b928      	cbnz	r0, 8007ccc <__pow5mult+0x40>
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	; (8007d38 <__pow5mult+0xac>)
 8007cc2:	481e      	ldr	r0, [pc, #120]	; (8007d3c <__pow5mult+0xb0>)
 8007cc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007cc8:	f000 fd2c 	bl	8008724 <__assert_func>
 8007ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cd0:	6004      	str	r4, [r0, #0]
 8007cd2:	60c4      	str	r4, [r0, #12]
 8007cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cdc:	b94c      	cbnz	r4, 8007cf2 <__pow5mult+0x66>
 8007cde:	f240 2171 	movw	r1, #625	; 0x271
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ff12 	bl	8007b0c <__i2b>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cee:	4604      	mov	r4, r0
 8007cf0:	6003      	str	r3, [r0, #0]
 8007cf2:	f04f 0900 	mov.w	r9, #0
 8007cf6:	07eb      	lsls	r3, r5, #31
 8007cf8:	d50a      	bpl.n	8007d10 <__pow5mult+0x84>
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7ff ff1a 	bl	8007b38 <__multiply>
 8007d04:	4639      	mov	r1, r7
 8007d06:	4680      	mov	r8, r0
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7ff fdfd 	bl	8007908 <_Bfree>
 8007d0e:	4647      	mov	r7, r8
 8007d10:	106d      	asrs	r5, r5, #1
 8007d12:	d00b      	beq.n	8007d2c <__pow5mult+0xa0>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	b938      	cbnz	r0, 8007d28 <__pow5mult+0x9c>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f7ff ff0b 	bl	8007b38 <__multiply>
 8007d22:	6020      	str	r0, [r4, #0]
 8007d24:	f8c0 9000 	str.w	r9, [r0]
 8007d28:	4604      	mov	r4, r0
 8007d2a:	e7e4      	b.n	8007cf6 <__pow5mult+0x6a>
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d32:	bf00      	nop
 8007d34:	08009dd0 	.word	0x08009dd0
 8007d38:	08009b86 	.word	0x08009b86
 8007d3c:	08009c84 	.word	0x08009c84

08007d40 <__lshift>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	460c      	mov	r4, r1
 8007d46:	6849      	ldr	r1, [r1, #4]
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	4607      	mov	r7, r0
 8007d52:	4691      	mov	r9, r2
 8007d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d58:	f108 0601 	add.w	r6, r8, #1
 8007d5c:	42b3      	cmp	r3, r6
 8007d5e:	db0b      	blt.n	8007d78 <__lshift+0x38>
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff fd91 	bl	8007888 <_Balloc>
 8007d66:	4605      	mov	r5, r0
 8007d68:	b948      	cbnz	r0, 8007d7e <__lshift+0x3e>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4b2a      	ldr	r3, [pc, #168]	; (8007e18 <__lshift+0xd8>)
 8007d6e:	482b      	ldr	r0, [pc, #172]	; (8007e1c <__lshift+0xdc>)
 8007d70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d74:	f000 fcd6 	bl	8008724 <__assert_func>
 8007d78:	3101      	adds	r1, #1
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	e7ee      	b.n	8007d5c <__lshift+0x1c>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f100 0114 	add.w	r1, r0, #20
 8007d84:	f100 0210 	add.w	r2, r0, #16
 8007d88:	4618      	mov	r0, r3
 8007d8a:	4553      	cmp	r3, sl
 8007d8c:	db37      	blt.n	8007dfe <__lshift+0xbe>
 8007d8e:	6920      	ldr	r0, [r4, #16]
 8007d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d94:	f104 0314 	add.w	r3, r4, #20
 8007d98:	f019 091f 	ands.w	r9, r9, #31
 8007d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007da4:	d02f      	beq.n	8007e06 <__lshift+0xc6>
 8007da6:	f1c9 0e20 	rsb	lr, r9, #32
 8007daa:	468a      	mov	sl, r1
 8007dac:	f04f 0c00 	mov.w	ip, #0
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	fa02 f209 	lsl.w	r2, r2, r9
 8007db6:	ea42 020c 	orr.w	r2, r2, ip
 8007dba:	f84a 2b04 	str.w	r2, [sl], #4
 8007dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc2:	4298      	cmp	r0, r3
 8007dc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007dc8:	d8f2      	bhi.n	8007db0 <__lshift+0x70>
 8007dca:	1b03      	subs	r3, r0, r4
 8007dcc:	3b15      	subs	r3, #21
 8007dce:	f023 0303 	bic.w	r3, r3, #3
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	f104 0215 	add.w	r2, r4, #21
 8007dd8:	4290      	cmp	r0, r2
 8007dda:	bf38      	it	cc
 8007ddc:	2304      	movcc	r3, #4
 8007dde:	f841 c003 	str.w	ip, [r1, r3]
 8007de2:	f1bc 0f00 	cmp.w	ip, #0
 8007de6:	d001      	beq.n	8007dec <__lshift+0xac>
 8007de8:	f108 0602 	add.w	r6, r8, #2
 8007dec:	3e01      	subs	r6, #1
 8007dee:	4638      	mov	r0, r7
 8007df0:	612e      	str	r6, [r5, #16]
 8007df2:	4621      	mov	r1, r4
 8007df4:	f7ff fd88 	bl	8007908 <_Bfree>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e02:	3301      	adds	r3, #1
 8007e04:	e7c1      	b.n	8007d8a <__lshift+0x4a>
 8007e06:	3904      	subs	r1, #4
 8007e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e10:	4298      	cmp	r0, r3
 8007e12:	d8f9      	bhi.n	8007e08 <__lshift+0xc8>
 8007e14:	e7ea      	b.n	8007dec <__lshift+0xac>
 8007e16:	bf00      	nop
 8007e18:	08009bf8 	.word	0x08009bf8
 8007e1c:	08009c84 	.word	0x08009c84

08007e20 <__mcmp>:
 8007e20:	b530      	push	{r4, r5, lr}
 8007e22:	6902      	ldr	r2, [r0, #16]
 8007e24:	690c      	ldr	r4, [r1, #16]
 8007e26:	1b12      	subs	r2, r2, r4
 8007e28:	d10e      	bne.n	8007e48 <__mcmp+0x28>
 8007e2a:	f100 0314 	add.w	r3, r0, #20
 8007e2e:	3114      	adds	r1, #20
 8007e30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e40:	42a5      	cmp	r5, r4
 8007e42:	d003      	beq.n	8007e4c <__mcmp+0x2c>
 8007e44:	d305      	bcc.n	8007e52 <__mcmp+0x32>
 8007e46:	2201      	movs	r2, #1
 8007e48:	4610      	mov	r0, r2
 8007e4a:	bd30      	pop	{r4, r5, pc}
 8007e4c:	4283      	cmp	r3, r0
 8007e4e:	d3f3      	bcc.n	8007e38 <__mcmp+0x18>
 8007e50:	e7fa      	b.n	8007e48 <__mcmp+0x28>
 8007e52:	f04f 32ff 	mov.w	r2, #4294967295
 8007e56:	e7f7      	b.n	8007e48 <__mcmp+0x28>

08007e58 <__mdiff>:
 8007e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4606      	mov	r6, r0
 8007e60:	4611      	mov	r1, r2
 8007e62:	4620      	mov	r0, r4
 8007e64:	4690      	mov	r8, r2
 8007e66:	f7ff ffdb 	bl	8007e20 <__mcmp>
 8007e6a:	1e05      	subs	r5, r0, #0
 8007e6c:	d110      	bne.n	8007e90 <__mdiff+0x38>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff fd09 	bl	8007888 <_Balloc>
 8007e76:	b930      	cbnz	r0, 8007e86 <__mdiff+0x2e>
 8007e78:	4b3a      	ldr	r3, [pc, #232]	; (8007f64 <__mdiff+0x10c>)
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	f240 2132 	movw	r1, #562	; 0x232
 8007e80:	4839      	ldr	r0, [pc, #228]	; (8007f68 <__mdiff+0x110>)
 8007e82:	f000 fc4f 	bl	8008724 <__assert_func>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	bfa4      	itt	ge
 8007e92:	4643      	movge	r3, r8
 8007e94:	46a0      	movge	r8, r4
 8007e96:	4630      	mov	r0, r6
 8007e98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e9c:	bfa6      	itte	ge
 8007e9e:	461c      	movge	r4, r3
 8007ea0:	2500      	movge	r5, #0
 8007ea2:	2501      	movlt	r5, #1
 8007ea4:	f7ff fcf0 	bl	8007888 <_Balloc>
 8007ea8:	b920      	cbnz	r0, 8007eb4 <__mdiff+0x5c>
 8007eaa:	4b2e      	ldr	r3, [pc, #184]	; (8007f64 <__mdiff+0x10c>)
 8007eac:	4602      	mov	r2, r0
 8007eae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007eb2:	e7e5      	b.n	8007e80 <__mdiff+0x28>
 8007eb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007eb8:	6926      	ldr	r6, [r4, #16]
 8007eba:	60c5      	str	r5, [r0, #12]
 8007ebc:	f104 0914 	add.w	r9, r4, #20
 8007ec0:	f108 0514 	add.w	r5, r8, #20
 8007ec4:	f100 0e14 	add.w	lr, r0, #20
 8007ec8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ecc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ed0:	f108 0210 	add.w	r2, r8, #16
 8007ed4:	46f2      	mov	sl, lr
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007edc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ee0:	fa1f f883 	uxth.w	r8, r3
 8007ee4:	fa11 f18b 	uxtah	r1, r1, fp
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	eba1 0808 	sub.w	r8, r1, r8
 8007eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ef6:	fa1f f888 	uxth.w	r8, r8
 8007efa:	1419      	asrs	r1, r3, #16
 8007efc:	454e      	cmp	r6, r9
 8007efe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f02:	f84a 3b04 	str.w	r3, [sl], #4
 8007f06:	d8e7      	bhi.n	8007ed8 <__mdiff+0x80>
 8007f08:	1b33      	subs	r3, r6, r4
 8007f0a:	3b15      	subs	r3, #21
 8007f0c:	f023 0303 	bic.w	r3, r3, #3
 8007f10:	3304      	adds	r3, #4
 8007f12:	3415      	adds	r4, #21
 8007f14:	42a6      	cmp	r6, r4
 8007f16:	bf38      	it	cc
 8007f18:	2304      	movcc	r3, #4
 8007f1a:	441d      	add	r5, r3
 8007f1c:	4473      	add	r3, lr
 8007f1e:	469e      	mov	lr, r3
 8007f20:	462e      	mov	r6, r5
 8007f22:	4566      	cmp	r6, ip
 8007f24:	d30e      	bcc.n	8007f44 <__mdiff+0xec>
 8007f26:	f10c 0203 	add.w	r2, ip, #3
 8007f2a:	1b52      	subs	r2, r2, r5
 8007f2c:	f022 0203 	bic.w	r2, r2, #3
 8007f30:	3d03      	subs	r5, #3
 8007f32:	45ac      	cmp	ip, r5
 8007f34:	bf38      	it	cc
 8007f36:	2200      	movcc	r2, #0
 8007f38:	441a      	add	r2, r3
 8007f3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f3e:	b17b      	cbz	r3, 8007f60 <__mdiff+0x108>
 8007f40:	6107      	str	r7, [r0, #16]
 8007f42:	e7a3      	b.n	8007e8c <__mdiff+0x34>
 8007f44:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f48:	fa11 f288 	uxtah	r2, r1, r8
 8007f4c:	1414      	asrs	r4, r2, #16
 8007f4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f52:	b292      	uxth	r2, r2
 8007f54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f58:	f84e 2b04 	str.w	r2, [lr], #4
 8007f5c:	1421      	asrs	r1, r4, #16
 8007f5e:	e7e0      	b.n	8007f22 <__mdiff+0xca>
 8007f60:	3f01      	subs	r7, #1
 8007f62:	e7ea      	b.n	8007f3a <__mdiff+0xe2>
 8007f64:	08009bf8 	.word	0x08009bf8
 8007f68:	08009c84 	.word	0x08009c84

08007f6c <__ulp>:
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	ed8d 0b00 	vstr	d0, [sp]
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	4912      	ldr	r1, [pc, #72]	; (8007fc0 <__ulp+0x54>)
 8007f76:	4019      	ands	r1, r3
 8007f78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	dd05      	ble.n	8007f8c <__ulp+0x20>
 8007f80:	2200      	movs	r2, #0
 8007f82:	460b      	mov	r3, r1
 8007f84:	ec43 2b10 	vmov	d0, r2, r3
 8007f88:	b002      	add	sp, #8
 8007f8a:	4770      	bx	lr
 8007f8c:	4249      	negs	r1, r1
 8007f8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007f92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	f04f 0300 	mov.w	r3, #0
 8007f9e:	da04      	bge.n	8007faa <__ulp+0x3e>
 8007fa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007fa4:	fa41 f300 	asr.w	r3, r1, r0
 8007fa8:	e7ec      	b.n	8007f84 <__ulp+0x18>
 8007faa:	f1a0 0114 	sub.w	r1, r0, #20
 8007fae:	291e      	cmp	r1, #30
 8007fb0:	bfda      	itte	le
 8007fb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007fb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8007fba:	2101      	movgt	r1, #1
 8007fbc:	460a      	mov	r2, r1
 8007fbe:	e7e1      	b.n	8007f84 <__ulp+0x18>
 8007fc0:	7ff00000 	.word	0x7ff00000

08007fc4 <__b2d>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	6905      	ldr	r5, [r0, #16]
 8007fc8:	f100 0714 	add.w	r7, r0, #20
 8007fcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007fd0:	1f2e      	subs	r6, r5, #4
 8007fd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f7ff fd48 	bl	8007a6c <__hi0bits>
 8007fdc:	f1c0 0320 	rsb	r3, r0, #32
 8007fe0:	280a      	cmp	r0, #10
 8007fe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008060 <__b2d+0x9c>
 8007fe6:	600b      	str	r3, [r1, #0]
 8007fe8:	dc14      	bgt.n	8008014 <__b2d+0x50>
 8007fea:	f1c0 0e0b 	rsb	lr, r0, #11
 8007fee:	fa24 f10e 	lsr.w	r1, r4, lr
 8007ff2:	42b7      	cmp	r7, r6
 8007ff4:	ea41 030c 	orr.w	r3, r1, ip
 8007ff8:	bf34      	ite	cc
 8007ffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007ffe:	2100      	movcs	r1, #0
 8008000:	3015      	adds	r0, #21
 8008002:	fa04 f000 	lsl.w	r0, r4, r0
 8008006:	fa21 f10e 	lsr.w	r1, r1, lr
 800800a:	ea40 0201 	orr.w	r2, r0, r1
 800800e:	ec43 2b10 	vmov	d0, r2, r3
 8008012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008014:	42b7      	cmp	r7, r6
 8008016:	bf3a      	itte	cc
 8008018:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800801c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008020:	2100      	movcs	r1, #0
 8008022:	380b      	subs	r0, #11
 8008024:	d017      	beq.n	8008056 <__b2d+0x92>
 8008026:	f1c0 0c20 	rsb	ip, r0, #32
 800802a:	fa04 f500 	lsl.w	r5, r4, r0
 800802e:	42be      	cmp	r6, r7
 8008030:	fa21 f40c 	lsr.w	r4, r1, ip
 8008034:	ea45 0504 	orr.w	r5, r5, r4
 8008038:	bf8c      	ite	hi
 800803a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800803e:	2400      	movls	r4, #0
 8008040:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008044:	fa01 f000 	lsl.w	r0, r1, r0
 8008048:	fa24 f40c 	lsr.w	r4, r4, ip
 800804c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008050:	ea40 0204 	orr.w	r2, r0, r4
 8008054:	e7db      	b.n	800800e <__b2d+0x4a>
 8008056:	ea44 030c 	orr.w	r3, r4, ip
 800805a:	460a      	mov	r2, r1
 800805c:	e7d7      	b.n	800800e <__b2d+0x4a>
 800805e:	bf00      	nop
 8008060:	3ff00000 	.word	0x3ff00000

08008064 <__d2b>:
 8008064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4689      	mov	r9, r1
 800806a:	2101      	movs	r1, #1
 800806c:	ec57 6b10 	vmov	r6, r7, d0
 8008070:	4690      	mov	r8, r2
 8008072:	f7ff fc09 	bl	8007888 <_Balloc>
 8008076:	4604      	mov	r4, r0
 8008078:	b930      	cbnz	r0, 8008088 <__d2b+0x24>
 800807a:	4602      	mov	r2, r0
 800807c:	4b25      	ldr	r3, [pc, #148]	; (8008114 <__d2b+0xb0>)
 800807e:	4826      	ldr	r0, [pc, #152]	; (8008118 <__d2b+0xb4>)
 8008080:	f240 310a 	movw	r1, #778	; 0x30a
 8008084:	f000 fb4e 	bl	8008724 <__assert_func>
 8008088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800808c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008090:	bb35      	cbnz	r5, 80080e0 <__d2b+0x7c>
 8008092:	2e00      	cmp	r6, #0
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	d028      	beq.n	80080ea <__d2b+0x86>
 8008098:	4668      	mov	r0, sp
 800809a:	9600      	str	r6, [sp, #0]
 800809c:	f7ff fd06 	bl	8007aac <__lo0bits>
 80080a0:	9900      	ldr	r1, [sp, #0]
 80080a2:	b300      	cbz	r0, 80080e6 <__d2b+0x82>
 80080a4:	9a01      	ldr	r2, [sp, #4]
 80080a6:	f1c0 0320 	rsb	r3, r0, #32
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	430b      	orrs	r3, r1
 80080b0:	40c2      	lsrs	r2, r0
 80080b2:	6163      	str	r3, [r4, #20]
 80080b4:	9201      	str	r2, [sp, #4]
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	61a3      	str	r3, [r4, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2202      	movne	r2, #2
 80080c0:	2201      	moveq	r2, #1
 80080c2:	6122      	str	r2, [r4, #16]
 80080c4:	b1d5      	cbz	r5, 80080fc <__d2b+0x98>
 80080c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080ca:	4405      	add	r5, r0
 80080cc:	f8c9 5000 	str.w	r5, [r9]
 80080d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080d4:	f8c8 0000 	str.w	r0, [r8]
 80080d8:	4620      	mov	r0, r4
 80080da:	b003      	add	sp, #12
 80080dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e4:	e7d5      	b.n	8008092 <__d2b+0x2e>
 80080e6:	6161      	str	r1, [r4, #20]
 80080e8:	e7e5      	b.n	80080b6 <__d2b+0x52>
 80080ea:	a801      	add	r0, sp, #4
 80080ec:	f7ff fcde 	bl	8007aac <__lo0bits>
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	6163      	str	r3, [r4, #20]
 80080f4:	2201      	movs	r2, #1
 80080f6:	6122      	str	r2, [r4, #16]
 80080f8:	3020      	adds	r0, #32
 80080fa:	e7e3      	b.n	80080c4 <__d2b+0x60>
 80080fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008104:	f8c9 0000 	str.w	r0, [r9]
 8008108:	6918      	ldr	r0, [r3, #16]
 800810a:	f7ff fcaf 	bl	8007a6c <__hi0bits>
 800810e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008112:	e7df      	b.n	80080d4 <__d2b+0x70>
 8008114:	08009bf8 	.word	0x08009bf8
 8008118:	08009c84 	.word	0x08009c84

0800811c <__ratio>:
 800811c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4688      	mov	r8, r1
 8008122:	4669      	mov	r1, sp
 8008124:	4681      	mov	r9, r0
 8008126:	f7ff ff4d 	bl	8007fc4 <__b2d>
 800812a:	a901      	add	r1, sp, #4
 800812c:	4640      	mov	r0, r8
 800812e:	ec55 4b10 	vmov	r4, r5, d0
 8008132:	f7ff ff47 	bl	8007fc4 <__b2d>
 8008136:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800813a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800813e:	eba3 0c02 	sub.w	ip, r3, r2
 8008142:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800814c:	ec51 0b10 	vmov	r0, r1, d0
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfd6      	itet	le
 8008154:	460a      	movle	r2, r1
 8008156:	462a      	movgt	r2, r5
 8008158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800815c:	468b      	mov	fp, r1
 800815e:	462f      	mov	r7, r5
 8008160:	bfd4      	ite	le
 8008162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008166:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800816a:	4620      	mov	r0, r4
 800816c:	ee10 2a10 	vmov	r2, s0
 8008170:	465b      	mov	r3, fp
 8008172:	4639      	mov	r1, r7
 8008174:	f7f8 fb6a 	bl	800084c <__aeabi_ddiv>
 8008178:	ec41 0b10 	vmov	d0, r0, r1
 800817c:	b003      	add	sp, #12
 800817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008182 <__copybits>:
 8008182:	3901      	subs	r1, #1
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	1149      	asrs	r1, r1, #5
 8008188:	6914      	ldr	r4, [r2, #16]
 800818a:	3101      	adds	r1, #1
 800818c:	f102 0314 	add.w	r3, r2, #20
 8008190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008194:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008198:	1f05      	subs	r5, r0, #4
 800819a:	42a3      	cmp	r3, r4
 800819c:	d30c      	bcc.n	80081b8 <__copybits+0x36>
 800819e:	1aa3      	subs	r3, r4, r2
 80081a0:	3b11      	subs	r3, #17
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	3211      	adds	r2, #17
 80081a8:	42a2      	cmp	r2, r4
 80081aa:	bf88      	it	hi
 80081ac:	2300      	movhi	r3, #0
 80081ae:	4418      	add	r0, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	4288      	cmp	r0, r1
 80081b4:	d305      	bcc.n	80081c2 <__copybits+0x40>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80081bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80081c0:	e7eb      	b.n	800819a <__copybits+0x18>
 80081c2:	f840 3b04 	str.w	r3, [r0], #4
 80081c6:	e7f4      	b.n	80081b2 <__copybits+0x30>

080081c8 <__any_on>:
 80081c8:	f100 0214 	add.w	r2, r0, #20
 80081cc:	6900      	ldr	r0, [r0, #16]
 80081ce:	114b      	asrs	r3, r1, #5
 80081d0:	4298      	cmp	r0, r3
 80081d2:	b510      	push	{r4, lr}
 80081d4:	db11      	blt.n	80081fa <__any_on+0x32>
 80081d6:	dd0a      	ble.n	80081ee <__any_on+0x26>
 80081d8:	f011 011f 	ands.w	r1, r1, #31
 80081dc:	d007      	beq.n	80081ee <__any_on+0x26>
 80081de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081e2:	fa24 f001 	lsr.w	r0, r4, r1
 80081e6:	fa00 f101 	lsl.w	r1, r0, r1
 80081ea:	428c      	cmp	r4, r1
 80081ec:	d10b      	bne.n	8008206 <__any_on+0x3e>
 80081ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d803      	bhi.n	80081fe <__any_on+0x36>
 80081f6:	2000      	movs	r0, #0
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	4603      	mov	r3, r0
 80081fc:	e7f7      	b.n	80081ee <__any_on+0x26>
 80081fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008202:	2900      	cmp	r1, #0
 8008204:	d0f5      	beq.n	80081f2 <__any_on+0x2a>
 8008206:	2001      	movs	r0, #1
 8008208:	e7f6      	b.n	80081f8 <__any_on+0x30>

0800820a <_calloc_r>:
 800820a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820c:	fba1 2402 	umull	r2, r4, r1, r2
 8008210:	b94c      	cbnz	r4, 8008226 <_calloc_r+0x1c>
 8008212:	4611      	mov	r1, r2
 8008214:	9201      	str	r2, [sp, #4]
 8008216:	f000 f87b 	bl	8008310 <_malloc_r>
 800821a:	9a01      	ldr	r2, [sp, #4]
 800821c:	4605      	mov	r5, r0
 800821e:	b930      	cbnz	r0, 800822e <_calloc_r+0x24>
 8008220:	4628      	mov	r0, r5
 8008222:	b003      	add	sp, #12
 8008224:	bd30      	pop	{r4, r5, pc}
 8008226:	220c      	movs	r2, #12
 8008228:	6002      	str	r2, [r0, #0]
 800822a:	2500      	movs	r5, #0
 800822c:	e7f8      	b.n	8008220 <_calloc_r+0x16>
 800822e:	4621      	mov	r1, r4
 8008230:	f7fc fbae 	bl	8004990 <memset>
 8008234:	e7f4      	b.n	8008220 <_calloc_r+0x16>
	...

08008238 <_free_r>:
 8008238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823a:	2900      	cmp	r1, #0
 800823c:	d044      	beq.n	80082c8 <_free_r+0x90>
 800823e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008242:	9001      	str	r0, [sp, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f1a1 0404 	sub.w	r4, r1, #4
 800824a:	bfb8      	it	lt
 800824c:	18e4      	addlt	r4, r4, r3
 800824e:	f000 fab3 	bl	80087b8 <__malloc_lock>
 8008252:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <_free_r+0x94>)
 8008254:	9801      	ldr	r0, [sp, #4]
 8008256:	6813      	ldr	r3, [r2, #0]
 8008258:	b933      	cbnz	r3, 8008268 <_free_r+0x30>
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	6014      	str	r4, [r2, #0]
 800825e:	b003      	add	sp, #12
 8008260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008264:	f000 baae 	b.w	80087c4 <__malloc_unlock>
 8008268:	42a3      	cmp	r3, r4
 800826a:	d908      	bls.n	800827e <_free_r+0x46>
 800826c:	6825      	ldr	r5, [r4, #0]
 800826e:	1961      	adds	r1, r4, r5
 8008270:	428b      	cmp	r3, r1
 8008272:	bf01      	itttt	eq
 8008274:	6819      	ldreq	r1, [r3, #0]
 8008276:	685b      	ldreq	r3, [r3, #4]
 8008278:	1949      	addeq	r1, r1, r5
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	e7ed      	b.n	800825a <_free_r+0x22>
 800827e:	461a      	mov	r2, r3
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b10b      	cbz	r3, 8008288 <_free_r+0x50>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d9fa      	bls.n	800827e <_free_r+0x46>
 8008288:	6811      	ldr	r1, [r2, #0]
 800828a:	1855      	adds	r5, r2, r1
 800828c:	42a5      	cmp	r5, r4
 800828e:	d10b      	bne.n	80082a8 <_free_r+0x70>
 8008290:	6824      	ldr	r4, [r4, #0]
 8008292:	4421      	add	r1, r4
 8008294:	1854      	adds	r4, r2, r1
 8008296:	42a3      	cmp	r3, r4
 8008298:	6011      	str	r1, [r2, #0]
 800829a:	d1e0      	bne.n	800825e <_free_r+0x26>
 800829c:	681c      	ldr	r4, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	6053      	str	r3, [r2, #4]
 80082a2:	4421      	add	r1, r4
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	e7da      	b.n	800825e <_free_r+0x26>
 80082a8:	d902      	bls.n	80082b0 <_free_r+0x78>
 80082aa:	230c      	movs	r3, #12
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	e7d6      	b.n	800825e <_free_r+0x26>
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	1961      	adds	r1, r4, r5
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf04      	itt	eq
 80082b8:	6819      	ldreq	r1, [r3, #0]
 80082ba:	685b      	ldreq	r3, [r3, #4]
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	bf04      	itt	eq
 80082c0:	1949      	addeq	r1, r1, r5
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	6054      	str	r4, [r2, #4]
 80082c6:	e7ca      	b.n	800825e <_free_r+0x26>
 80082c8:	b003      	add	sp, #12
 80082ca:	bd30      	pop	{r4, r5, pc}
 80082cc:	2001c588 	.word	0x2001c588

080082d0 <sbrk_aligned>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4e0e      	ldr	r6, [pc, #56]	; (800830c <sbrk_aligned+0x3c>)
 80082d4:	460c      	mov	r4, r1
 80082d6:	6831      	ldr	r1, [r6, #0]
 80082d8:	4605      	mov	r5, r0
 80082da:	b911      	cbnz	r1, 80082e2 <sbrk_aligned+0x12>
 80082dc:	f000 f9f0 	bl	80086c0 <_sbrk_r>
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f9eb 	bl	80086c0 <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d00a      	beq.n	8008304 <sbrk_aligned+0x34>
 80082ee:	1cc4      	adds	r4, r0, #3
 80082f0:	f024 0403 	bic.w	r4, r4, #3
 80082f4:	42a0      	cmp	r0, r4
 80082f6:	d007      	beq.n	8008308 <sbrk_aligned+0x38>
 80082f8:	1a21      	subs	r1, r4, r0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f9e0 	bl	80086c0 <_sbrk_r>
 8008300:	3001      	adds	r0, #1
 8008302:	d101      	bne.n	8008308 <sbrk_aligned+0x38>
 8008304:	f04f 34ff 	mov.w	r4, #4294967295
 8008308:	4620      	mov	r0, r4
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	2001c58c 	.word	0x2001c58c

08008310 <_malloc_r>:
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	1ccd      	adds	r5, r1, #3
 8008316:	f025 0503 	bic.w	r5, r5, #3
 800831a:	3508      	adds	r5, #8
 800831c:	2d0c      	cmp	r5, #12
 800831e:	bf38      	it	cc
 8008320:	250c      	movcc	r5, #12
 8008322:	2d00      	cmp	r5, #0
 8008324:	4607      	mov	r7, r0
 8008326:	db01      	blt.n	800832c <_malloc_r+0x1c>
 8008328:	42a9      	cmp	r1, r5
 800832a:	d905      	bls.n	8008338 <_malloc_r+0x28>
 800832c:	230c      	movs	r3, #12
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	2600      	movs	r6, #0
 8008332:	4630      	mov	r0, r6
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	4e2e      	ldr	r6, [pc, #184]	; (80083f4 <_malloc_r+0xe4>)
 800833a:	f000 fa3d 	bl	80087b8 <__malloc_lock>
 800833e:	6833      	ldr	r3, [r6, #0]
 8008340:	461c      	mov	r4, r3
 8008342:	bb34      	cbnz	r4, 8008392 <_malloc_r+0x82>
 8008344:	4629      	mov	r1, r5
 8008346:	4638      	mov	r0, r7
 8008348:	f7ff ffc2 	bl	80082d0 <sbrk_aligned>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	4604      	mov	r4, r0
 8008350:	d14d      	bne.n	80083ee <_malloc_r+0xde>
 8008352:	6834      	ldr	r4, [r6, #0]
 8008354:	4626      	mov	r6, r4
 8008356:	2e00      	cmp	r6, #0
 8008358:	d140      	bne.n	80083dc <_malloc_r+0xcc>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	4631      	mov	r1, r6
 800835e:	4638      	mov	r0, r7
 8008360:	eb04 0803 	add.w	r8, r4, r3
 8008364:	f000 f9ac 	bl	80086c0 <_sbrk_r>
 8008368:	4580      	cmp	r8, r0
 800836a:	d13a      	bne.n	80083e2 <_malloc_r+0xd2>
 800836c:	6821      	ldr	r1, [r4, #0]
 800836e:	3503      	adds	r5, #3
 8008370:	1a6d      	subs	r5, r5, r1
 8008372:	f025 0503 	bic.w	r5, r5, #3
 8008376:	3508      	adds	r5, #8
 8008378:	2d0c      	cmp	r5, #12
 800837a:	bf38      	it	cc
 800837c:	250c      	movcc	r5, #12
 800837e:	4629      	mov	r1, r5
 8008380:	4638      	mov	r0, r7
 8008382:	f7ff ffa5 	bl	80082d0 <sbrk_aligned>
 8008386:	3001      	adds	r0, #1
 8008388:	d02b      	beq.n	80083e2 <_malloc_r+0xd2>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	442b      	add	r3, r5
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	e00e      	b.n	80083b0 <_malloc_r+0xa0>
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	1b52      	subs	r2, r2, r5
 8008396:	d41e      	bmi.n	80083d6 <_malloc_r+0xc6>
 8008398:	2a0b      	cmp	r2, #11
 800839a:	d916      	bls.n	80083ca <_malloc_r+0xba>
 800839c:	1961      	adds	r1, r4, r5
 800839e:	42a3      	cmp	r3, r4
 80083a0:	6025      	str	r5, [r4, #0]
 80083a2:	bf18      	it	ne
 80083a4:	6059      	strne	r1, [r3, #4]
 80083a6:	6863      	ldr	r3, [r4, #4]
 80083a8:	bf08      	it	eq
 80083aa:	6031      	streq	r1, [r6, #0]
 80083ac:	5162      	str	r2, [r4, r5]
 80083ae:	604b      	str	r3, [r1, #4]
 80083b0:	4638      	mov	r0, r7
 80083b2:	f104 060b 	add.w	r6, r4, #11
 80083b6:	f000 fa05 	bl	80087c4 <__malloc_unlock>
 80083ba:	f026 0607 	bic.w	r6, r6, #7
 80083be:	1d23      	adds	r3, r4, #4
 80083c0:	1af2      	subs	r2, r6, r3
 80083c2:	d0b6      	beq.n	8008332 <_malloc_r+0x22>
 80083c4:	1b9b      	subs	r3, r3, r6
 80083c6:	50a3      	str	r3, [r4, r2]
 80083c8:	e7b3      	b.n	8008332 <_malloc_r+0x22>
 80083ca:	6862      	ldr	r2, [r4, #4]
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	bf0c      	ite	eq
 80083d0:	6032      	streq	r2, [r6, #0]
 80083d2:	605a      	strne	r2, [r3, #4]
 80083d4:	e7ec      	b.n	80083b0 <_malloc_r+0xa0>
 80083d6:	4623      	mov	r3, r4
 80083d8:	6864      	ldr	r4, [r4, #4]
 80083da:	e7b2      	b.n	8008342 <_malloc_r+0x32>
 80083dc:	4634      	mov	r4, r6
 80083de:	6876      	ldr	r6, [r6, #4]
 80083e0:	e7b9      	b.n	8008356 <_malloc_r+0x46>
 80083e2:	230c      	movs	r3, #12
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	4638      	mov	r0, r7
 80083e8:	f000 f9ec 	bl	80087c4 <__malloc_unlock>
 80083ec:	e7a1      	b.n	8008332 <_malloc_r+0x22>
 80083ee:	6025      	str	r5, [r4, #0]
 80083f0:	e7de      	b.n	80083b0 <_malloc_r+0xa0>
 80083f2:	bf00      	nop
 80083f4:	2001c588 	.word	0x2001c588

080083f8 <__ssputs_r>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	688e      	ldr	r6, [r1, #8]
 80083fe:	429e      	cmp	r6, r3
 8008400:	4682      	mov	sl, r0
 8008402:	460c      	mov	r4, r1
 8008404:	4690      	mov	r8, r2
 8008406:	461f      	mov	r7, r3
 8008408:	d838      	bhi.n	800847c <__ssputs_r+0x84>
 800840a:	898a      	ldrh	r2, [r1, #12]
 800840c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008410:	d032      	beq.n	8008478 <__ssputs_r+0x80>
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	6909      	ldr	r1, [r1, #16]
 8008416:	eba5 0901 	sub.w	r9, r5, r1
 800841a:	6965      	ldr	r5, [r4, #20]
 800841c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008424:	3301      	adds	r3, #1
 8008426:	444b      	add	r3, r9
 8008428:	106d      	asrs	r5, r5, #1
 800842a:	429d      	cmp	r5, r3
 800842c:	bf38      	it	cc
 800842e:	461d      	movcc	r5, r3
 8008430:	0553      	lsls	r3, r2, #21
 8008432:	d531      	bpl.n	8008498 <__ssputs_r+0xa0>
 8008434:	4629      	mov	r1, r5
 8008436:	f7ff ff6b 	bl	8008310 <_malloc_r>
 800843a:	4606      	mov	r6, r0
 800843c:	b950      	cbnz	r0, 8008454 <__ssputs_r+0x5c>
 800843e:	230c      	movs	r3, #12
 8008440:	f8ca 3000 	str.w	r3, [sl]
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008454:	6921      	ldr	r1, [r4, #16]
 8008456:	464a      	mov	r2, r9
 8008458:	f7fc fa8c 	bl	8004974 <memcpy>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	6126      	str	r6, [r4, #16]
 800846a:	6165      	str	r5, [r4, #20]
 800846c:	444e      	add	r6, r9
 800846e:	eba5 0509 	sub.w	r5, r5, r9
 8008472:	6026      	str	r6, [r4, #0]
 8008474:	60a5      	str	r5, [r4, #8]
 8008476:	463e      	mov	r6, r7
 8008478:	42be      	cmp	r6, r7
 800847a:	d900      	bls.n	800847e <__ssputs_r+0x86>
 800847c:	463e      	mov	r6, r7
 800847e:	6820      	ldr	r0, [r4, #0]
 8008480:	4632      	mov	r2, r6
 8008482:	4641      	mov	r1, r8
 8008484:	f000 f97e 	bl	8008784 <memmove>
 8008488:	68a3      	ldr	r3, [r4, #8]
 800848a:	1b9b      	subs	r3, r3, r6
 800848c:	60a3      	str	r3, [r4, #8]
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	4433      	add	r3, r6
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	2000      	movs	r0, #0
 8008496:	e7db      	b.n	8008450 <__ssputs_r+0x58>
 8008498:	462a      	mov	r2, r5
 800849a:	f000 f999 	bl	80087d0 <_realloc_r>
 800849e:	4606      	mov	r6, r0
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d1e1      	bne.n	8008468 <__ssputs_r+0x70>
 80084a4:	6921      	ldr	r1, [r4, #16]
 80084a6:	4650      	mov	r0, sl
 80084a8:	f7ff fec6 	bl	8008238 <_free_r>
 80084ac:	e7c7      	b.n	800843e <__ssputs_r+0x46>
	...

080084b0 <_svfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4698      	mov	r8, r3
 80084b6:	898b      	ldrh	r3, [r1, #12]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	b09d      	sub	sp, #116	; 0x74
 80084bc:	4607      	mov	r7, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	d50e      	bpl.n	80084e2 <_svfiprintf_r+0x32>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b963      	cbnz	r3, 80084e2 <_svfiprintf_r+0x32>
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	f7ff ff21 	bl	8008310 <_malloc_r>
 80084ce:	6028      	str	r0, [r5, #0]
 80084d0:	6128      	str	r0, [r5, #16]
 80084d2:	b920      	cbnz	r0, 80084de <_svfiprintf_r+0x2e>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e0d1      	b.n	8008682 <_svfiprintf_r+0x1d2>
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	616b      	str	r3, [r5, #20]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	2320      	movs	r3, #32
 80084e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f0:	2330      	movs	r3, #48	; 0x30
 80084f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800869c <_svfiprintf_r+0x1ec>
 80084f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fa:	f04f 0901 	mov.w	r9, #1
 80084fe:	4623      	mov	r3, r4
 8008500:	469a      	mov	sl, r3
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	b10a      	cbz	r2, 800850c <_svfiprintf_r+0x5c>
 8008508:	2a25      	cmp	r2, #37	; 0x25
 800850a:	d1f9      	bne.n	8008500 <_svfiprintf_r+0x50>
 800850c:	ebba 0b04 	subs.w	fp, sl, r4
 8008510:	d00b      	beq.n	800852a <_svfiprintf_r+0x7a>
 8008512:	465b      	mov	r3, fp
 8008514:	4622      	mov	r2, r4
 8008516:	4629      	mov	r1, r5
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff6d 	bl	80083f8 <__ssputs_r>
 800851e:	3001      	adds	r0, #1
 8008520:	f000 80aa 	beq.w	8008678 <_svfiprintf_r+0x1c8>
 8008524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008526:	445a      	add	r2, fp
 8008528:	9209      	str	r2, [sp, #36]	; 0x24
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80a2 	beq.w	8008678 <_svfiprintf_r+0x1c8>
 8008534:	2300      	movs	r3, #0
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853e:	f10a 0a01 	add.w	sl, sl, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854a:	931a      	str	r3, [sp, #104]	; 0x68
 800854c:	4654      	mov	r4, sl
 800854e:	2205      	movs	r2, #5
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	4851      	ldr	r0, [pc, #324]	; (800869c <_svfiprintf_r+0x1ec>)
 8008556:	f7f7 fe43 	bl	80001e0 <memchr>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	b9d8      	cbnz	r0, 8008596 <_svfiprintf_r+0xe6>
 800855e:	06d0      	lsls	r0, r2, #27
 8008560:	bf44      	itt	mi
 8008562:	2320      	movmi	r3, #32
 8008564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008568:	0711      	lsls	r1, r2, #28
 800856a:	bf44      	itt	mi
 800856c:	232b      	movmi	r3, #43	; 0x2b
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b2a      	cmp	r3, #42	; 0x2a
 8008578:	d015      	beq.n	80085a6 <_svfiprintf_r+0xf6>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	4654      	mov	r4, sl
 800857e:	2000      	movs	r0, #0
 8008580:	f04f 0c0a 	mov.w	ip, #10
 8008584:	4621      	mov	r1, r4
 8008586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858a:	3b30      	subs	r3, #48	; 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d94e      	bls.n	800862e <_svfiprintf_r+0x17e>
 8008590:	b1b0      	cbz	r0, 80085c0 <_svfiprintf_r+0x110>
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	e014      	b.n	80085c0 <_svfiprintf_r+0x110>
 8008596:	eba0 0308 	sub.w	r3, r0, r8
 800859a:	fa09 f303 	lsl.w	r3, r9, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	9304      	str	r3, [sp, #16]
 80085a2:	46a2      	mov	sl, r4
 80085a4:	e7d2      	b.n	800854c <_svfiprintf_r+0x9c>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbb      	ittet	lt
 80085b2:	425b      	neglt	r3, r3
 80085b4:	f042 0202 	orrlt.w	r2, r2, #2
 80085b8:	9307      	strge	r3, [sp, #28]
 80085ba:	9307      	strlt	r3, [sp, #28]
 80085bc:	bfb8      	it	lt
 80085be:	9204      	strlt	r2, [sp, #16]
 80085c0:	7823      	ldrb	r3, [r4, #0]
 80085c2:	2b2e      	cmp	r3, #46	; 0x2e
 80085c4:	d10c      	bne.n	80085e0 <_svfiprintf_r+0x130>
 80085c6:	7863      	ldrb	r3, [r4, #1]
 80085c8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ca:	d135      	bne.n	8008638 <_svfiprintf_r+0x188>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9203      	str	r2, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb8      	it	lt
 80085d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085dc:	3402      	adds	r4, #2
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086ac <_svfiprintf_r+0x1fc>
 80085e4:	7821      	ldrb	r1, [r4, #0]
 80085e6:	2203      	movs	r2, #3
 80085e8:	4650      	mov	r0, sl
 80085ea:	f7f7 fdf9 	bl	80001e0 <memchr>
 80085ee:	b140      	cbz	r0, 8008602 <_svfiprintf_r+0x152>
 80085f0:	2340      	movs	r3, #64	; 0x40
 80085f2:	eba0 000a 	sub.w	r0, r0, sl
 80085f6:	fa03 f000 	lsl.w	r0, r3, r0
 80085fa:	9b04      	ldr	r3, [sp, #16]
 80085fc:	4303      	orrs	r3, r0
 80085fe:	3401      	adds	r4, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4826      	ldr	r0, [pc, #152]	; (80086a0 <_svfiprintf_r+0x1f0>)
 8008608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860c:	2206      	movs	r2, #6
 800860e:	f7f7 fde7 	bl	80001e0 <memchr>
 8008612:	2800      	cmp	r0, #0
 8008614:	d038      	beq.n	8008688 <_svfiprintf_r+0x1d8>
 8008616:	4b23      	ldr	r3, [pc, #140]	; (80086a4 <_svfiprintf_r+0x1f4>)
 8008618:	bb1b      	cbnz	r3, 8008662 <_svfiprintf_r+0x1b2>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	f023 0307 	bic.w	r3, r3, #7
 8008622:	3308      	adds	r3, #8
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	4433      	add	r3, r6
 800862a:	9309      	str	r3, [sp, #36]	; 0x24
 800862c:	e767      	b.n	80084fe <_svfiprintf_r+0x4e>
 800862e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008632:	460c      	mov	r4, r1
 8008634:	2001      	movs	r0, #1
 8008636:	e7a5      	b.n	8008584 <_svfiprintf_r+0xd4>
 8008638:	2300      	movs	r3, #0
 800863a:	3401      	adds	r4, #1
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	4619      	mov	r1, r3
 8008640:	f04f 0c0a 	mov.w	ip, #10
 8008644:	4620      	mov	r0, r4
 8008646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864a:	3a30      	subs	r2, #48	; 0x30
 800864c:	2a09      	cmp	r2, #9
 800864e:	d903      	bls.n	8008658 <_svfiprintf_r+0x1a8>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0c5      	beq.n	80085e0 <_svfiprintf_r+0x130>
 8008654:	9105      	str	r1, [sp, #20]
 8008656:	e7c3      	b.n	80085e0 <_svfiprintf_r+0x130>
 8008658:	fb0c 2101 	mla	r1, ip, r1, r2
 800865c:	4604      	mov	r4, r0
 800865e:	2301      	movs	r3, #1
 8008660:	e7f0      	b.n	8008644 <_svfiprintf_r+0x194>
 8008662:	ab03      	add	r3, sp, #12
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	462a      	mov	r2, r5
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <_svfiprintf_r+0x1f8>)
 800866a:	a904      	add	r1, sp, #16
 800866c:	4638      	mov	r0, r7
 800866e:	f7fc fa37 	bl	8004ae0 <_printf_float>
 8008672:	1c42      	adds	r2, r0, #1
 8008674:	4606      	mov	r6, r0
 8008676:	d1d6      	bne.n	8008626 <_svfiprintf_r+0x176>
 8008678:	89ab      	ldrh	r3, [r5, #12]
 800867a:	065b      	lsls	r3, r3, #25
 800867c:	f53f af2c 	bmi.w	80084d8 <_svfiprintf_r+0x28>
 8008680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008682:	b01d      	add	sp, #116	; 0x74
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	ab03      	add	r3, sp, #12
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	462a      	mov	r2, r5
 800868e:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <_svfiprintf_r+0x1f8>)
 8008690:	a904      	add	r1, sp, #16
 8008692:	4638      	mov	r0, r7
 8008694:	f7fc fcc8 	bl	8005028 <_printf_i>
 8008698:	e7eb      	b.n	8008672 <_svfiprintf_r+0x1c2>
 800869a:	bf00      	nop
 800869c:	08009ddc 	.word	0x08009ddc
 80086a0:	08009de6 	.word	0x08009de6
 80086a4:	08004ae1 	.word	0x08004ae1
 80086a8:	080083f9 	.word	0x080083f9
 80086ac:	08009de2 	.word	0x08009de2

080086b0 <nan>:
 80086b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086b8 <nan+0x8>
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	00000000 	.word	0x00000000
 80086bc:	7ff80000 	.word	0x7ff80000

080086c0 <_sbrk_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_sbrk_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f9 fb82 	bl	8001dd4 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_sbrk_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_sbrk_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	2001c590 	.word	0x2001c590

080086e0 <strncmp>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	b17a      	cbz	r2, 8008704 <strncmp+0x24>
 80086e4:	4603      	mov	r3, r0
 80086e6:	3901      	subs	r1, #1
 80086e8:	1884      	adds	r4, r0, r2
 80086ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086f2:	4290      	cmp	r0, r2
 80086f4:	d101      	bne.n	80086fa <strncmp+0x1a>
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	d101      	bne.n	80086fe <strncmp+0x1e>
 80086fa:	1a80      	subs	r0, r0, r2
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	2800      	cmp	r0, #0
 8008700:	d1f3      	bne.n	80086ea <strncmp+0xa>
 8008702:	e7fa      	b.n	80086fa <strncmp+0x1a>
 8008704:	4610      	mov	r0, r2
 8008706:	e7f9      	b.n	80086fc <strncmp+0x1c>

08008708 <__ascii_wctomb>:
 8008708:	b149      	cbz	r1, 800871e <__ascii_wctomb+0x16>
 800870a:	2aff      	cmp	r2, #255	; 0xff
 800870c:	bf85      	ittet	hi
 800870e:	238a      	movhi	r3, #138	; 0x8a
 8008710:	6003      	strhi	r3, [r0, #0]
 8008712:	700a      	strbls	r2, [r1, #0]
 8008714:	f04f 30ff 	movhi.w	r0, #4294967295
 8008718:	bf98      	it	ls
 800871a:	2001      	movls	r0, #1
 800871c:	4770      	bx	lr
 800871e:	4608      	mov	r0, r1
 8008720:	4770      	bx	lr
	...

08008724 <__assert_func>:
 8008724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008726:	4614      	mov	r4, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <__assert_func+0x2c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4605      	mov	r5, r0
 8008730:	68d8      	ldr	r0, [r3, #12]
 8008732:	b14c      	cbz	r4, 8008748 <__assert_func+0x24>
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <__assert_func+0x30>)
 8008736:	9100      	str	r1, [sp, #0]
 8008738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800873c:	4906      	ldr	r1, [pc, #24]	; (8008758 <__assert_func+0x34>)
 800873e:	462b      	mov	r3, r5
 8008740:	f000 f80e 	bl	8008760 <fiprintf>
 8008744:	f000 fa8c 	bl	8008c60 <abort>
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <__assert_func+0x38>)
 800874a:	461c      	mov	r4, r3
 800874c:	e7f3      	b.n	8008736 <__assert_func+0x12>
 800874e:	bf00      	nop
 8008750:	20000250 	.word	0x20000250
 8008754:	08009ded 	.word	0x08009ded
 8008758:	08009dfa 	.word	0x08009dfa
 800875c:	08009e28 	.word	0x08009e28

08008760 <fiprintf>:
 8008760:	b40e      	push	{r1, r2, r3}
 8008762:	b503      	push	{r0, r1, lr}
 8008764:	4601      	mov	r1, r0
 8008766:	ab03      	add	r3, sp, #12
 8008768:	4805      	ldr	r0, [pc, #20]	; (8008780 <fiprintf+0x20>)
 800876a:	f853 2b04 	ldr.w	r2, [r3], #4
 800876e:	6800      	ldr	r0, [r0, #0]
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	f000 f885 	bl	8008880 <_vfiprintf_r>
 8008776:	b002      	add	sp, #8
 8008778:	f85d eb04 	ldr.w	lr, [sp], #4
 800877c:	b003      	add	sp, #12
 800877e:	4770      	bx	lr
 8008780:	20000250 	.word	0x20000250

08008784 <memmove>:
 8008784:	4288      	cmp	r0, r1
 8008786:	b510      	push	{r4, lr}
 8008788:	eb01 0402 	add.w	r4, r1, r2
 800878c:	d902      	bls.n	8008794 <memmove+0x10>
 800878e:	4284      	cmp	r4, r0
 8008790:	4623      	mov	r3, r4
 8008792:	d807      	bhi.n	80087a4 <memmove+0x20>
 8008794:	1e43      	subs	r3, r0, #1
 8008796:	42a1      	cmp	r1, r4
 8008798:	d008      	beq.n	80087ac <memmove+0x28>
 800879a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800879e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087a2:	e7f8      	b.n	8008796 <memmove+0x12>
 80087a4:	4402      	add	r2, r0
 80087a6:	4601      	mov	r1, r0
 80087a8:	428a      	cmp	r2, r1
 80087aa:	d100      	bne.n	80087ae <memmove+0x2a>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087b6:	e7f7      	b.n	80087a8 <memmove+0x24>

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_lock+0x8>)
 80087ba:	f000 bc11 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	2001c594 	.word	0x2001c594

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__malloc_unlock+0x8>)
 80087c6:	f000 bc0c 	b.w	8008fe2 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	2001c594 	.word	0x2001c594

080087d0 <_realloc_r>:
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	4680      	mov	r8, r0
 80087d6:	4614      	mov	r4, r2
 80087d8:	460e      	mov	r6, r1
 80087da:	b921      	cbnz	r1, 80087e6 <_realloc_r+0x16>
 80087dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e0:	4611      	mov	r1, r2
 80087e2:	f7ff bd95 	b.w	8008310 <_malloc_r>
 80087e6:	b92a      	cbnz	r2, 80087f4 <_realloc_r+0x24>
 80087e8:	f7ff fd26 	bl	8008238 <_free_r>
 80087ec:	4625      	mov	r5, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f4:	f000 fc5c 	bl	80090b0 <_malloc_usable_size_r>
 80087f8:	4284      	cmp	r4, r0
 80087fa:	4607      	mov	r7, r0
 80087fc:	d802      	bhi.n	8008804 <_realloc_r+0x34>
 80087fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008802:	d812      	bhi.n	800882a <_realloc_r+0x5a>
 8008804:	4621      	mov	r1, r4
 8008806:	4640      	mov	r0, r8
 8008808:	f7ff fd82 	bl	8008310 <_malloc_r>
 800880c:	4605      	mov	r5, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d0ed      	beq.n	80087ee <_realloc_r+0x1e>
 8008812:	42bc      	cmp	r4, r7
 8008814:	4622      	mov	r2, r4
 8008816:	4631      	mov	r1, r6
 8008818:	bf28      	it	cs
 800881a:	463a      	movcs	r2, r7
 800881c:	f7fc f8aa 	bl	8004974 <memcpy>
 8008820:	4631      	mov	r1, r6
 8008822:	4640      	mov	r0, r8
 8008824:	f7ff fd08 	bl	8008238 <_free_r>
 8008828:	e7e1      	b.n	80087ee <_realloc_r+0x1e>
 800882a:	4635      	mov	r5, r6
 800882c:	e7df      	b.n	80087ee <_realloc_r+0x1e>

0800882e <__sfputc_r>:
 800882e:	6893      	ldr	r3, [r2, #8]
 8008830:	3b01      	subs	r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	b410      	push	{r4}
 8008836:	6093      	str	r3, [r2, #8]
 8008838:	da08      	bge.n	800884c <__sfputc_r+0x1e>
 800883a:	6994      	ldr	r4, [r2, #24]
 800883c:	42a3      	cmp	r3, r4
 800883e:	db01      	blt.n	8008844 <__sfputc_r+0x16>
 8008840:	290a      	cmp	r1, #10
 8008842:	d103      	bne.n	800884c <__sfputc_r+0x1e>
 8008844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008848:	f000 b94a 	b.w	8008ae0 <__swbuf_r>
 800884c:	6813      	ldr	r3, [r2, #0]
 800884e:	1c58      	adds	r0, r3, #1
 8008850:	6010      	str	r0, [r2, #0]
 8008852:	7019      	strb	r1, [r3, #0]
 8008854:	4608      	mov	r0, r1
 8008856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800885a:	4770      	bx	lr

0800885c <__sfputs_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	4614      	mov	r4, r2
 8008864:	18d5      	adds	r5, r2, r3
 8008866:	42ac      	cmp	r4, r5
 8008868:	d101      	bne.n	800886e <__sfputs_r+0x12>
 800886a:	2000      	movs	r0, #0
 800886c:	e007      	b.n	800887e <__sfputs_r+0x22>
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	463a      	mov	r2, r7
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff ffda 	bl	800882e <__sfputc_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d1f3      	bne.n	8008866 <__sfputs_r+0xa>
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008880 <_vfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	460d      	mov	r5, r1
 8008886:	b09d      	sub	sp, #116	; 0x74
 8008888:	4614      	mov	r4, r2
 800888a:	4698      	mov	r8, r3
 800888c:	4606      	mov	r6, r0
 800888e:	b118      	cbz	r0, 8008898 <_vfiprintf_r+0x18>
 8008890:	6983      	ldr	r3, [r0, #24]
 8008892:	b90b      	cbnz	r3, 8008898 <_vfiprintf_r+0x18>
 8008894:	f000 fb06 	bl	8008ea4 <__sinit>
 8008898:	4b89      	ldr	r3, [pc, #548]	; (8008ac0 <_vfiprintf_r+0x240>)
 800889a:	429d      	cmp	r5, r3
 800889c:	d11b      	bne.n	80088d6 <_vfiprintf_r+0x56>
 800889e:	6875      	ldr	r5, [r6, #4]
 80088a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_vfiprintf_r+0x32>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	059a      	lsls	r2, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_vfiprintf_r+0x32>
 80088ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ae:	f000 fb97 	bl	8008fe0 <__retarget_lock_acquire_recursive>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	071b      	lsls	r3, r3, #28
 80088b6:	d501      	bpl.n	80088bc <_vfiprintf_r+0x3c>
 80088b8:	692b      	ldr	r3, [r5, #16]
 80088ba:	b9eb      	cbnz	r3, 80088f8 <_vfiprintf_r+0x78>
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f960 	bl	8008b84 <__swsetup_r>
 80088c4:	b1c0      	cbz	r0, 80088f8 <_vfiprintf_r+0x78>
 80088c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088c8:	07dc      	lsls	r4, r3, #31
 80088ca:	d50e      	bpl.n	80088ea <_vfiprintf_r+0x6a>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	b01d      	add	sp, #116	; 0x74
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	4b7b      	ldr	r3, [pc, #492]	; (8008ac4 <_vfiprintf_r+0x244>)
 80088d8:	429d      	cmp	r5, r3
 80088da:	d101      	bne.n	80088e0 <_vfiprintf_r+0x60>
 80088dc:	68b5      	ldr	r5, [r6, #8]
 80088de:	e7df      	b.n	80088a0 <_vfiprintf_r+0x20>
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <_vfiprintf_r+0x248>)
 80088e2:	429d      	cmp	r5, r3
 80088e4:	bf08      	it	eq
 80088e6:	68f5      	ldreq	r5, [r6, #12]
 80088e8:	e7da      	b.n	80088a0 <_vfiprintf_r+0x20>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	0598      	lsls	r0, r3, #22
 80088ee:	d4ed      	bmi.n	80088cc <_vfiprintf_r+0x4c>
 80088f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088f2:	f000 fb76 	bl	8008fe2 <__retarget_lock_release_recursive>
 80088f6:	e7e9      	b.n	80088cc <_vfiprintf_r+0x4c>
 80088f8:	2300      	movs	r3, #0
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	2320      	movs	r3, #32
 80088fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008902:	f8cd 800c 	str.w	r8, [sp, #12]
 8008906:	2330      	movs	r3, #48	; 0x30
 8008908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008acc <_vfiprintf_r+0x24c>
 800890c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008910:	f04f 0901 	mov.w	r9, #1
 8008914:	4623      	mov	r3, r4
 8008916:	469a      	mov	sl, r3
 8008918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891c:	b10a      	cbz	r2, 8008922 <_vfiprintf_r+0xa2>
 800891e:	2a25      	cmp	r2, #37	; 0x25
 8008920:	d1f9      	bne.n	8008916 <_vfiprintf_r+0x96>
 8008922:	ebba 0b04 	subs.w	fp, sl, r4
 8008926:	d00b      	beq.n	8008940 <_vfiprintf_r+0xc0>
 8008928:	465b      	mov	r3, fp
 800892a:	4622      	mov	r2, r4
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff ff94 	bl	800885c <__sfputs_r>
 8008934:	3001      	adds	r0, #1
 8008936:	f000 80aa 	beq.w	8008a8e <_vfiprintf_r+0x20e>
 800893a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893c:	445a      	add	r2, fp
 800893e:	9209      	str	r2, [sp, #36]	; 0x24
 8008940:	f89a 3000 	ldrb.w	r3, [sl]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80a2 	beq.w	8008a8e <_vfiprintf_r+0x20e>
 800894a:	2300      	movs	r3, #0
 800894c:	f04f 32ff 	mov.w	r2, #4294967295
 8008950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008954:	f10a 0a01 	add.w	sl, sl, #1
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	9307      	str	r3, [sp, #28]
 800895c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008960:	931a      	str	r3, [sp, #104]	; 0x68
 8008962:	4654      	mov	r4, sl
 8008964:	2205      	movs	r2, #5
 8008966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896a:	4858      	ldr	r0, [pc, #352]	; (8008acc <_vfiprintf_r+0x24c>)
 800896c:	f7f7 fc38 	bl	80001e0 <memchr>
 8008970:	9a04      	ldr	r2, [sp, #16]
 8008972:	b9d8      	cbnz	r0, 80089ac <_vfiprintf_r+0x12c>
 8008974:	06d1      	lsls	r1, r2, #27
 8008976:	bf44      	itt	mi
 8008978:	2320      	movmi	r3, #32
 800897a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897e:	0713      	lsls	r3, r2, #28
 8008980:	bf44      	itt	mi
 8008982:	232b      	movmi	r3, #43	; 0x2b
 8008984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008988:	f89a 3000 	ldrb.w	r3, [sl]
 800898c:	2b2a      	cmp	r3, #42	; 0x2a
 800898e:	d015      	beq.n	80089bc <_vfiprintf_r+0x13c>
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	4654      	mov	r4, sl
 8008994:	2000      	movs	r0, #0
 8008996:	f04f 0c0a 	mov.w	ip, #10
 800899a:	4621      	mov	r1, r4
 800899c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a0:	3b30      	subs	r3, #48	; 0x30
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	d94e      	bls.n	8008a44 <_vfiprintf_r+0x1c4>
 80089a6:	b1b0      	cbz	r0, 80089d6 <_vfiprintf_r+0x156>
 80089a8:	9207      	str	r2, [sp, #28]
 80089aa:	e014      	b.n	80089d6 <_vfiprintf_r+0x156>
 80089ac:	eba0 0308 	sub.w	r3, r0, r8
 80089b0:	fa09 f303 	lsl.w	r3, r9, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	46a2      	mov	sl, r4
 80089ba:	e7d2      	b.n	8008962 <_vfiprintf_r+0xe2>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	1d19      	adds	r1, r3, #4
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	9103      	str	r1, [sp, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bfbb      	ittet	lt
 80089c8:	425b      	neglt	r3, r3
 80089ca:	f042 0202 	orrlt.w	r2, r2, #2
 80089ce:	9307      	strge	r3, [sp, #28]
 80089d0:	9307      	strlt	r3, [sp, #28]
 80089d2:	bfb8      	it	lt
 80089d4:	9204      	strlt	r2, [sp, #16]
 80089d6:	7823      	ldrb	r3, [r4, #0]
 80089d8:	2b2e      	cmp	r3, #46	; 0x2e
 80089da:	d10c      	bne.n	80089f6 <_vfiprintf_r+0x176>
 80089dc:	7863      	ldrb	r3, [r4, #1]
 80089de:	2b2a      	cmp	r3, #42	; 0x2a
 80089e0:	d135      	bne.n	8008a4e <_vfiprintf_r+0x1ce>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	9203      	str	r2, [sp, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfb8      	it	lt
 80089ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f2:	3402      	adds	r4, #2
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008adc <_vfiprintf_r+0x25c>
 80089fa:	7821      	ldrb	r1, [r4, #0]
 80089fc:	2203      	movs	r2, #3
 80089fe:	4650      	mov	r0, sl
 8008a00:	f7f7 fbee 	bl	80001e0 <memchr>
 8008a04:	b140      	cbz	r0, 8008a18 <_vfiprintf_r+0x198>
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	eba0 000a 	sub.w	r0, r0, sl
 8008a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	4303      	orrs	r3, r0
 8008a14:	3401      	adds	r4, #1
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	482c      	ldr	r0, [pc, #176]	; (8008ad0 <_vfiprintf_r+0x250>)
 8008a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a22:	2206      	movs	r2, #6
 8008a24:	f7f7 fbdc 	bl	80001e0 <memchr>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d03f      	beq.n	8008aac <_vfiprintf_r+0x22c>
 8008a2c:	4b29      	ldr	r3, [pc, #164]	; (8008ad4 <_vfiprintf_r+0x254>)
 8008a2e:	bb1b      	cbnz	r3, 8008a78 <_vfiprintf_r+0x1f8>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	3307      	adds	r3, #7
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	3308      	adds	r3, #8
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3e:	443b      	add	r3, r7
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	e767      	b.n	8008914 <_vfiprintf_r+0x94>
 8008a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a48:	460c      	mov	r4, r1
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	e7a5      	b.n	800899a <_vfiprintf_r+0x11a>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	3401      	adds	r4, #1
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	4619      	mov	r1, r3
 8008a56:	f04f 0c0a 	mov.w	ip, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a60:	3a30      	subs	r2, #48	; 0x30
 8008a62:	2a09      	cmp	r2, #9
 8008a64:	d903      	bls.n	8008a6e <_vfiprintf_r+0x1ee>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0c5      	beq.n	80089f6 <_vfiprintf_r+0x176>
 8008a6a:	9105      	str	r1, [sp, #20]
 8008a6c:	e7c3      	b.n	80089f6 <_vfiprintf_r+0x176>
 8008a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a72:	4604      	mov	r4, r0
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7f0      	b.n	8008a5a <_vfiprintf_r+0x1da>
 8008a78:	ab03      	add	r3, sp, #12
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <_vfiprintf_r+0x258>)
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7fc f82c 	bl	8004ae0 <_printf_float>
 8008a88:	4607      	mov	r7, r0
 8008a8a:	1c78      	adds	r0, r7, #1
 8008a8c:	d1d6      	bne.n	8008a3c <_vfiprintf_r+0x1bc>
 8008a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a90:	07d9      	lsls	r1, r3, #31
 8008a92:	d405      	bmi.n	8008aa0 <_vfiprintf_r+0x220>
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	059a      	lsls	r2, r3, #22
 8008a98:	d402      	bmi.n	8008aa0 <_vfiprintf_r+0x220>
 8008a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a9c:	f000 faa1 	bl	8008fe2 <__retarget_lock_release_recursive>
 8008aa0:	89ab      	ldrh	r3, [r5, #12]
 8008aa2:	065b      	lsls	r3, r3, #25
 8008aa4:	f53f af12 	bmi.w	80088cc <_vfiprintf_r+0x4c>
 8008aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aaa:	e711      	b.n	80088d0 <_vfiprintf_r+0x50>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <_vfiprintf_r+0x258>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7fc fab6 	bl	8005028 <_printf_i>
 8008abc:	e7e4      	b.n	8008a88 <_vfiprintf_r+0x208>
 8008abe:	bf00      	nop
 8008ac0:	08009e4c 	.word	0x08009e4c
 8008ac4:	08009e6c 	.word	0x08009e6c
 8008ac8:	08009e2c 	.word	0x08009e2c
 8008acc:	08009ddc 	.word	0x08009ddc
 8008ad0:	08009de6 	.word	0x08009de6
 8008ad4:	08004ae1 	.word	0x08004ae1
 8008ad8:	0800885d 	.word	0x0800885d
 8008adc:	08009de2 	.word	0x08009de2

08008ae0 <__swbuf_r>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	460e      	mov	r6, r1
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b118      	cbz	r0, 8008af2 <__swbuf_r+0x12>
 8008aea:	6983      	ldr	r3, [r0, #24]
 8008aec:	b90b      	cbnz	r3, 8008af2 <__swbuf_r+0x12>
 8008aee:	f000 f9d9 	bl	8008ea4 <__sinit>
 8008af2:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <__swbuf_r+0x98>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d12b      	bne.n	8008b50 <__swbuf_r+0x70>
 8008af8:	686c      	ldr	r4, [r5, #4]
 8008afa:	69a3      	ldr	r3, [r4, #24]
 8008afc:	60a3      	str	r3, [r4, #8]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	071a      	lsls	r2, r3, #28
 8008b02:	d52f      	bpl.n	8008b64 <__swbuf_r+0x84>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	b36b      	cbz	r3, 8008b64 <__swbuf_r+0x84>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	1ac0      	subs	r0, r0, r3
 8008b0e:	6963      	ldr	r3, [r4, #20]
 8008b10:	b2f6      	uxtb	r6, r6
 8008b12:	4283      	cmp	r3, r0
 8008b14:	4637      	mov	r7, r6
 8008b16:	dc04      	bgt.n	8008b22 <__swbuf_r+0x42>
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f92e 	bl	8008d7c <_fflush_r>
 8008b20:	bb30      	cbnz	r0, 8008b70 <__swbuf_r+0x90>
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	701e      	strb	r6, [r3, #0]
 8008b30:	6963      	ldr	r3, [r4, #20]
 8008b32:	3001      	adds	r0, #1
 8008b34:	4283      	cmp	r3, r0
 8008b36:	d004      	beq.n	8008b42 <__swbuf_r+0x62>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	07db      	lsls	r3, r3, #31
 8008b3c:	d506      	bpl.n	8008b4c <__swbuf_r+0x6c>
 8008b3e:	2e0a      	cmp	r6, #10
 8008b40:	d104      	bne.n	8008b4c <__swbuf_r+0x6c>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f919 	bl	8008d7c <_fflush_r>
 8008b4a:	b988      	cbnz	r0, 8008b70 <__swbuf_r+0x90>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <__swbuf_r+0x9c>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d101      	bne.n	8008b5a <__swbuf_r+0x7a>
 8008b56:	68ac      	ldr	r4, [r5, #8]
 8008b58:	e7cf      	b.n	8008afa <__swbuf_r+0x1a>
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <__swbuf_r+0xa0>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	bf08      	it	eq
 8008b60:	68ec      	ldreq	r4, [r5, #12]
 8008b62:	e7ca      	b.n	8008afa <__swbuf_r+0x1a>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 f80c 	bl	8008b84 <__swsetup_r>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d0cb      	beq.n	8008b08 <__swbuf_r+0x28>
 8008b70:	f04f 37ff 	mov.w	r7, #4294967295
 8008b74:	e7ea      	b.n	8008b4c <__swbuf_r+0x6c>
 8008b76:	bf00      	nop
 8008b78:	08009e4c 	.word	0x08009e4c
 8008b7c:	08009e6c 	.word	0x08009e6c
 8008b80:	08009e2c 	.word	0x08009e2c

08008b84 <__swsetup_r>:
 8008b84:	4b32      	ldr	r3, [pc, #200]	; (8008c50 <__swsetup_r+0xcc>)
 8008b86:	b570      	push	{r4, r5, r6, lr}
 8008b88:	681d      	ldr	r5, [r3, #0]
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	b125      	cbz	r5, 8008b9a <__swsetup_r+0x16>
 8008b90:	69ab      	ldr	r3, [r5, #24]
 8008b92:	b913      	cbnz	r3, 8008b9a <__swsetup_r+0x16>
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f985 	bl	8008ea4 <__sinit>
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	; (8008c54 <__swsetup_r+0xd0>)
 8008b9c:	429c      	cmp	r4, r3
 8008b9e:	d10f      	bne.n	8008bc0 <__swsetup_r+0x3c>
 8008ba0:	686c      	ldr	r4, [r5, #4]
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba8:	0719      	lsls	r1, r3, #28
 8008baa:	d42c      	bmi.n	8008c06 <__swsetup_r+0x82>
 8008bac:	06dd      	lsls	r5, r3, #27
 8008bae:	d411      	bmi.n	8008bd4 <__swsetup_r+0x50>
 8008bb0:	2309      	movs	r3, #9
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbe:	e03e      	b.n	8008c3e <__swsetup_r+0xba>
 8008bc0:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <__swsetup_r+0xd4>)
 8008bc2:	429c      	cmp	r4, r3
 8008bc4:	d101      	bne.n	8008bca <__swsetup_r+0x46>
 8008bc6:	68ac      	ldr	r4, [r5, #8]
 8008bc8:	e7eb      	b.n	8008ba2 <__swsetup_r+0x1e>
 8008bca:	4b24      	ldr	r3, [pc, #144]	; (8008c5c <__swsetup_r+0xd8>)
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	bf08      	it	eq
 8008bd0:	68ec      	ldreq	r4, [r5, #12]
 8008bd2:	e7e6      	b.n	8008ba2 <__swsetup_r+0x1e>
 8008bd4:	0758      	lsls	r0, r3, #29
 8008bd6:	d512      	bpl.n	8008bfe <__swsetup_r+0x7a>
 8008bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bda:	b141      	cbz	r1, 8008bee <__swsetup_r+0x6a>
 8008bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be0:	4299      	cmp	r1, r3
 8008be2:	d002      	beq.n	8008bea <__swsetup_r+0x66>
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff fb27 	bl	8008238 <_free_r>
 8008bea:	2300      	movs	r3, #0
 8008bec:	6363      	str	r3, [r4, #52]	; 0x34
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f043 0308 	orr.w	r3, r3, #8
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	b94b      	cbnz	r3, 8008c1e <__swsetup_r+0x9a>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c14:	d003      	beq.n	8008c1e <__swsetup_r+0x9a>
 8008c16:	4621      	mov	r1, r4
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 fa09 	bl	8009030 <__smakebuf_r>
 8008c1e:	89a0      	ldrh	r0, [r4, #12]
 8008c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c24:	f010 0301 	ands.w	r3, r0, #1
 8008c28:	d00a      	beq.n	8008c40 <__swsetup_r+0xbc>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	6963      	ldr	r3, [r4, #20]
 8008c30:	425b      	negs	r3, r3
 8008c32:	61a3      	str	r3, [r4, #24]
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	b943      	cbnz	r3, 8008c4a <__swsetup_r+0xc6>
 8008c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c3c:	d1ba      	bne.n	8008bb4 <__swsetup_r+0x30>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	0781      	lsls	r1, r0, #30
 8008c42:	bf58      	it	pl
 8008c44:	6963      	ldrpl	r3, [r4, #20]
 8008c46:	60a3      	str	r3, [r4, #8]
 8008c48:	e7f4      	b.n	8008c34 <__swsetup_r+0xb0>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e7f7      	b.n	8008c3e <__swsetup_r+0xba>
 8008c4e:	bf00      	nop
 8008c50:	20000250 	.word	0x20000250
 8008c54:	08009e4c 	.word	0x08009e4c
 8008c58:	08009e6c 	.word	0x08009e6c
 8008c5c:	08009e2c 	.word	0x08009e2c

08008c60 <abort>:
 8008c60:	b508      	push	{r3, lr}
 8008c62:	2006      	movs	r0, #6
 8008c64:	f000 fa54 	bl	8009110 <raise>
 8008c68:	2001      	movs	r0, #1
 8008c6a:	f7f9 f83b 	bl	8001ce4 <_exit>
	...

08008c70 <__sflush_r>:
 8008c70:	898a      	ldrh	r2, [r1, #12]
 8008c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c76:	4605      	mov	r5, r0
 8008c78:	0710      	lsls	r0, r2, #28
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	d458      	bmi.n	8008d30 <__sflush_r+0xc0>
 8008c7e:	684b      	ldr	r3, [r1, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dc05      	bgt.n	8008c90 <__sflush_r+0x20>
 8008c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dc02      	bgt.n	8008c90 <__sflush_r+0x20>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	d0f9      	beq.n	8008c8a <__sflush_r+0x1a>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c9c:	682f      	ldr	r7, [r5, #0]
 8008c9e:	602b      	str	r3, [r5, #0]
 8008ca0:	d032      	beq.n	8008d08 <__sflush_r+0x98>
 8008ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	075a      	lsls	r2, r3, #29
 8008ca8:	d505      	bpl.n	8008cb6 <__sflush_r+0x46>
 8008caa:	6863      	ldr	r3, [r4, #4]
 8008cac:	1ac0      	subs	r0, r0, r3
 8008cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb0:	b10b      	cbz	r3, 8008cb6 <__sflush_r+0x46>
 8008cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb4:	1ac0      	subs	r0, r0, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cbc:	6a21      	ldr	r1, [r4, #32]
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b0      	blx	r6
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	d106      	bne.n	8008cd6 <__sflush_r+0x66>
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	291d      	cmp	r1, #29
 8008ccc:	d82c      	bhi.n	8008d28 <__sflush_r+0xb8>
 8008cce:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <__sflush_r+0x108>)
 8008cd0:	40ca      	lsrs	r2, r1
 8008cd2:	07d6      	lsls	r6, r2, #31
 8008cd4:	d528      	bpl.n	8008d28 <__sflush_r+0xb8>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	6062      	str	r2, [r4, #4]
 8008cda:	04d9      	lsls	r1, r3, #19
 8008cdc:	6922      	ldr	r2, [r4, #16]
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	d504      	bpl.n	8008cec <__sflush_r+0x7c>
 8008ce2:	1c42      	adds	r2, r0, #1
 8008ce4:	d101      	bne.n	8008cea <__sflush_r+0x7a>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	b903      	cbnz	r3, 8008cec <__sflush_r+0x7c>
 8008cea:	6560      	str	r0, [r4, #84]	; 0x54
 8008cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cee:	602f      	str	r7, [r5, #0]
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d0ca      	beq.n	8008c8a <__sflush_r+0x1a>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <__sflush_r+0x92>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff fa9b 	bl	8008238 <_free_r>
 8008d02:	2000      	movs	r0, #0
 8008d04:	6360      	str	r0, [r4, #52]	; 0x34
 8008d06:	e7c1      	b.n	8008c8c <__sflush_r+0x1c>
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	1c41      	adds	r1, r0, #1
 8008d12:	d1c7      	bne.n	8008ca4 <__sflush_r+0x34>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c4      	beq.n	8008ca4 <__sflush_r+0x34>
 8008d1a:	2b1d      	cmp	r3, #29
 8008d1c:	d001      	beq.n	8008d22 <__sflush_r+0xb2>
 8008d1e:	2b16      	cmp	r3, #22
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0xb6>
 8008d22:	602f      	str	r7, [r5, #0]
 8008d24:	e7b1      	b.n	8008c8a <__sflush_r+0x1a>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2c:	81a3      	strh	r3, [r4, #12]
 8008d2e:	e7ad      	b.n	8008c8c <__sflush_r+0x1c>
 8008d30:	690f      	ldr	r7, [r1, #16]
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d0a9      	beq.n	8008c8a <__sflush_r+0x1a>
 8008d36:	0793      	lsls	r3, r2, #30
 8008d38:	680e      	ldr	r6, [r1, #0]
 8008d3a:	bf08      	it	eq
 8008d3c:	694b      	ldreq	r3, [r1, #20]
 8008d3e:	600f      	str	r7, [r1, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2300      	movne	r3, #0
 8008d44:	eba6 0807 	sub.w	r8, r6, r7
 8008d48:	608b      	str	r3, [r1, #8]
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	dd9c      	ble.n	8008c8a <__sflush_r+0x1a>
 8008d50:	6a21      	ldr	r1, [r4, #32]
 8008d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d54:	4643      	mov	r3, r8
 8008d56:	463a      	mov	r2, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	dc06      	bgt.n	8008d6e <__sflush_r+0xfe>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	e78e      	b.n	8008c8c <__sflush_r+0x1c>
 8008d6e:	4407      	add	r7, r0
 8008d70:	eba8 0800 	sub.w	r8, r8, r0
 8008d74:	e7e9      	b.n	8008d4a <__sflush_r+0xda>
 8008d76:	bf00      	nop
 8008d78:	20400001 	.word	0x20400001

08008d7c <_fflush_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	690b      	ldr	r3, [r1, #16]
 8008d80:	4605      	mov	r5, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b913      	cbnz	r3, 8008d8c <_fflush_r+0x10>
 8008d86:	2500      	movs	r5, #0
 8008d88:	4628      	mov	r0, r5
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	b118      	cbz	r0, 8008d96 <_fflush_r+0x1a>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <_fflush_r+0x1a>
 8008d92:	f000 f887 	bl	8008ea4 <__sinit>
 8008d96:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <_fflush_r+0x6c>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d11b      	bne.n	8008dd4 <_fflush_r+0x58>
 8008d9c:	686c      	ldr	r4, [r5, #4]
 8008d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0ef      	beq.n	8008d86 <_fflush_r+0xa>
 8008da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008da8:	07d0      	lsls	r0, r2, #31
 8008daa:	d404      	bmi.n	8008db6 <_fflush_r+0x3a>
 8008dac:	0599      	lsls	r1, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_fflush_r+0x3a>
 8008db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008db2:	f000 f915 	bl	8008fe0 <__retarget_lock_acquire_recursive>
 8008db6:	4628      	mov	r0, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7ff ff59 	bl	8008c70 <__sflush_r>
 8008dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc0:	07da      	lsls	r2, r3, #31
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	d4e0      	bmi.n	8008d88 <_fflush_r+0xc>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	059b      	lsls	r3, r3, #22
 8008dca:	d4dd      	bmi.n	8008d88 <_fflush_r+0xc>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f000 f908 	bl	8008fe2 <__retarget_lock_release_recursive>
 8008dd2:	e7d9      	b.n	8008d88 <_fflush_r+0xc>
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <_fflush_r+0x70>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <_fflush_r+0x62>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7df      	b.n	8008d9e <_fflush_r+0x22>
 8008dde:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <_fflush_r+0x74>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7da      	b.n	8008d9e <_fflush_r+0x22>
 8008de8:	08009e4c 	.word	0x08009e4c
 8008dec:	08009e6c 	.word	0x08009e6c
 8008df0:	08009e2c 	.word	0x08009e2c

08008df4 <std>:
 8008df4:	2300      	movs	r3, #0
 8008df6:	b510      	push	{r4, lr}
 8008df8:	4604      	mov	r4, r0
 8008dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8008dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e02:	6083      	str	r3, [r0, #8]
 8008e04:	8181      	strh	r1, [r0, #12]
 8008e06:	6643      	str	r3, [r0, #100]	; 0x64
 8008e08:	81c2      	strh	r2, [r0, #14]
 8008e0a:	6183      	str	r3, [r0, #24]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	2208      	movs	r2, #8
 8008e10:	305c      	adds	r0, #92	; 0x5c
 8008e12:	f7fb fdbd 	bl	8004990 <memset>
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <std+0x38>)
 8008e18:	6263      	str	r3, [r4, #36]	; 0x24
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <std+0x3c>)
 8008e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e1e:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <std+0x40>)
 8008e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <std+0x44>)
 8008e24:	6224      	str	r4, [r4, #32]
 8008e26:	6323      	str	r3, [r4, #48]	; 0x30
 8008e28:	bd10      	pop	{r4, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08009149 	.word	0x08009149
 8008e30:	0800916b 	.word	0x0800916b
 8008e34:	080091a3 	.word	0x080091a3
 8008e38:	080091c7 	.word	0x080091c7

08008e3c <_cleanup_r>:
 8008e3c:	4901      	ldr	r1, [pc, #4]	; (8008e44 <_cleanup_r+0x8>)
 8008e3e:	f000 b8af 	b.w	8008fa0 <_fwalk_reent>
 8008e42:	bf00      	nop
 8008e44:	08008d7d 	.word	0x08008d7d

08008e48 <__sfmoreglue>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	2268      	movs	r2, #104	; 0x68
 8008e4c:	1e4d      	subs	r5, r1, #1
 8008e4e:	4355      	muls	r5, r2
 8008e50:	460e      	mov	r6, r1
 8008e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e56:	f7ff fa5b 	bl	8008310 <_malloc_r>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	b140      	cbz	r0, 8008e70 <__sfmoreglue+0x28>
 8008e5e:	2100      	movs	r1, #0
 8008e60:	e9c0 1600 	strd	r1, r6, [r0]
 8008e64:	300c      	adds	r0, #12
 8008e66:	60a0      	str	r0, [r4, #8]
 8008e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e6c:	f7fb fd90 	bl	8004990 <memset>
 8008e70:	4620      	mov	r0, r4
 8008e72:	bd70      	pop	{r4, r5, r6, pc}

08008e74 <__sfp_lock_acquire>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__sfp_lock_acquire+0x8>)
 8008e76:	f000 b8b3 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	2001c595 	.word	0x2001c595

08008e80 <__sfp_lock_release>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__sfp_lock_release+0x8>)
 8008e82:	f000 b8ae 	b.w	8008fe2 <__retarget_lock_release_recursive>
 8008e86:	bf00      	nop
 8008e88:	2001c595 	.word	0x2001c595

08008e8c <__sinit_lock_acquire>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	; (8008e94 <__sinit_lock_acquire+0x8>)
 8008e8e:	f000 b8a7 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 8008e92:	bf00      	nop
 8008e94:	2001c596 	.word	0x2001c596

08008e98 <__sinit_lock_release>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__sinit_lock_release+0x8>)
 8008e9a:	f000 b8a2 	b.w	8008fe2 <__retarget_lock_release_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2001c596 	.word	0x2001c596

08008ea4 <__sinit>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	f7ff fff0 	bl	8008e8c <__sinit_lock_acquire>
 8008eac:	69a3      	ldr	r3, [r4, #24]
 8008eae:	b11b      	cbz	r3, 8008eb8 <__sinit+0x14>
 8008eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb4:	f7ff bff0 	b.w	8008e98 <__sinit_lock_release>
 8008eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8008ebe:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <__sinit+0x68>)
 8008ec0:	4a13      	ldr	r2, [pc, #76]	; (8008f10 <__sinit+0x6c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	bf04      	itt	eq
 8008eca:	2301      	moveq	r3, #1
 8008ecc:	61a3      	streq	r3, [r4, #24]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 f820 	bl	8008f14 <__sfp>
 8008ed4:	6060      	str	r0, [r4, #4]
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 f81c 	bl	8008f14 <__sfp>
 8008edc:	60a0      	str	r0, [r4, #8]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 f818 	bl	8008f14 <__sfp>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	60e0      	str	r0, [r4, #12]
 8008ee8:	2104      	movs	r1, #4
 8008eea:	6860      	ldr	r0, [r4, #4]
 8008eec:	f7ff ff82 	bl	8008df4 <std>
 8008ef0:	68a0      	ldr	r0, [r4, #8]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	2109      	movs	r1, #9
 8008ef6:	f7ff ff7d 	bl	8008df4 <std>
 8008efa:	68e0      	ldr	r0, [r4, #12]
 8008efc:	2202      	movs	r2, #2
 8008efe:	2112      	movs	r1, #18
 8008f00:	f7ff ff78 	bl	8008df4 <std>
 8008f04:	2301      	movs	r3, #1
 8008f06:	61a3      	str	r3, [r4, #24]
 8008f08:	e7d2      	b.n	8008eb0 <__sinit+0xc>
 8008f0a:	bf00      	nop
 8008f0c:	080099e8 	.word	0x080099e8
 8008f10:	08008e3d 	.word	0x08008e3d

08008f14 <__sfp>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	4607      	mov	r7, r0
 8008f18:	f7ff ffac 	bl	8008e74 <__sfp_lock_acquire>
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <__sfp+0x84>)
 8008f1e:	681e      	ldr	r6, [r3, #0]
 8008f20:	69b3      	ldr	r3, [r6, #24]
 8008f22:	b913      	cbnz	r3, 8008f2a <__sfp+0x16>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff ffbd 	bl	8008ea4 <__sinit>
 8008f2a:	3648      	adds	r6, #72	; 0x48
 8008f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	d503      	bpl.n	8008f3c <__sfp+0x28>
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	b30b      	cbz	r3, 8008f7c <__sfp+0x68>
 8008f38:	6836      	ldr	r6, [r6, #0]
 8008f3a:	e7f7      	b.n	8008f2c <__sfp+0x18>
 8008f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f40:	b9d5      	cbnz	r5, 8008f78 <__sfp+0x64>
 8008f42:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <__sfp+0x88>)
 8008f44:	60e3      	str	r3, [r4, #12]
 8008f46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f4c:	f000 f847 	bl	8008fde <__retarget_lock_init_recursive>
 8008f50:	f7ff ff96 	bl	8008e80 <__sfp_lock_release>
 8008f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f5c:	6025      	str	r5, [r4, #0]
 8008f5e:	61a5      	str	r5, [r4, #24]
 8008f60:	2208      	movs	r2, #8
 8008f62:	4629      	mov	r1, r5
 8008f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f68:	f7fb fd12 	bl	8004990 <memset>
 8008f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f74:	4620      	mov	r0, r4
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f78:	3468      	adds	r4, #104	; 0x68
 8008f7a:	e7d9      	b.n	8008f30 <__sfp+0x1c>
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f7ff ff62 	bl	8008e48 <__sfmoreglue>
 8008f84:	4604      	mov	r4, r0
 8008f86:	6030      	str	r0, [r6, #0]
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d1d5      	bne.n	8008f38 <__sfp+0x24>
 8008f8c:	f7ff ff78 	bl	8008e80 <__sfp_lock_release>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	e7ee      	b.n	8008f74 <__sfp+0x60>
 8008f96:	bf00      	nop
 8008f98:	080099e8 	.word	0x080099e8
 8008f9c:	ffff0001 	.word	0xffff0001

08008fa0 <_fwalk_reent>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	4688      	mov	r8, r1
 8008fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fac:	2700      	movs	r7, #0
 8008fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8008fb6:	d505      	bpl.n	8008fc4 <_fwalk_reent+0x24>
 8008fb8:	6824      	ldr	r4, [r4, #0]
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d1f7      	bne.n	8008fae <_fwalk_reent+0xe>
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc4:	89ab      	ldrh	r3, [r5, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d907      	bls.n	8008fda <_fwalk_reent+0x3a>
 8008fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	d003      	beq.n	8008fda <_fwalk_reent+0x3a>
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	47c0      	blx	r8
 8008fd8:	4307      	orrs	r7, r0
 8008fda:	3568      	adds	r5, #104	; 0x68
 8008fdc:	e7e9      	b.n	8008fb2 <_fwalk_reent+0x12>

08008fde <__retarget_lock_init_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <__retarget_lock_acquire_recursive>:
 8008fe0:	4770      	bx	lr

08008fe2 <__retarget_lock_release_recursive>:
 8008fe2:	4770      	bx	lr

08008fe4 <__swhatbuf_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	b096      	sub	sp, #88	; 0x58
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	da08      	bge.n	8009008 <__swhatbuf_r+0x24>
 8008ff6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	061a      	lsls	r2, r3, #24
 8009000:	d410      	bmi.n	8009024 <__swhatbuf_r+0x40>
 8009002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009006:	e00e      	b.n	8009026 <__swhatbuf_r+0x42>
 8009008:	466a      	mov	r2, sp
 800900a:	f000 f903 	bl	8009214 <_fstat_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	dbf1      	blt.n	8008ff6 <__swhatbuf_r+0x12>
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800901c:	425a      	negs	r2, r3
 800901e:	415a      	adcs	r2, r3
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	e7ee      	b.n	8009002 <__swhatbuf_r+0x1e>
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	2000      	movs	r0, #0
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	b016      	add	sp, #88	; 0x58
 800902c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009030 <__smakebuf_r>:
 8009030:	898b      	ldrh	r3, [r1, #12]
 8009032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009034:	079d      	lsls	r5, r3, #30
 8009036:	4606      	mov	r6, r0
 8009038:	460c      	mov	r4, r1
 800903a:	d507      	bpl.n	800904c <__smakebuf_r+0x1c>
 800903c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	2301      	movs	r3, #1
 8009046:	6163      	str	r3, [r4, #20]
 8009048:	b002      	add	sp, #8
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	ab01      	add	r3, sp, #4
 800904e:	466a      	mov	r2, sp
 8009050:	f7ff ffc8 	bl	8008fe4 <__swhatbuf_r>
 8009054:	9900      	ldr	r1, [sp, #0]
 8009056:	4605      	mov	r5, r0
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff f959 	bl	8008310 <_malloc_r>
 800905e:	b948      	cbnz	r0, 8009074 <__smakebuf_r+0x44>
 8009060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d4ef      	bmi.n	8009048 <__smakebuf_r+0x18>
 8009068:	f023 0303 	bic.w	r3, r3, #3
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	e7e3      	b.n	800903c <__smakebuf_r+0xc>
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <__smakebuf_r+0x7c>)
 8009076:	62b3      	str	r3, [r6, #40]	; 0x28
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	6020      	str	r0, [r4, #0]
 800907c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	6163      	str	r3, [r4, #20]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	6120      	str	r0, [r4, #16]
 800908a:	b15b      	cbz	r3, 80090a4 <__smakebuf_r+0x74>
 800908c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009090:	4630      	mov	r0, r6
 8009092:	f000 f8d1 	bl	8009238 <_isatty_r>
 8009096:	b128      	cbz	r0, 80090a4 <__smakebuf_r+0x74>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	89a0      	ldrh	r0, [r4, #12]
 80090a6:	4305      	orrs	r5, r0
 80090a8:	81a5      	strh	r5, [r4, #12]
 80090aa:	e7cd      	b.n	8009048 <__smakebuf_r+0x18>
 80090ac:	08008e3d 	.word	0x08008e3d

080090b0 <_malloc_usable_size_r>:
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f18      	subs	r0, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfbc      	itt	lt
 80090ba:	580b      	ldrlt	r3, [r1, r0]
 80090bc:	18c0      	addlt	r0, r0, r3
 80090be:	4770      	bx	lr

080090c0 <_raise_r>:
 80090c0:	291f      	cmp	r1, #31
 80090c2:	b538      	push	{r3, r4, r5, lr}
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	d904      	bls.n	80090d4 <_raise_r+0x14>
 80090ca:	2316      	movs	r3, #22
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090d6:	b112      	cbz	r2, 80090de <_raise_r+0x1e>
 80090d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090dc:	b94b      	cbnz	r3, 80090f2 <_raise_r+0x32>
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f830 	bl	8009144 <_getpid_r>
 80090e4:	462a      	mov	r2, r5
 80090e6:	4601      	mov	r1, r0
 80090e8:	4620      	mov	r0, r4
 80090ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ee:	f000 b817 	b.w	8009120 <_kill_r>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d00a      	beq.n	800910c <_raise_r+0x4c>
 80090f6:	1c59      	adds	r1, r3, #1
 80090f8:	d103      	bne.n	8009102 <_raise_r+0x42>
 80090fa:	2316      	movs	r3, #22
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	2001      	movs	r0, #1
 8009100:	e7e7      	b.n	80090d2 <_raise_r+0x12>
 8009102:	2400      	movs	r4, #0
 8009104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009108:	4628      	mov	r0, r5
 800910a:	4798      	blx	r3
 800910c:	2000      	movs	r0, #0
 800910e:	e7e0      	b.n	80090d2 <_raise_r+0x12>

08009110 <raise>:
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <raise+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f7ff bfd3 	b.w	80090c0 <_raise_r>
 800911a:	bf00      	nop
 800911c:	20000250 	.word	0x20000250

08009120 <_kill_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	; (8009140 <_kill_r+0x20>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	f7f8 fdc9 	bl	8001cc4 <_kill>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d102      	bne.n	800913c <_kill_r+0x1c>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b103      	cbz	r3, 800913c <_kill_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	2001c590 	.word	0x2001c590

08009144 <_getpid_r>:
 8009144:	f7f8 bdb6 	b.w	8001cb4 <_getpid>

08009148 <__sread>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	f000 f894 	bl	800927c <_read_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	bfab      	itete	ge
 8009158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800915a:	89a3      	ldrhlt	r3, [r4, #12]
 800915c:	181b      	addge	r3, r3, r0
 800915e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009162:	bfac      	ite	ge
 8009164:	6563      	strge	r3, [r4, #84]	; 0x54
 8009166:	81a3      	strhlt	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__swrite>:
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	461f      	mov	r7, r3
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	05db      	lsls	r3, r3, #23
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	4616      	mov	r6, r2
 800917a:	d505      	bpl.n	8009188 <__swrite+0x1e>
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2302      	movs	r3, #2
 8009182:	2200      	movs	r2, #0
 8009184:	f000 f868 	bl	8009258 <_lseek_r>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	4632      	mov	r2, r6
 8009196:	463b      	mov	r3, r7
 8009198:	4628      	mov	r0, r5
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f000 b817 	b.w	80091d0 <_write_r>

080091a2 <__sseek>:
 80091a2:	b510      	push	{r4, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 f855 	bl	8009258 <_lseek_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	bf15      	itete	ne
 80091b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091be:	81a3      	strheq	r3, [r4, #12]
 80091c0:	bf18      	it	ne
 80091c2:	81a3      	strhne	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__sclose>:
 80091c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ca:	f000 b813 	b.w	80091f4 <_close_r>
	...

080091d0 <_write_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_write_r+0x20>)
 80091d4:	4604      	mov	r4, r0
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	2200      	movs	r2, #0
 80091dc:	602a      	str	r2, [r5, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f7f8 fda7 	bl	8001d32 <_write>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_write_r+0x1e>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_write_r+0x1e>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	2001c590 	.word	0x2001c590

080091f4 <_close_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_close_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f8 fdb3 	bl	8001d6a <_close>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_close_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_close_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	2001c590 	.word	0x2001c590

08009214 <_fstat_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d07      	ldr	r5, [pc, #28]	; (8009234 <_fstat_r+0x20>)
 8009218:	2300      	movs	r3, #0
 800921a:	4604      	mov	r4, r0
 800921c:	4608      	mov	r0, r1
 800921e:	4611      	mov	r1, r2
 8009220:	602b      	str	r3, [r5, #0]
 8009222:	f7f8 fdae 	bl	8001d82 <_fstat>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d102      	bne.n	8009230 <_fstat_r+0x1c>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	b103      	cbz	r3, 8009230 <_fstat_r+0x1c>
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	bf00      	nop
 8009234:	2001c590 	.word	0x2001c590

08009238 <_isatty_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d06      	ldr	r5, [pc, #24]	; (8009254 <_isatty_r+0x1c>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f8 fdad 	bl	8001da2 <_isatty>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_isatty_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_isatty_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	2001c590 	.word	0x2001c590

08009258 <_lseek_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	; (8009278 <_lseek_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f8 fda6 	bl	8001db8 <_lseek>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_lseek_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_lseek_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	2001c590 	.word	0x2001c590

0800927c <_read_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	; (800929c <_read_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 fd34 	bl	8001cf8 <_read>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_read_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_read_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2001c590 	.word	0x2001c590

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
